(()=>{var t={31:function(t,n,e){var r;!function(t,i){function o(t){var n=this,e="";n.next=function(){var t=n.x^n.x>>>2;return n.x=n.y,n.y=n.z,n.z=n.w,n.w=n.v,(n.d=n.d+362437|0)+(n.v=n.v^n.v<<4^t^t<<1)|0},n.x=0,n.y=0,n.z=0,n.w=0,n.v=0,t===(0|t)?n.x=t:e+=t;for(var r=0;r<e.length+64;r++)n.x^=0|e.charCodeAt(r),r==e.length&&(n.d=n.x<<10^n.x>>>4),n.next()}function a(t,n){return n.x=t.x,n.y=t.y,n.z=t.z,n.w=t.w,n.v=t.v,n.d=t.d,n}function s(t,n){var e=new o(t),r=n&&n.state,i=function(){return(e.next()>>>0)/4294967296};return i.double=function(){do{var t=((e.next()>>>11)+(e.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=e.next,i.quick=i,r&&("object"==typeof r&&a(r,e),i.state=function(){return a(e,{})}),i}i&&i.exports?i.exports=s:e.amdD&&e.amdO?void 0===(r=function(){return s}.call(n,e,n,i))||(i.exports=r):this.xorwow=s}(0,t=e.nmd(t),e.amdD)},67:function(t,n,e){var r;!function(t,i){function o(t){var n=this;n.next=function(){var t,e,r=n.x,i=n.i;return t=r[i],e=(t^=t>>>7)^t<<24,e^=(t=r[i+1&7])^t>>>10,e^=(t=r[i+3&7])^t>>>3,e^=(t=r[i+4&7])^t<<7,t=r[i+7&7],e^=(t^=t<<13)^t<<9,r[i]=e,n.i=i+1&7,e},function(t,n){var e,r=[];if(n===(0|n))r[0]=n;else for(n=""+n,e=0;e<n.length;++e)r[7&e]=r[7&e]<<15^n.charCodeAt(e)+r[e+1&7]<<13;for(;r.length<8;)r.push(0);for(e=0;e<8&&0===r[e];++e);for(8==e?r[7]=-1:r[e],t.x=r,t.i=0,e=256;e>0;--e)t.next()}(n,t)}function a(t,n){return n.x=t.x.slice(),n.i=t.i,n}function s(t,n){null==t&&(t=+new Date);var e=new o(t),r=n&&n.state,i=function(){return(e.next()>>>0)/4294967296};return i.double=function(){do{var t=((e.next()>>>11)+(e.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=e.next,i.quick=i,r&&(r.x&&a(r,e),i.state=function(){return a(e,{})}),i}i&&i.exports?i.exports=s:e.amdD&&e.amdO?void 0===(r=function(){return s}.call(n,e,n,i))||(i.exports=r):this.xorshift7=s}(0,t=e.nmd(t),e.amdD)},180:function(t,n,e){var r;!function(t,i){function o(t){var n,e=this,r=(n=4022871197,function(t){t=String(t);for(var e=0;e<t.length;e++){var r=.02519603282416938*(n+=t.charCodeAt(e));r-=n=r>>>0,n=(r*=n)>>>0,n+=4294967296*(r-=n)}return 2.3283064365386963e-10*(n>>>0)});e.next=function(){var t=2091639*e.s0+2.3283064365386963e-10*e.c;return e.s0=e.s1,e.s1=e.s2,e.s2=t-(e.c=0|t)},e.c=1,e.s0=r(" "),e.s1=r(" "),e.s2=r(" "),e.s0-=r(t),e.s0<0&&(e.s0+=1),e.s1-=r(t),e.s1<0&&(e.s1+=1),e.s2-=r(t),e.s2<0&&(e.s2+=1),r=null}function a(t,n){return n.c=t.c,n.s0=t.s0,n.s1=t.s1,n.s2=t.s2,n}function s(t,n){var e=new o(t),r=n&&n.state,i=e.next;return i.int32=function(){return 4294967296*e.next()|0},i.double=function(){return i()+11102230246251565e-32*(2097152*i()|0)},i.quick=i,r&&("object"==typeof r&&a(r,e),i.state=function(){return a(e,{})}),i}i&&i.exports?i.exports=s:e.amdD&&e.amdO?void 0===(r=function(){return s}.call(n,e,n,i))||(i.exports=r):this.alea=s}(0,t=e.nmd(t),e.amdD)},181:function(t,n,e){var r;!function(t,i){function o(t){var n=this,e="";n.x=0,n.y=0,n.z=0,n.w=0,n.next=function(){var t=n.x^n.x<<11;return n.x=n.y,n.y=n.z,n.z=n.w,n.w^=n.w>>>19^t^t>>>8},t===(0|t)?n.x=t:e+=t;for(var r=0;r<e.length+64;r++)n.x^=0|e.charCodeAt(r),n.next()}function a(t,n){return n.x=t.x,n.y=t.y,n.z=t.z,n.w=t.w,n}function s(t,n){var e=new o(t),r=n&&n.state,i=function(){return(e.next()>>>0)/4294967296};return i.double=function(){do{var t=((e.next()>>>11)+(e.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=e.next,i.quick=i,r&&("object"==typeof r&&a(r,e),i.state=function(){return a(e,{})}),i}i&&i.exports?i.exports=s:e.amdD&&e.amdO?void 0===(r=function(){return s}.call(n,e,n,i))||(i.exports=r):this.xor128=s}(0,t=e.nmd(t),e.amdD)},234:()=>{},391:(t,n,e)=>{var r=e(180),i=e(181),o=e(31),a=e(67),s=e(833),u=e(717),c=e(801);c.alea=r,c.xor128=i,c.xorwow=o,c.xorshift7=a,c.xor4096=s,c.tychei=u,t.exports=c},717:function(t,n,e){var r;!function(t,i){function o(t){var n=this,e="";n.next=function(){var t=n.b,e=n.c,r=n.d,i=n.a;return t=t<<25^t>>>7^e,e=e-r|0,r=r<<24^r>>>8^i,i=i-t|0,n.b=t=t<<20^t>>>12^e,n.c=e=e-r|0,n.d=r<<16^e>>>16^i,n.a=i-t|0},n.a=0,n.b=0,n.c=-1640531527,n.d=1367130551,t===Math.floor(t)?(n.a=t/4294967296|0,n.b=0|t):e+=t;for(var r=0;r<e.length+20;r++)n.b^=0|e.charCodeAt(r),n.next()}function a(t,n){return n.a=t.a,n.b=t.b,n.c=t.c,n.d=t.d,n}function s(t,n){var e=new o(t),r=n&&n.state,i=function(){return(e.next()>>>0)/4294967296};return i.double=function(){do{var t=((e.next()>>>11)+(e.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=e.next,i.quick=i,r&&("object"==typeof r&&a(r,e),i.state=function(){return a(e,{})}),i}i&&i.exports?i.exports=s:e.amdD&&e.amdO?void 0===(r=function(){return s}.call(n,e,n,i))||(i.exports=r):this.tychei=s}(0,t=e.nmd(t),e.amdD)},801:function(t,n,e){var r;!function(i,o,a){var s,u=256,c=a.pow(u,6),p=a.pow(2,52),_=2*p,f=255;function l(t,n,e){var r=[],f=y(m((n=1==n?{entropy:!0}:n||{}).entropy?[t,g(o)]:null==t?function(){try{var t;return s&&(t=s.randomBytes)?t=t(u):(t=new Uint8Array(u),(i.crypto||i.msCrypto).getRandomValues(t)),g(t)}catch(t){var n=i.navigator,e=n&&n.plugins;return[+new Date,i,e,i.screen,g(o)]}}():t,3),r),l=new h(r),v=function(){for(var t=l.g(6),n=c,e=0;t<p;)t=(t+e)*u,n*=u,e=l.g(1);for(;t>=_;)t/=2,n/=2,e>>>=1;return(t+e)/n};return v.int32=function(){return 0|l.g(4)},v.quick=function(){return l.g(4)/4294967296},v.double=v,y(g(l.S),o),(n.pass||e||function(t,n,e,r){return r&&(r.S&&d(r,l),t.state=function(){return d(l,{})}),e?(a.random=t,n):t})(v,f,"global"in n?n.global:this==a,n.state)}function h(t){var n,e=t.length,r=this,i=0,o=r.i=r.j=0,a=r.S=[];for(e||(t=[e++]);i<u;)a[i]=i++;for(i=0;i<u;i++)a[i]=a[o=f&o+t[i%e]+(n=a[i])],a[o]=n;(r.g=function(t){for(var n,e=0,i=r.i,o=r.j,a=r.S;t--;)n=a[i=f&i+1],e=e*u+a[f&(a[i]=a[o=f&o+n])+(a[o]=n)];return r.i=i,r.j=o,e})(u)}function d(t,n){return n.i=t.i,n.j=t.j,n.S=t.S.slice(),n}function m(t,n){var e,r=[],i=typeof t;if(n&&"object"==i)for(e in t)try{r.push(m(t[e],n-1))}catch(t){}return r.length?r:"string"==i?t:t+"\0"}function y(t,n){for(var e,r=t+"",i=0;i<r.length;)n[f&i]=f&(e^=19*n[f&i])+r.charCodeAt(i++);return g(n)}function g(t){return String.fromCharCode.apply(0,t)}if(y(a.random(),o),t.exports){t.exports=l;try{s=e(234)}catch(t){}}else void 0===(r=function(){return l}.call(n,e,n,t))||(t.exports=r)}("undefined"!=typeof self?self:this,[],Math)},833:function(t,n,e){var r;!function(t,i){function o(t){var n=this;n.next=function(){var t,e,r=n.w,i=n.X,o=n.i;return n.w=r=r+1640531527|0,e=i[o+34&127],t=i[o=o+1&127],e^=e<<13,t^=t<<17,e^=e>>>15,t^=t>>>12,e=i[o]=e^t,n.i=o,e+(r^r>>>16)|0},function(t,n){var e,r,i,o,a,s=[],u=128;for(n===(0|n)?(r=n,n=null):(n+="\0",r=0,u=Math.max(u,n.length)),i=0,o=-32;o<u;++o)n&&(r^=n.charCodeAt((o+32)%n.length)),0===o&&(a=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,o>=0&&(a=a+1640531527|0,i=0==(e=s[127&o]^=r+a)?i+1:0);for(i>=128&&(s[127&(n&&n.length||0)]=-1),i=127,o=512;o>0;--o)r=s[i+34&127],e=s[i=i+1&127],r^=r<<13,e^=e<<17,r^=r>>>15,e^=e>>>12,s[i]=r^e;t.w=a,t.X=s,t.i=i}(n,t)}function a(t,n){return n.i=t.i,n.w=t.w,n.X=t.X.slice(),n}function s(t,n){null==t&&(t=+new Date);var e=new o(t),r=n&&n.state,i=function(){return(e.next()>>>0)/4294967296};return i.double=function(){do{var t=((e.next()>>>11)+(e.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=e.next,i.quick=i,r&&(r.X&&a(r,e),i.state=function(){return a(e,{})}),i}i&&i.exports?i.exports=s:e.amdD&&e.amdO?void 0===(r=function(){return s}.call(n,e,n,i))||(i.exports=r):this.xor4096=s}(0,t=e.nmd(t),e.amdD)}},n={};function e(r){var i=n[r];if(void 0!==i)return i.exports;var o=n[r]={id:r,loaded:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.loaded=!0,o.exports}e.amdD=function(){throw new Error("define cannot be used indirect")},e.amdO={},e.n=t=>{var n=t&&t.__esModule?()=>t.default:()=>t;return e.d(n,{a:n}),n},e.d=(t,n)=>{for(var r in n)e.o(n,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:n[r]})},e.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),e.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),(()=>{"use strict";function t(t,n){return-1!=t.indexOf(n)}var n,r=function(){function t(t){this.set_active_function=function(){},this.forwarder_name=t}return t.prototype.input=function(t){this.automata.input(t)},t.prototype.add_activation_function=function(t){},t.prototype.set_active=function(){},t}(),i=function(){function n(t){this.current_state=-1,this.transitions=[],this.states=[],this.start_state=t.start,this.states=t.states;for(var n=0;n<this.states.length;n++)this.transitions.push([]);for(var e=0,r=t.transitions;e<r.length;e++){var i=r[e];null==this.transitions&&console.log("Something is wrong here"),null!=this.transitions&&null!=i.from||console.log("Something is wrong here"),null==this.transitions[i.from]&&console.log("Something is wrong here");try{this.transitions[i.from].push(i)}catch(t){console.log("weird")}}this.init_function=t.init_function,this.end_states=t.end_states}return n.prototype.input=function(t){var n=this.first_match(t),e=this.current_state;null!=n&&(this.current_state=n.next_state,n.action(e,t,this.current_state))},n.prototype.start=function(){this.current_state=this.start_state},n.prototype.first_match=function(t){for(var n=0;n<this.transitions[this.current_state].length;n++)if(this.transitions[this.current_state][n].accepts(t))return this.transitions[this.current_state][n];return null},n.prototype.initialize=function(){this.current_state=this.start_state,this.init_function()},n.prototype.add_finish_action=function(t){for(var n=0,e=this.transitions;n<e.length;n++)for(var r=e[n],i=function(n){if(o.is_transition_to_end(n)){var e=n.action;n.action=function(n,r,i){e(n,r,i),t()}}},o=this,a=0,s=r;a<s.length;a++)i(s[a])},n.prototype.is_transition_to_end=function(n){return t(this.end_states,n.next_state)},n.prototype.add_action_to_transitions=function(t,n){for(var e=0,r=this.transitions;e<r.length;e++)for(var i=function(e){if(t(e)){var r=e.action;e.action=function(t,e,i){r(t,e,i),n()}}},o=0,a=r[e];o<a.length;o++)i(a[o])},n}(),o=(n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])},n(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),a=function(t){function n(n,e,r,i){var o=t.call(this,n)||this;return o.pre_run_instructions=r,o.post_run_instructions=i,o.measurement=e,o.automata=o.create_automata(),o.automata.initialize(),o}return o(n,t),n.prototype.set_active=function(){this.show_intro()},n.prototype.create_automata=function(){return new i(this.automata_configurator())},n.prototype.output_writer=function(){return this.measurement.output_writer()},n.prototype.show_intro=function(){this.output_writer().clear_all(),this.output_writer().print_string_to_state(this.forwarder_name),this.pre_run_instructions()},n.prototype.empty_screen_and_show_instructions=function(t){this.output_writer().clear_state(),this.output_writer().clear_stage(),null==t||null==t?console.log("something is strange"):t()},n}(r),s=function(t,n,e,r,i){this.states=t,this.start=n,this.init_function=e,this.transitions=r,this.end_states=i},u=function(){var t=function(n,e){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])},t(n,e)};return function(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),c=function(){},p=(function(n){function e(t){var e=n.call(this)||this;return e.accepted_strings=t,e}u(e,n),e.prototype.accepts=function(n){return t(this.accepted_strings,n)}}(c),function(t){function n(n){var e=t.call(this)||this;return e.acceptor_function=n,e}return u(n,t),n.prototype.accepts=function(t){return this.acceptor_function(t)},n}(c));!function(t){function n(){return null!==t&&t.apply(this,arguments)||this}u(n,t),n.prototype.accepts=function(t){return!0}}(c);var _=function(){function t(t,n,e,r){this.from=t,this.acceptor=n,this.next_state=e,this.action=r}return t.prototype.is_valid_input=function(t){return this.acceptor.accepts(t)},t.prototype.accepts=function(t){return this.acceptor.accepts(t)},t}();function f(t,n,e,r){return new _(t,new p(n),e,(function(t,n,e){return r(n)}))}function l(n){return{to:function(e){return{on:function(t){return{if:function(r){return{do:function(i){return f(n,(function(n){return n==t&&r(n)}),e,i)}}},do:function(r){return f(n,(function(n){return n==t}),e,r)}}},on_any:function(r){return{if:function(i){return{do:function(o){return f(n,(function(n){return t(r,n)&&i(n)}),e,o)}}},do:function(i){return f(n,(function(n){return t(r,n)}),e,i)}}}}}}}var h=function(){var t=function(n,e){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])},t(n,e)};return function(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),d=function(){function t(t,n){this.answer=null,this.variable_name=t,this.question_text=n}return t.prototype.store_answer=function(){var t=document.getElementById(this.variable_name);this.answer=t.value},t}(),m=function(t){function n(n,e,r){var i=t.call(this,n,e)||this;return i.alternatives=r,i}return h(n,t),n.prototype.input_html=function(){var t='<select id="'+this.variable_name+'">';t+="<option disabled selected value> -- select an option -- </option>";var n=0;return this.alternatives.forEach((function(e){return t+="<option value="+n+++">"+e+"</option>"})),t+="</select>"},n.prototype.store_answer=function(){var t=document.getElementById(this.variable_name);this.answer=this.alternatives[t.value]},n}(d),y=(function(t){function n(n){return t.call(this,null,n)||this}h(n,t),n.prototype.html_string=function(){return"<p>We have one question to you.</p>"},n.prototype.input_html=function(){return'<input type="text" id="'+this.variable_name+'">'}}(d),function(t){function n(){return null!==t&&t.apply(this,arguments)||this}h(n,t),n.prototype.html_string=function(){},n.prototype.input_html=function(){return'<input type="text" id="'+this.variable_name+'">'}}(d),function(t){function n(n,e){var r=t.call(this,"Questionnaire",e,(function(){return e.output_writer().print_html_on_stage("Please, answer the following questions.<br>")}),(function(){return e.output_writer().print_html_on_stage("Thank you for answering the questions.")}))||this;return r.current_question_number=-1,r.questions=n,r}return h(n,t),n.prototype.automata_configurator=function(){return new s([0,1,2,3,4],0,(function(){}),this.transitions(),[4])},n.prototype.transitions=function(){var t=this;return[l(0).to(4).on("DONE").if((function(t){return!0})).do((function(n){t.add_result_to_question(),console.log("dummy")}))]},n.prototype.show_intro=function(){var n=this;t.prototype.show_intro.call(this);var e=this.create_questionnaire_html_string();this.output_writer().print_html_on_stage(e),document.getElementById("DONE").onclick=function(){return n.input("DONE")}},n.prototype.show_outro=function(){},n.prototype.create_questionnaire_html_string=function(){var t="<fieldset><legend>Questionnaire</legend><div display: inline-block;><table>";return this.questions.forEach((function(n){return t+="<tr><td>"+n.question_text+"</td><td>"+n.input_html()+"</td></tr>"})),t+="</table></div></fieldset><br><button id='DONE'>Ok - all questions answered</button>"},n.prototype.add_result_to_question=function(){for(var t=0,n=this.questions;t<n.length;t++)n[t].store_answer()},n}(a)),g=e(391),v=e.n(g),w=function(){var t=function(n,e){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])},t(n,e)};return function(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}();function x(t,n,e){return new m(t,n,e)}var b=function(){function t(){}return t.prototype.convert_string_to_html_string=function(t){return function(t){return t.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#39;").replace(/\n/g,"<br/>").replace(/ /g,"&nbsp;")}(t)},t.prototype.string_page_command=function(t){var n=this;return function(){return n.print_string_on_stage(t)}},t.prototype.stage_string_pages_commands=function(t){for(var n=[],e=0,r=t;e<r.length;e++){var i=r[e];n.push(this.string_page_command(i))}return n},t.prototype.get_given_answer=function(t){return t},t.prototype.print_on_input_response=function(t){},t.prototype.set_focus_on_input=function(){},t.prototype.clear_all=function(){this.clear_state(),this.clear_stage()},t}(),k=function(){function t(t){this.input_type=t}return t.prototype.accepted_responses=function(){return this.input_type.accepted_responses()},t.prototype.given_answer=function(t){return this.input_type.given_answer(t)},t.prototype.start_measurement=function(t){this.start_time=(new Date).getTime().valueOf(),t.print_task()},t.prototype.stop_measurement=function(t,n){var e=(new Date).getTime().valueOf();n.given_answer=this.input_type.get_given_answer(t),n.required_milliseconds=e-this.start_time,n.do_print_after_task_information()},t.prototype.incorrect_response=function(t,n){var e=(new Date).getTime().valueOf(),r=n.experiment_definition.measurement.get_given_answer(t);n.invalid_answers.push([r,e-this.start_time]),n.do_print_error_message(this.input_type.get_given_answer(t))},t.prototype.output_writer=function(){return this.input_type.output_writer},t.prototype.get_given_answer=function(t){return this.input_type.get_given_answer(t)},t.prototype.demands_penalty=function(){return!1},t.prototype.penalty_is_over=function(){return!0},t}(),O=function(t){function n(n){return t.call(this,n)||this}return w(n,t),n}(k),E=(function(t){function n(n,e){var r=t.call(this,n)||this;return r.penalty_started=!1,r.penalty_start_point=null,r.penalty_miliseconds=1e3*e,r}w(n,t),n.prototype.demands_penalty=function(){return!0},n.prototype.incorrect_response=function(n,e){t.prototype.incorrect_response.call(this,n,e),this.penalty_started=!0,this.penalty_start_point=(new Date).getTime().valueOf(),e.do_print_error_message(this.input_type.get_given_answer(n))},n.prototype.delete_penalty=function(){this.penalty_started=!1,this.penalty_start_point=null},n.prototype.penalty_is_over=function(){var t=(new Date).getTime().valueOf()-this.start_time;return!this.penalty_started||t>=this.penalty_miliseconds},n.prototype.start_measurement=function(n){t.prototype.start_measurement.call(this,n),this.delete_penalty()}}((function(t){function n(n,e){var r=t.call(this,n)||this;return r.penalty_started=!1,r.penalty_start_point=null,r.penalty_miliseconds=1e3*e,r}w(n,t),n.prototype.demands_penalty=function(){return!0},n.prototype.incorrect_response=function(n,e){t.prototype.incorrect_response.call(this,n,e),this.penalty_started=!0,this.penalty_start_point=(new Date).getTime().valueOf(),e.do_print_error_message(this.input_type.get_given_answer(n))},n.prototype.delete_penalty=function(){this.penalty_started=!1,this.penalty_start_point=null},n.prototype.penalty_is_over=function(){var t=(new Date).getTime().valueOf()-this.start_time;return!this.penalty_started||t>=this.penalty_miliseconds},n.prototype.start_measurement=function(n){t.prototype.start_measurement.call(this,n),this.delete_penalty()}}(k),function(t){function n(n){return t.call(this,n)||this}return w(n,t),n}(k))),function(){function t(t){this.output_writer=t}return t.prototype.print_input_request=function(){this.output_writer.ask_for_input()},t.prototype.get_given_answer=function(t){return this.output_writer.get_given_answer(t)},t}()),A=function(t){function n(n,e){var r=t.call(this,e)||this;return r.accepted_keys=n,r}return w(n,t),n.prototype.accepted_responses=function(){return this.accepted_keys},n.prototype.given_answer=function(t){return t},n.prototype.print_input_request=function(){},n.prototype.get_given_answer=function(t){return t},n}(E),q=(function(t){function n(n){return t.call(this,n)||this}w(n,t),n.prototype.accepted_responses=function(){return["Enter"]},n.prototype.given_answer=function(t){},n.prototype.print_input_request=function(){this.output_writer.ask_for_input()}}(E),function(t){function n(n,e,r){return t.call(this,n)||this}w(n,t),n.prototype.accepted_responses=function(){return["Enter"]},n.prototype.given_answer=function(t){},n.prototype.print_input_request=function(){this.output_writer.ask_for_input()}}(E),new(function(){function t(){v()("1234567890",{global:!0})}return t.prototype.new_random_integer=function(t){return Math.trunc(t*Math.random())},t.prototype.set_seed=function(t){v()(t,{global:!0})},t}()));function T(t){q.set_seed(t)}function j(t){return q.new_random_integer(t)}function C(t){for(var n=function(t,n,e){if(e||2===arguments.length)for(var r,i=0,o=n.length;i<o;i++)!r&&i in n||(r||(r=Array.prototype.slice.call(n,0,i)),r[i]=n[i]);return t.concat(r||Array.prototype.slice.call(n))}([],t,!0),e=[];n.length>0;)e.push(n.splice(j(n.length),1)[0]);return e}v()();var S=function(){function t(t,n,e){this.expected_answer="",this.given_answer="",this.required_milliseconds=null,this.task_number_in_execution=-1,this.invalid_answers=[],this.is_training=!1,this.has_pre_task_description=!1,this.do_print_task=function(){throw new Error("Method not implemented.")},this.do_print_pre_task=function(){throw new Error("Method not implemented.")},this.do_print_error_message=function(){throw new Error("Method not implemented.")},this.accepts_answer_function=function(t){return!0},this.do_print_after_task_information=function(){throw new Error("Method not implemented.")},this.treatment_combination=t,this.experiment_definition=n}return t.prototype.accepts_answer=function(t){var n=this.experiment_definition.measurement.get_given_answer(t);return this.accepts_answer_function(n)},t.prototype.next_task=function(){return this.task_number_in_execution<this.experiment_definition.tasks.length?this.experiment_definition.tasks[this.task_number_in_execution]:null},t.prototype.html_string_with_cmd=function(t,n){},t.prototype.html_node_with_cmd=function(t,n){},t.prototype.after_task_string_constructor=function(t){},t.prototype.print_task=function(){this.do_print_task(),this.print_input_request()},t.prototype.print_pre_task_info=function(){this.do_print_pre_task()},t.prototype.print_input_request=function(){this.experiment_definition.measurement.input_type.print_input_request()},t.prototype.treatment_value=function(t){for(var n=0,e=this.treatment_combination.treatment_combination;n<e.length;n++){var r=e[n];if(r.variable.name===t)return r.value}throw"Unknown treatment: "+t},t.prototype.set_computed_variable_value=function(t,n){for(var e=0,r=this.treatment_combination.treatment_combination;e<r.length;e++){var i=r[e];if(i.variable.name===t)return void(i.value=n)}throw"Unknown treatment: "+t},t}(),P=function(){function t(t,n){this.variables=t,this.repetitions=n}return t.prototype.clone=function(){return new t(this.variables,this.repetitions)},t.prototype.create_treatment_combinations=function(){for(var t=[],n=0;n<this.repetitions;n++)t=t.concat(this.variables.create_treatment_combinations());return t},t.prototype.create_tasks=function(t){for(var n=[],e=0,r=this.create_treatment_combinations();e<r.length;e++){var i=r[e],o=new S(i.clone(),t,"");try{t.experiment_definition_task_creator(o)}catch(n){console.log("halt"),t.experiment_definition_task_creator(o)}o.is_training=t.is_training,n.push(o)}return C(n)},t.prototype.get_variable_named=function(t){return this.variables.get_variable_named(t)},t}(),D=function(){function t(t,n,e,r,i,o,a){this.questionnaires=[],this.tasks=[],this.experiment_name=t,this.is_training=n,this.template={experiment_name:t,variables:r,repetitions:i,task_creator:a},this.treatments_combinator=e,this.variables=r,this.measurement=o,this.experiment_definition_task_creator=a}return t.prototype.init_experiment=function(t){this.tasks=this.treatments_combinator.create_tasks(this)},t.prototype.all_independent_variables=function(){return this.variables.independent_variables},t.prototype.generate_csv_data=function(){for(var t=[],n=0,e=this.questionnaires;n<e.length;n++)for(var r=0,i=e[n].questions;r<i.length;r++){var o=i[r];t.push('"'+o.variable_name+'";')}this.variables.print_to_array(t),t.push("number_of_given_answers;expected_answer;given_answer;is_correct;time_in_milliseconds;\n");for(var a=0,s=this.tasks;a<s.length;a++){for(var u=s[a],c=0,p=this.questionnaires;c<p.length;c++)for(var _=0,f=p[c].questions;_<f.length;_++)o=f[_],t.push('"'+o.answer+'";');for(var l=0,h=u.treatment_combination.treatment_combination;l<h.length;l++){var d=h[l];t.push(d.value+";")}t.push(u.invalid_answers.length+1+";"),t.push(u.expected_answer+";"),t.push(u.given_answer+";"),t.push((u.given_answer==u.expected_answer)+";"),t.push(u.required_milliseconds+";"),u.invalid_answers.forEach((function(n){return t.push(n[0]+";"+n[1]+";")})),t.push("\n")}return t},t}(),M=function(){var t=function(n,e){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])},t(n,e)};return function(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),I=function(t){function n(n,e,r){var i=t.call(this,n,r,e[0],e[e.length-1])||this;return i.current_page_number=-1,i.pages=e,i.create_automata(),i}return M(n,t),n.prototype.set_page_index=function(t){this.current_page_number=t,this.empty_screen_and_show_instructions(this.pages[this.current_page_number]),this.output_writer().print_string_to_state(this.forwarder_name),this.output_writer().print_string_to_page_number("Page "+(this.current_page_number+1)+" / "+this.pages.length);var n="<hr>";t>0&&(n+="[&#8592] = previous page"),t<this.pages.length-1&&(n+=("<hr>"!=n?"<br>":"")+"[&#8594] = next page"),t==this.pages.length-1&&(n+=("<hr>"!=n?"<br>":"")+"[Enter] = Finish"),this.output_writer().print_html_on_stage(n)},n.prototype.set_active=function(){t.prototype.set_active.call(this)},n.prototype.show_intro=function(){this.set_page_index(0)},n.prototype.show_outro=function(){},n.prototype.automata_configurator=function(){return new s([0,1],0,(function(){}),this.transitions(),[1])},n.prototype.transitions=function(){var t=this;return[l(0).to(0).on("ArrowRight").if((function(n){return t.current_page_number<t.pages.length-1})).do((function(n){t.set_page_index(++t.current_page_number)})),l(0).to(0).on("ArrowLeft").if((function(n){return t.current_page_number>0})).do((function(n){t.set_page_index(--t.current_page_number)})),l(0).to(1).on("Enter").if((function(n){return t.current_page_number>=t.pages.length-1})).do((function(t){}))]},n}(a),R=function(){var t=function(n,e){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])},t(n,e)};return function(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),z=function(t){function n(n){var e,r,o,a=t.call(this,"Default Sequential Forwarder Forwader")||this;a.current_forwarder_index=0,a.forwarders=n;for(var u=0,c=n;u<c.length;u++)c[u].automata.add_finish_action((function(){return a.automata.input("switch to next state")}));return a.automata=(e=[0,1],r=function(){},o=[l(0).to(0).on("switch to next state").if((function(){return a.current_forwarder_index<a.forwarders.length-1})).do((function(){a.current_forwarder_index++,a.current_forwarder().set_active()})),l(0).to(1).on("switch to next state").if((function(){return a.current_forwarder_index==a.forwarders.length-1})).do((function(){}))],new i(new s(e,0,r,o,[1]))),a.automata.initialize(),a}return R(n,t),n.prototype.input=function(t){this.forwarders[this.current_forwarder_index].input(t)},n.prototype.input_sequence=function(t){for(var n=0,e=t;n<e.length;n++){var r=e[n];this.input(r)}},n.prototype.current_forwarder=function(){return this.forwarders[this.current_forwarder_index]},n.prototype.set_active=function(){t.prototype.set_active.call(this),this.current_forwarder().set_active()},n}(r),L=function(){var t=function(n,e){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])},t(n,e)};return function(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),B=function(t){function n(n,e,r,i,o){var a=t.call(this,n,o,e,r)||this;return a.current_page_index=-1,a.experiment_definition=i,a}return L(n,t),n.prototype.show_intro=function(){this.empty_screen_and_show_instructions(this.pre_run_instructions),this.output_writer().print_experiment_name(this.forwarder_name)},n.prototype.show_outro=function(){this.empty_screen_and_show_instructions(this.post_run_instructions)},n.prototype.automata_configurator=function(){return new s([0,1,2,4,5,6],0,(function(){}),this.transitions(),[6])},n.prototype.current_task=function(){return this.experiment_definition.tasks[this.current_page_index]},n.prototype.automata_configuration=function(){return new s([0,1,2,4,5,6],0,(function(){}),this.transitions(),[6])},n.prototype.transitions=function(){var t=this;return[l(0).to(2).on("Enter").if((function(n){return!t.first_task().has_pre_task_description})).do((function(n){t.set_experiment_index(0),t.measurement.start_measurement(t.current_task())})),l(0).to(1).on("Enter").if((function(n){return t.first_task().has_pre_task_description})).do((function(n){t.set_experiment_index(0),t.show_pre_task_info()})),l(0).to(5).on("Delete").do((function(n){t.show_outro()})),l(1).to(2).on("Enter").do((function(n){t.measurement.start_measurement(t.current_task())})),l(2).to(2).on_any(this.measurement.accepted_responses()).if((function(n){return!t.current_task().accepts_answer(n)&&!t.measurement.demands_penalty()})).do((function(n){t.measurement.incorrect_response(n,t.current_task())})),l(2).to(5).on("?+Control").if((function(t){return!0})).do((function(n){t.measurement.stop_measurement(n,t.current_task()),t.show_outro()})),l(2).to(4).on_any(this.measurement.accepted_responses()).if((function(n){return t.current_task().accepts_answer(n)&&t.current_page_index<t.experiment_definition.tasks.length-1})).do((function(n){t.measurement.stop_measurement(n,t.current_task())})),l(2).to(3).on_any(this.measurement.accepted_responses()).if((function(n){return!t.current_task().accepts_answer(n)&&t.measurement.demands_penalty()})).do((function(n){t.measurement.incorrect_response(n,t.current_task())})),l(3).to(2).on("Enter").if((function(n){return t.measurement.penalty_is_over()})).do((function(n){t.measurement.start_measurement(t.current_task())})),l(4).to(1).on("Enter").if((function(n){return t.current_page_index<t.experiment_definition.tasks.length-1&&t.next_task().has_pre_task_description})).do((function(n){t.inc_current_experiment(),t.show_pre_task_info()})),l(4).to(2).on("Enter").if((function(n){return t.current_page_index<t.experiment_definition.tasks.length-1&&!t.next_task().has_pre_task_description})).do((function(n){t.inc_current_experiment(),t.measurement.start_measurement(t.current_task())})),l(2).to(5).on_any(this.measurement.accepted_responses()).if((function(n){return t.current_task().accepts_answer(n)&&t.current_page_index==t.experiment_definition.tasks.length-1})).do((function(n){t.measurement.stop_measurement(n,t.current_task()),t.show_outro()})),l(5).to(6).on("Enter").do((function(t){}))]},n.prototype.set_experiment_index=function(t){this.current_page_index=t,this.output_writer().print_string_to_page_number("Task "+(this.current_page_index+1)+" / "+this.experiment_definition.tasks.length)},n.prototype.inc_current_experiment=function(){this.set_experiment_index(++this.current_page_index)},n.prototype.init_experiment=function(){this.experiment_definition.init_experiment(!1)},n.prototype.show_pre_task_info=function(){this.output_writer().clear_stage(),this.output_writer().clear_error(),this.current_task().print_pre_task_info()},n.prototype.next_task=function(){return this.experiment_definition.tasks[this.current_page_index+1]},n.prototype.first_task=function(){return this.experiment_definition.tasks[0]},n}(a),U=function(){var t=function(n,e){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])},t(n,e)};return function(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),G=function(t){function n(n,e,r,i){var o=t.call(this,"Training",(function(){n(),i.output_writer().print_html_on_stage("<hr>Press [Enter] to start training.")}),(function(){i.output_writer().print_html_on_stage("You finished the training phase.<hr>"+(e.can_be_repeated?"Please, press [Enter] to run again a training session.<br>":"")+"Please, press [E] (capital E, i.e., [shift] + [e]) to enter the experiment phase.")}),r,i)||this;return o.training_configuration=e,o}return U(n,t),n.prototype.print_cancel_text=function(){this.output_writer().clear_stage(),this.output_writer().print_string_to_page_number("Cancelled"),this.output_writer().print_html_on_stage("You cancelled this training session.<hr>Press [Enter] if you want to start another training session.<br>Press [E] (capital E!) if you want to start with the experiment.")},n.prototype.automata_configurator=function(){return new s([0,1,2,3,4,5,6,7],0,(function(){}),this.transitions(),[6])},n.prototype.transitions=function(){var n=this,e=t.prototype.transitions.call(this),r=[l(0).to(7).on("Escape").if((function(){return n.training_configuration.can_be_cancelled})).do((function(t){n.print_cancel_text()})),l(2).to(7).on("Escape").if((function(){return n.training_configuration.can_be_cancelled})).do((function(t){n.print_cancel_text()})),l(4).to(7).on("Escape").if((function(){return n.current_page_index<n.experiment_definition.tasks.length-1&&n.training_configuration.can_be_cancelled})).do((function(t){n.print_cancel_text()})),l(7).to(6).on("E").do((function(){})),l(7).to(0).on("Enter").do((function(){n.experiment_definition.init_experiment(!0),n.show_intro()})),l(5).to(0).on("Enter").if((function(){return n.training_configuration.can_be_repeated})).do((function(){n.experiment_definition.init_experiment(!0),n.show_intro()})),l(5).to(6).on("E").do((function(t){}))];return e.splice(e.length-1),r.forEach((function(t){return e.push(t)})),e},n.prototype.input=function(n){if(!["a","b","c"].includes(n)&&0!=this.automata.current_state)return t.prototype.input.call(this,n);t.prototype.input.call(this,n)},n.prototype.init_experiment=function(){this.training_configuration.init_experiment(this.experiment_definition)},n}(B),N=function(){var t=function(n,e){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])},t(n,e)};return function(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),F=function(t){function n(n,e,r){return t.call(this,"Main Experiment",(function(){n(),r.output_writer().print_html_on_stage("<hr>Press [Enter] to start the experiment.")}),(function(){r.output_writer().print_html_on_stage("You finished the experiment phase.<hr>Please, press [Enter] to go to the next phase.<br>")}),e,r)||this}return N(n,t),n}(B),Y=function(){var t=function(n,e){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])},t(n,e)};return function(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),H=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return Y(n,t),n.prototype.create_code_all_experiment_automatas=function(t){t.measurement.output_writer();var n=new I("Introduction",t.introduction_texts,t.measurement),e=new I("Finish",t.finish_texts,t.measurement);e.automata.add_finish_action((function(){return t.finish_function(r.experiment_definition)}));var r=new F(t.pre_run_experiment_output,this,t.measurement);r.init_experiment();var i=this.clone(),o=new G(t.pre_run_training_output,t.training_configuration,i,t.measurement);o.init_experiment();var a=null;null!=t.post_questionnaire&&(a=new y(t.post_questionnaire,t.measurement));var s=[];return null!=n&&s.push(n),0!=o.experiment_definition.tasks.length&&s.push(o),s.push(r),null!=a&&(s.push(a),r.experiment_definition.questionnaires.push(a)),s.push(e),new z(s)},n.prototype.clone=function(){return new n(this.template.experiment_name,this.is_training,this.treatments_combinator.clone(),this.template.variables,this.template.repetitions,this.measurement,this.template.task_creator)},n}(D),K=function(){function t(t,n){this.variable=t,this.value=""+n}return t.prototype.clone=function(){return new t(this.variable,this.value)},t}();!function(){function t(t){this.array=t}t.prototype.do=function(t){for(var n=0,e=this.array;n<e.length;n++)t(e[n])},t.prototype.do_with_counter=function(t){for(var n=0;n<this.array.length;n++)t(this.array[n],n)}}(),function(){function t(t){this.counter=t}t.prototype.and_collect=function(t){for(var n=[],e=1;e<=this.counter;e++)n.push(t(e));return n},t.prototype._times=function(t){for(var n=1;n<=this.counter;n++)t()},t.prototype.times=function(t){for(var n=1;n<=this.counter;n++)t(n)}}();var W=function(){function t(t){this.treatment_combination=[],this.treatment_combination=t}return t.prototype.clone=function(){for(var n=new t([]),e=0,r=this.treatment_combination;e<r.length;e++){var i=r[e];n.treatment_combination.push(i.clone())}return n},t}(),X=function(){function t(t){this.can_be_cancelled=!0,this.can_be_repeated=!0,void 0!==t&&(null!=t.fixed_treatments&&(this.fixed_treatments=t.fixed_treatments),this.can_be_cancelled=t.can_be_cancelled,this.can_be_repeated=t.can_be_repeated)}return t.prototype.init_experiment=function(t){if(t.tasks=[],null!=this.fixed_treatments)for(var n=function(n){var e=new W([]);!function(t,n){if(t.length>n.length)throw"Cannot loop both: first array has length: "+t.length+", but second has length "+n.length;for(var r=0,i=0,o=t;i<o.length;i++)a=o[i],s=n[r++],e.treatment_combination.push(new K(a,s));var a,s}(t.all_independent_variables(),n);var r=new S(e,t,"");r.is_training=!0,t.experiment_definition_task_creator(r),t.tasks.push(r)},e=0,r=this.fixed_treatments;e<r.length;e++)n(r[e]);else t.init_experiment(!0)},t}(),Q=function(t,n){this.treatments=[],this.name=t;for(var e=0,r=n;e<r.length;e++){var i=r[e];this.treatments.push(new K(this,i))}};function J(t,n,e){if(0==t.length)e(n);else{for(var r=t.shift(),i=0,o=r;i<o.length;i++){var a=o[i];n.push(a),J(t,n,e),n.pop()}t.unshift(r)}}function V(t,n){J(t,[],n)}var Z=function(){function t(){this.independent_variables=[]}return t.prototype.push_variable=function(t,n){this.independent_variables.push(new Q(t,n))},t.prototype.print_to_array=function(t){for(var n=0,e=this.independent_variables;n<e.length;n++){var r=e[n];t.push(r.name+";")}},t.prototype.create_treatment_combinations=function(){var t=[];return V(this.independent_variables.map((function(t){return t.treatments})),(function(n){t.push(new W(function(t,n,e){if(e||2===arguments.length)for(var r,i=0,o=n.length;i<o;i++)!r&&i in n||(r||(r=Array.prototype.slice.call(n,0,i)),r[i]=n[i]);return t.concat(r||Array.prototype.slice.call(n))}([],n,!0)))})),t},t.prototype.get_variable_named=function(t){for(var n=0,e=this.independent_variables;n<e.length;n++){var r=e[n];if(r.name===t)return r}throw"Unknown independent variable named: "+t},t.from_layout=function(n){for(var e=new t,r=0,i=n;r<i.length;r++){var o=i[r];e.push_variable(o.variable,o.treatments)}return e},t}(),$=function(){var t=function(n,e){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])},t(n,e)};return function(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),tt=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return $(n,t),n.prototype.print_experiment_name=function(t){this.get_html_element_by_id("STATE").innerHTML=t},n.prototype.clear_error=function(){for(var t=0,n=["STAGE_ERROR"];t<n.length;t++)for(var e=n[t],r=document.getElementById(e);r.firstChild;)r.removeChild(r.firstChild)},n.prototype.clear_stage=function(){for(var t=0,n=["STAGE","STAGE_MSG","STAGE_ERROR"];t<n.length;t++)for(var e=n[t],r=document.getElementById(e);r.firstChild;)r.removeChild(r.firstChild)},n.prototype.clear_state=function(){for(var t=0,n=["STATE","TASK"];t<n.length;t++)for(var e=n[t],r=document.getElementById(e);r.firstChild;)r.removeChild(r.firstChild)},n.prototype.print_error_string_on_stage=function(t){this.get_html_element_by_id("STAGE_ERROR").innerHTML=t},n.prototype.get_html_element_by_id=function(t){return document.getElementById(t)},n.prototype.print_string_to_state=function(t){this.get_html_element_by_id("STATE").innerHTML=t},n.prototype.print_string_on_stage=function(t){this.print_html_on_stage("<p>"+t+"</p>")},n.prototype.ask_for_input=function(){var t=document.createElement("p"),n=document.createElement("label");n.setAttribute("type","text"),t.textContent="Answer: ",t.appendChild(n);var e=document.createElement("input");e.setAttribute("type","text"),e.setAttribute("class","input"),t.appendChild(e),e.id="INPUT",this.get_html_element_by_id("STAGE").appendChild(t),e.focus()},n.prototype.set_focus_on_input=function(){this.get_html_element_by_id("INPUT").focus()},n.prototype.print_string_to_page_number=function(t){this.get_html_element_by_id("TASK").innerHTML=t},n.prototype.get_given_answer=function(){return this.get_html_element_by_id("INPUT").value},n.prototype.print_on_input_response=function(t){this.get_html_element_by_id("INPUT").value=t},n.prototype.create_html_element_from_string=function(t){return(new DOMParser).parseFromString(t,"text/html").body},n.prototype.print_html_on_stage=function(t){this.get_html_element_by_id("STAGE").appendChild(this.create_html_element_from_string(t))},n.prototype.print_html_on_error=function(t){this.get_html_element_by_id("STAGE_ERROR").appendChild(this.create_html_element_from_string(t))},n}(b);T("42"),function(){var t,n,e,r=new tt,i={experiment_name:"SQL-WithVersusSubquery",seed:"42",introduction_pages:[function(){return t.print_string_on_stage("This is your hello world experiment.")}],pre_run_training_instructions:(t=r).string_page_command("You entered the training phase. You can skip the training by pressing [Esc]."),pre_run_experiment_instructions:t.string_page_command("You entered the experiment phase."),post_questionnaire:[x("Age","What's your age??",["younger than 18","between 18 and (excluding) 25","between 25 and (excluding) 30","between 30 and (excluding) 35","between 35 and (excluding) 40","40 or older"]),x("Status","What is your current working status?",["Undergraduate student (BSc not yet finished)","Graduate student (at least BSc finished)","PhD student","Professional software developer","Teacher","Other"]),x("Studies","In case you study, what's your subject?",["I do not study","Computer science","computer science related (such as information systems, aka WiInf)","something else in natural sciences","something else"]),x("YearsOfExperience","How many years of experience do you have in software industry?",["none","less than or equal 1 year","more than 1 year, but less than or equal 3 years","more than 3 years, but less than or equal 5 year","more than 5 years"]),x("impression","What statement describes best your impression \n of the experiment?",["I do not think that there was a difference between the notations","The inference notation made it slightly easier for me","Java made it slightly easier for me","The inference notation made it much easier for me","Java made it much easier for me"])],training_configuration:{can_be_cancelled:!0,can_be_repeated:!0},finish_pages:[t.string_page_command("<p>Almost done. Next, the experiment data will be downloaded (after pressing [Enter]).<br><br>Please, send the downloaded file to the experimenter: <a href='mailto:stefan.hanenberg@uni-due.de'>stefan.hanenberg@uni-due.de</a></p><p>By sending that mail, you agree that your (anonymized) data will be used for scientific analyses where your data (together with others in an anonymized way) will be published.<br><br>I.e., you agree with the information sheet, see <a href='https://github.com/shanenbe/Experiments/blob/main/2024_TypeSystems_ConstructorCall_Flat/Agreement.pdf' target='_blank'>here</a>. Note, that it it no longer necessary to send a signed version of the agreement to the experimenter.<br><br>After sending your email, you can close this window.</p><p>Many thanks for your participation.<br>-Stefan Hanenberg</p>")],layout:[{variable:"Format",treatments:["OneLine","MultiLine"]}],repetitions:10,measurement:(e=["0","1","3"],n=function(t){return new A(e,t)},function(t){return new O(n(t))}),task_configuration:function(n){var e;e=function(t){for(var n=[],e=[],r=0;r<8;r++){var i=1==j(2)?"true":"false";n.push(i)}for(r=0;r<6;r++){var o=void 0;o="OneLine"==t?1==j(2)?" && ":" || ":1==j(2)?" && ":"\n || ",e.push(n[r]+o)}return e.push(n[7]),e.join("")}(n.treatment_value("Format")),n.expected_answer="1",n.do_print_task=function(){t.clear_stage(),t.print_html_on_stage("<div class='sourcecode'>"+t.convert_string_to_html_string(e)+"</div>")},n.accepts_answer=function(t){return!0},n.do_print_after_task_information=function(){t.print_error_string_on_stage(t.convert_string_to_html_string("The correct answer was: "+n.expected_answer+"\n\nIn case, you feel not concentrated enough, make a short break.\n\nPress [Enter] to go on. "))}}};T(i.seed);var o=i.measurement(r),a=function(t){var n=Z.from_layout(t.layout),e=new P(n,t.repetitions),r=new H(t.experiment_name,!1,e,n,t.repetitions,t.measurement,t.task_configuration),i=new X(t.training_configuration);return r.create_code_all_experiment_automatas({seed:t.seed,introduction_texts:t.introduction_pages,post_questionnaire:t.post_questionnaire,pre_run_training_output:t.pre_run_training_output,training_configuration:i,pre_run_experiment_output:t.pre_run_experiment_output,finish_texts:t.finish_pages,measurement:t.measurement,finish_function:t.finish_function})}({experiment_name:i.experiment_name,seed:i.seed,introduction_pages:i.introduction_pages,post_questionnaire:i.post_questionnaire,pre_run_training_output:i.pre_run_training_instructions,training_configuration:i.training_configuration,pre_run_experiment_output:i.pre_run_experiment_instructions,finish_pages:i.finish_pages,layout:i.layout,repetitions:i.repetitions,task_configuration:i.task_configuration,measurement:o,finish_function:function(t){var n,e,r;document.removeEventListener("keydown",s),n=t.generate_csv_data(),e=new Blob(n,{type:"application/ssc"}),(r=window.document.createElement("a")).href=window.URL.createObjectURL(e),r.download="experimentdata.csv",document.body.appendChild(r),r.click(),document.body.removeChild(r)}}),s=function(t){var n,e,r=(e="","Alt"==(n=t).key&&n.ctrlKey?"Alt+Ctrl":"Control"==n.key&&n.altKey?"Ctrl+Alt":(e+=n.altKey?"+Alt":"",e+=n.ctrlKey?"+Control":"","Alt"==n.key?"Alt":""+n.key+e));a.input(r)};document.addEventListener("keydown",s,!1),a.set_active()}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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U0FBU3FOLEtBQUtaLFlBQVl5QyxFd0JnRmxCLElBSUpFLEVBQWdCLFNBQUNoWCxHQUNqQixJeEI5SHlCeVgsRUFDekJDLEV3QjZISUMsR3hCN0hKRCxFQUFVLEdBRUEsUUFIZUQsRXdCOEhTelgsR3hCM0g3QlosS0FDRnFZLEVBQU1HLFFBQWdCLFdBRWYsV0FBWEgsRUFBTXJZLEtBQ0ZxWSxFQUFNSSxPQUNFLFlBRWZILEdBQXFCRCxFQUFNSSxPQUFPLE9BQU8sR0FDekNILEdBQXFCRCxFQUFNRyxRQUFRLFdBQVcsR0FFaEMsT0FBWEgsRUFBTXJZLElBQW1CLE1BR3JCLEdBQUtxWSxFQUFNclksSUFBTXNZLEl3QitHcEJsQixFQUFvQjVTLE1BQU0rVCxFQUM5QixFQUdBL1AsU0FBU2tRLGlCQUFpQixVQUFXZCxHQUFlLEdBRXBEUixFQUFvQnhTLFlBRXhCLENDbERBK1QsRSIsInNvdXJjZXMiOlsid2VicGFjazovL2V4YW1wbGVfbl9vZl8xX2V4cGVyaW1lbnQvLi9ub2RlX21vZHVsZXMvc2VlZHJhbmRvbS9saWIveG9yd293LmpzIiwid2VicGFjazovL2V4YW1wbGVfbl9vZl8xX2V4cGVyaW1lbnQvLi9ub2RlX21vZHVsZXMvc2VlZHJhbmRvbS9saWIveG9yc2hpZnQ3LmpzIiwid2VicGFjazovL2V4YW1wbGVfbl9vZl8xX2V4cGVyaW1lbnQvLi9ub2RlX21vZHVsZXMvc2VlZHJhbmRvbS9saWIvYWxlYS5qcyIsIndlYnBhY2s6Ly9leGFtcGxlX25fb2ZfMV9leHBlcmltZW50Ly4vbm9kZV9tb2R1bGVzL3NlZWRyYW5kb20vbGliL3hvcjEyOC5qcyIsIndlYnBhY2s6Ly9leGFtcGxlX25fb2ZfMV9leHBlcmltZW50Ly4vbm9kZV9tb2R1bGVzL3NlZWRyYW5kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vZXhhbXBsZV9uX29mXzFfZXhwZXJpbWVudC8uL25vZGVfbW9kdWxlcy9zZWVkcmFuZG9tL2xpYi90eWNoZWkuanMiLCJ3ZWJwYWNrOi8vZXhhbXBsZV9uX29mXzFfZXhwZXJpbWVudC8uL25vZGVfbW9kdWxlcy9zZWVkcmFuZG9tL3NlZWRyYW5kb20uanMiLCJ3ZWJwYWNrOi8vZXhhbXBsZV9uX29mXzFfZXhwZXJpbWVudC8uL25vZGVfbW9kdWxlcy9zZWVkcmFuZG9tL2xpYi94b3I0MDk2LmpzIiwid2VicGFjazovL2V4YW1wbGVfbl9vZl8xX2V4cGVyaW1lbnQvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vZXhhbXBsZV9uX29mXzFfZXhwZXJpbWVudC93ZWJwYWNrL3J1bnRpbWUvYW1kIGRlZmluZSIsIndlYnBhY2s6Ly9leGFtcGxlX25fb2ZfMV9leHBlcmltZW50L3dlYnBhY2svcnVudGltZS9hbWQgb3B0aW9ucyIsIndlYnBhY2s6Ly9leGFtcGxlX25fb2ZfMV9leHBlcmltZW50L3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL2V4YW1wbGVfbl9vZl8xX2V4cGVyaW1lbnQvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL2V4YW1wbGVfbl9vZl8xX2V4cGVyaW1lbnQvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9leGFtcGxlX25fb2ZfMV9leHBlcmltZW50L3dlYnBhY2svcnVudGltZS9ub2RlIG1vZHVsZSBkZWNvcmF0b3IiLCJ3ZWJwYWNrOi8vZXhhbXBsZV9uX29mXzFfZXhwZXJpbWVudC8uL25vZGVfbW9kdWxlcy9FeHBlcmltZW50YXRpb24vc3JjL3V0aWxzL1V0aWxzLnRzIiwid2VicGFjazovL2V4YW1wbGVfbl9vZl8xX2V4cGVyaW1lbnQvLi9ub2RlX21vZHVsZXMvRXhwZXJpbWVudGF0aW9uL3NyYy9BdXRvbWF0YS9BdXRvbWF0YV9Gb3J3YXJkZXIudHMiLCJ3ZWJwYWNrOi8vZXhhbXBsZV9uX29mXzFfZXhwZXJpbWVudC8uL25vZGVfbW9kdWxlcy9FeHBlcmltZW50YXRpb24vc3JjL0F1dG9tYXRhL0F1dG9tYXRhLnRzIiwid2VicGFjazovL2V4YW1wbGVfbl9vZl8xX2V4cGVyaW1lbnQvLi9ub2RlX21vZHVsZXMvRXhwZXJpbWVudGF0aW9uL3NyYy9BdXRvbWF0YV9Gb3J3YXJkZXJzL0F1dG9tYXRhX1dpdGhfT3V0cHV0X0ZvcndhcmRlci50cyIsIndlYnBhY2s6Ly9leGFtcGxlX25fb2ZfMV9leHBlcmltZW50Ly4vbm9kZV9tb2R1bGVzL0V4cGVyaW1lbnRhdGlvbi9zcmMvQXV0b21hdGEvQXV0b21hdGFfQ29uZmlndXJhdG9yLnRzIiwid2VicGFjazovL2V4YW1wbGVfbl9vZl8xX2V4cGVyaW1lbnQvLi9ub2RlX21vZHVsZXMvRXhwZXJpbWVudGF0aW9uL3NyYy9BdXRvbWF0YS9UcmFuc2l0aW9ucy50cyIsIndlYnBhY2s6Ly9leGFtcGxlX25fb2ZfMV9leHBlcmltZW50Ly4vbm9kZV9tb2R1bGVzL0V4cGVyaW1lbnRhdGlvbi9zcmMvQXV0b21hdGFfRm9yd2FyZGVycy9RdWVzdGlvbm5haXJlX0ZvcndhcmRlci50cyIsIndlYnBhY2s6Ly9leGFtcGxlX25fb2ZfMV9leHBlcmltZW50Ly4vbm9kZV9tb2R1bGVzL0V4cGVyaW1lbnRhdGlvbi9zcmMvRXhwZXJpbWVudGF0aW9uL0V4cGVyaW1lbnRhdGlvbi50cyIsIndlYnBhY2s6Ly9leGFtcGxlX25fb2ZfMV9leHBlcmltZW50Ly4vbm9kZV9tb2R1bGVzL0V4cGVyaW1lbnRhdGlvbi9zcmMvRXhwZXJpbWVudGF0aW9uL1Rhc2sudHMiLCJ3ZWJwYWNrOi8vZXhhbXBsZV9uX29mXzFfZXhwZXJpbWVudC8uL25vZGVfbW9kdWxlcy9FeHBlcmltZW50YXRpb24vc3JjL0V4cGVyaW1lbnRhdGlvbi90cmVhdG1lbnRzL1RyZWF0bWVudHNfQ29tYmluYXRvci50cyIsIndlYnBhY2s6Ly9leGFtcGxlX25fb2ZfMV9leHBlcmltZW50Ly4vbm9kZV9tb2R1bGVzL0V4cGVyaW1lbnRhdGlvbi9zcmMvRXhwZXJpbWVudGF0aW9uL0V4cGVyaW1lbnRfRGVmaW5pdGlvbi50cyIsIndlYnBhY2s6Ly9leGFtcGxlX25fb2ZfMV9leHBlcmltZW50Ly4vbm9kZV9tb2R1bGVzL0V4cGVyaW1lbnRhdGlvbi9zcmMvQXV0b21hdGFfRm9yd2FyZGVycy9Cb29rX0ZvcndhcmRlci50cyIsIndlYnBhY2s6Ly9leGFtcGxlX25fb2ZfMV9leHBlcmltZW50Ly4vbm9kZV9tb2R1bGVzL0V4cGVyaW1lbnRhdGlvbi9zcmMvQm9va3MvU2VxdWVudGlhbF9Gb3J3YXJkZXJfRm9yd2FyZGVyLnRzIiwid2VicGFjazovL2V4YW1wbGVfbl9vZl8xX2V4cGVyaW1lbnQvLi9ub2RlX21vZHVsZXMvRXhwZXJpbWVudGF0aW9uL3NyYy9BdXRvbWF0YV9Gb3J3YXJkZXJzL0V4cGVyaW1lbnRhdGlvbl9Gb3J3YXJkZXIudHMiLCJ3ZWJwYWNrOi8vZXhhbXBsZV9uX29mXzFfZXhwZXJpbWVudC8uL25vZGVfbW9kdWxlcy9FeHBlcmltZW50YXRpb24vc3JjL0F1dG9tYXRhX0ZvcndhcmRlcnMvVHJhaW5pbmdfRXhlY3V0aW9uX0ZvcndhcmRlci50cyIsIndlYnBhY2s6Ly9leGFtcGxlX25fb2ZfMV9leHBlcmltZW50Ly4vbm9kZV9tb2R1bGVzL0V4cGVyaW1lbnRhdGlvbi9zcmMvQXV0b21hdGFfRm9yd2FyZGVycy9FeHBlcmltZW50X0ZvcndhcmRlci50cyIsIndlYnBhY2s6Ly9leGFtcGxlX25fb2ZfMV9leHBlcmltZW50Ly4vbm9kZV9tb2R1bGVzL0V4cGVyaW1lbnRhdGlvbi9zcmMvRXhwZXJpbWVudGF0aW9uL0NvZGVfRXhwZXJpbWVudF9EZWZpbml0aW9uLnRzIiwid2VicGFjazovL2V4YW1wbGVfbl9vZl8xX2V4cGVyaW1lbnQvLi9ub2RlX21vZHVsZXMvRXhwZXJpbWVudGF0aW9uL3NyYy9FeHBlcmltZW50YXRpb24vdHJlYXRtZW50cy9UcmVhdG1lbnQudHMiLCJ3ZWJwYWNrOi8vZXhhbXBsZV9uX29mXzFfZXhwZXJpbWVudC8uL25vZGVfbW9kdWxlcy9FeHBlcmltZW50YXRpb24vc3JjL3V0aWxzL2xvb3BzL2xvb3AudHMiLCJ3ZWJwYWNrOi8vZXhhbXBsZV9uX29mXzFfZXhwZXJpbWVudC8uL25vZGVfbW9kdWxlcy9FeHBlcmltZW50YXRpb24vc3JjL0V4cGVyaW1lbnRhdGlvbi90cmVhdG1lbnRzL1RyZWF0bWVudF9Db21iaW5hdGlvbi50cyIsIndlYnBhY2s6Ly9leGFtcGxlX25fb2ZfMV9leHBlcmltZW50Ly4vbm9kZV9tb2R1bGVzL0V4cGVyaW1lbnRhdGlvbi9zcmMvRXhwZXJpbWVudGF0aW9uL1RyYWluaW5nX0NvbmZpZ3VyYXRpb24udHMiLCJ3ZWJwYWNrOi8vZXhhbXBsZV9uX29mXzFfZXhwZXJpbWVudC8uL25vZGVfbW9kdWxlcy9FeHBlcmltZW50YXRpb24vc3JjL0V4cGVyaW1lbnRhdGlvbi90cmVhdG1lbnRzL0luZGVwZW5kZW50X1ZhcmlhYmxlLnRzIiwid2VicGFjazovL2V4YW1wbGVfbl9vZl8xX2V4cGVyaW1lbnQvLi9ub2RlX21vZHVsZXMvRXhwZXJpbWVudGF0aW9uL3NyYy91dGlscy9hcnJheXMvYWxsX2FycmF5X2NvbWJpbmF0aW9ucy50cyIsIndlYnBhY2s6Ly9leGFtcGxlX25fb2ZfMV9leHBlcmltZW50Ly4vbm9kZV9tb2R1bGVzL0V4cGVyaW1lbnRhdGlvbi9zcmMvRXhwZXJpbWVudGF0aW9uL3RyZWF0bWVudHMvSW5kZXBlbmRlbnRfVmFyaWFibGVzLnRzIiwid2VicGFjazovL2V4YW1wbGVfbl9vZl8xX2V4cGVyaW1lbnQvLi9ub2RlX21vZHVsZXMvRXhwZXJpbWVudGF0aW9uL3NyYy9FeHBlcmltZW50YXRpb24vQnJvd3Nlcl9PdXRwdXRfV3JpdGVyLnRzIiwid2VicGFjazovL2V4YW1wbGVfbl9vZl8xX2V4cGVyaW1lbnQvLi9zcmMvZXhwZXJpbWVudF9jb25maWd1cmF0aW9uLnRzIiwid2VicGFjazovL2V4YW1wbGVfbl9vZl8xX2V4cGVyaW1lbnQvLi9zcmMvQm9vbF9FeHByZXNzaW9uX0dlbmVyYXRvci50cyIsIndlYnBhY2s6Ly9leGFtcGxlX25fb2ZfMV9leHBlcmltZW50Ly4vbm9kZV9tb2R1bGVzL0V4cGVyaW1lbnRhdGlvbi9zcmMvRXhwZXJpbWVudGF0aW9uL2Z1bmN0aW9ucy9jcmVhdGVfY29kZV9leHBlcmltZW50X2V4ZWN1dGlvbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBBIEphdmFzY3JpcHQgaW1wbGVtZW50YWlvbiBvZiB0aGUgXCJ4b3J3b3dcIiBwcm5nIGFsZ29yaXRobSBieVxuLy8gR2VvcmdlIE1hcnNhZ2xpYS4gIFNlZSBodHRwOi8vd3d3LmpzdGF0c29mdC5vcmcvdjA4L2kxNC9wYXBlclxuXG4oZnVuY3Rpb24oZ2xvYmFsLCBtb2R1bGUsIGRlZmluZSkge1xuXG5mdW5jdGlvbiBYb3JHZW4oc2VlZCkge1xuICB2YXIgbWUgPSB0aGlzLCBzdHJzZWVkID0gJyc7XG5cbiAgLy8gU2V0IHVwIGdlbmVyYXRvciBmdW5jdGlvbi5cbiAgbWUubmV4dCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB0ID0gKG1lLnggXiAobWUueCA+Pj4gMikpO1xuICAgIG1lLnggPSBtZS55OyBtZS55ID0gbWUuejsgbWUueiA9IG1lLnc7IG1lLncgPSBtZS52O1xuICAgIHJldHVybiAobWUuZCA9IChtZS5kICsgMzYyNDM3IHwgMCkpICtcbiAgICAgICAobWUudiA9IChtZS52IF4gKG1lLnYgPDwgNCkpIF4gKHQgXiAodCA8PCAxKSkpIHwgMDtcbiAgfTtcblxuICBtZS54ID0gMDtcbiAgbWUueSA9IDA7XG4gIG1lLnogPSAwO1xuICBtZS53ID0gMDtcbiAgbWUudiA9IDA7XG5cbiAgaWYgKHNlZWQgPT09IChzZWVkIHwgMCkpIHtcbiAgICAvLyBJbnRlZ2VyIHNlZWQuXG4gICAgbWUueCA9IHNlZWQ7XG4gIH0gZWxzZSB7XG4gICAgLy8gU3RyaW5nIHNlZWQuXG4gICAgc3Ryc2VlZCArPSBzZWVkO1xuICB9XG5cbiAgLy8gTWl4IGluIHN0cmluZyBzZWVkLCB0aGVuIGRpc2NhcmQgYW4gaW5pdGlhbCBiYXRjaCBvZiA2NCB2YWx1ZXMuXG4gIGZvciAodmFyIGsgPSAwOyBrIDwgc3Ryc2VlZC5sZW5ndGggKyA2NDsgaysrKSB7XG4gICAgbWUueCBePSBzdHJzZWVkLmNoYXJDb2RlQXQoaykgfCAwO1xuICAgIGlmIChrID09IHN0cnNlZWQubGVuZ3RoKSB7XG4gICAgICBtZS5kID0gbWUueCA8PCAxMCBeIG1lLnggPj4+IDQ7XG4gICAgfVxuICAgIG1lLm5leHQoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjb3B5KGYsIHQpIHtcbiAgdC54ID0gZi54O1xuICB0LnkgPSBmLnk7XG4gIHQueiA9IGYuejtcbiAgdC53ID0gZi53O1xuICB0LnYgPSBmLnY7XG4gIHQuZCA9IGYuZDtcbiAgcmV0dXJuIHQ7XG59XG5cbmZ1bmN0aW9uIGltcGwoc2VlZCwgb3B0cykge1xuICB2YXIgeGcgPSBuZXcgWG9yR2VuKHNlZWQpLFxuICAgICAgc3RhdGUgPSBvcHRzICYmIG9wdHMuc3RhdGUsXG4gICAgICBwcm5nID0gZnVuY3Rpb24oKSB7IHJldHVybiAoeGcubmV4dCgpID4+PiAwKSAvIDB4MTAwMDAwMDAwOyB9O1xuICBwcm5nLmRvdWJsZSA9IGZ1bmN0aW9uKCkge1xuICAgIGRvIHtcbiAgICAgIHZhciB0b3AgPSB4Zy5uZXh0KCkgPj4+IDExLFxuICAgICAgICAgIGJvdCA9ICh4Zy5uZXh0KCkgPj4+IDApIC8gMHgxMDAwMDAwMDAsXG4gICAgICAgICAgcmVzdWx0ID0gKHRvcCArIGJvdCkgLyAoMSA8PCAyMSk7XG4gICAgfSB3aGlsZSAocmVzdWx0ID09PSAwKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICBwcm5nLmludDMyID0geGcubmV4dDtcbiAgcHJuZy5xdWljayA9IHBybmc7XG4gIGlmIChzdGF0ZSkge1xuICAgIGlmICh0eXBlb2Yoc3RhdGUpID09ICdvYmplY3QnKSBjb3B5KHN0YXRlLCB4Zyk7XG4gICAgcHJuZy5zdGF0ZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gY29weSh4Zywge30pOyB9XG4gIH1cbiAgcmV0dXJuIHBybmc7XG59XG5cbmlmIChtb2R1bGUgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBpbXBsO1xufSBlbHNlIGlmIChkZWZpbmUgJiYgZGVmaW5lLmFtZCkge1xuICBkZWZpbmUoZnVuY3Rpb24oKSB7IHJldHVybiBpbXBsOyB9KTtcbn0gZWxzZSB7XG4gIHRoaXMueG9yd293ID0gaW1wbDtcbn1cblxufSkoXG4gIHRoaXMsXG4gICh0eXBlb2YgbW9kdWxlKSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUsICAgIC8vIHByZXNlbnQgaW4gbm9kZS5qc1xuICAodHlwZW9mIGRlZmluZSkgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUgICAvLyBwcmVzZW50IHdpdGggYW4gQU1EIGxvYWRlclxuKTtcblxuXG4iLCIvLyBBIEphdmFzY3JpcHQgaW1wbGVtZW50YWlvbiBvZiB0aGUgXCJ4b3JzaGlmdDdcIiBhbGdvcml0aG0gYnlcbi8vIEZyYW7Dp29pcyBQYW5uZXRvbiBhbmQgUGllcnJlIEwnZWN1eWVyOlxuLy8gXCJPbiB0aGUgWG9yZ3NoaWZ0IFJhbmRvbSBOdW1iZXIgR2VuZXJhdG9yc1wiXG4vLyBodHRwOi8vc2FsdWMuZW5nci51Y29ubi5lZHUvcmVmcy9jcnlwdG8vcm5nL3Bhbm5ldG9uMDVvbnRoZXhvcnNoaWZ0LnBkZlxuXG4oZnVuY3Rpb24oZ2xvYmFsLCBtb2R1bGUsIGRlZmluZSkge1xuXG5mdW5jdGlvbiBYb3JHZW4oc2VlZCkge1xuICB2YXIgbWUgPSB0aGlzO1xuXG4gIC8vIFNldCB1cCBnZW5lcmF0b3IgZnVuY3Rpb24uXG4gIG1lLm5leHQgPSBmdW5jdGlvbigpIHtcbiAgICAvLyBVcGRhdGUgeG9yIGdlbmVyYXRvci5cbiAgICB2YXIgWCA9IG1lLngsIGkgPSBtZS5pLCB0LCB2LCB3O1xuICAgIHQgPSBYW2ldOyB0IF49ICh0ID4+PiA3KTsgdiA9IHQgXiAodCA8PCAyNCk7XG4gICAgdCA9IFhbKGkgKyAxKSAmIDddOyB2IF49IHQgXiAodCA+Pj4gMTApO1xuICAgIHQgPSBYWyhpICsgMykgJiA3XTsgdiBePSB0IF4gKHQgPj4+IDMpO1xuICAgIHQgPSBYWyhpICsgNCkgJiA3XTsgdiBePSB0IF4gKHQgPDwgNyk7XG4gICAgdCA9IFhbKGkgKyA3KSAmIDddOyB0ID0gdCBeICh0IDw8IDEzKTsgdiBePSB0IF4gKHQgPDwgOSk7XG4gICAgWFtpXSA9IHY7XG4gICAgbWUuaSA9IChpICsgMSkgJiA3O1xuICAgIHJldHVybiB2O1xuICB9O1xuXG4gIGZ1bmN0aW9uIGluaXQobWUsIHNlZWQpIHtcbiAgICB2YXIgaiwgdywgWCA9IFtdO1xuXG4gICAgaWYgKHNlZWQgPT09IChzZWVkIHwgMCkpIHtcbiAgICAgIC8vIFNlZWQgc3RhdGUgYXJyYXkgdXNpbmcgYSAzMi1iaXQgaW50ZWdlci5cbiAgICAgIHcgPSBYWzBdID0gc2VlZDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU2VlZCBzdGF0ZSB1c2luZyBhIHN0cmluZy5cbiAgICAgIHNlZWQgPSAnJyArIHNlZWQ7XG4gICAgICBmb3IgKGogPSAwOyBqIDwgc2VlZC5sZW5ndGg7ICsraikge1xuICAgICAgICBYW2ogJiA3XSA9IChYW2ogJiA3XSA8PCAxNSkgXlxuICAgICAgICAgICAgKHNlZWQuY2hhckNvZGVBdChqKSArIFhbKGogKyAxKSAmIDddIDw8IDEzKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gRW5mb3JjZSBhbiBhcnJheSBsZW5ndGggb2YgOCwgbm90IGFsbCB6ZXJvZXMuXG4gICAgd2hpbGUgKFgubGVuZ3RoIDwgOCkgWC5wdXNoKDApO1xuICAgIGZvciAoaiA9IDA7IGogPCA4ICYmIFhbal0gPT09IDA7ICsraik7XG4gICAgaWYgKGogPT0gOCkgdyA9IFhbN10gPSAtMTsgZWxzZSB3ID0gWFtqXTtcblxuICAgIG1lLnggPSBYO1xuICAgIG1lLmkgPSAwO1xuXG4gICAgLy8gRGlzY2FyZCBhbiBpbml0aWFsIDI1NiB2YWx1ZXMuXG4gICAgZm9yIChqID0gMjU2OyBqID4gMDsgLS1qKSB7XG4gICAgICBtZS5uZXh0KCk7XG4gICAgfVxuICB9XG5cbiAgaW5pdChtZSwgc2VlZCk7XG59XG5cbmZ1bmN0aW9uIGNvcHkoZiwgdCkge1xuICB0LnggPSBmLnguc2xpY2UoKTtcbiAgdC5pID0gZi5pO1xuICByZXR1cm4gdDtcbn1cblxuZnVuY3Rpb24gaW1wbChzZWVkLCBvcHRzKSB7XG4gIGlmIChzZWVkID09IG51bGwpIHNlZWQgPSArKG5ldyBEYXRlKTtcbiAgdmFyIHhnID0gbmV3IFhvckdlbihzZWVkKSxcbiAgICAgIHN0YXRlID0gb3B0cyAmJiBvcHRzLnN0YXRlLFxuICAgICAgcHJuZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gKHhnLm5leHQoKSA+Pj4gMCkgLyAweDEwMDAwMDAwMDsgfTtcbiAgcHJuZy5kb3VibGUgPSBmdW5jdGlvbigpIHtcbiAgICBkbyB7XG4gICAgICB2YXIgdG9wID0geGcubmV4dCgpID4+PiAxMSxcbiAgICAgICAgICBib3QgPSAoeGcubmV4dCgpID4+PiAwKSAvIDB4MTAwMDAwMDAwLFxuICAgICAgICAgIHJlc3VsdCA9ICh0b3AgKyBib3QpIC8gKDEgPDwgMjEpO1xuICAgIH0gd2hpbGUgKHJlc3VsdCA9PT0gMCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgcHJuZy5pbnQzMiA9IHhnLm5leHQ7XG4gIHBybmcucXVpY2sgPSBwcm5nO1xuICBpZiAoc3RhdGUpIHtcbiAgICBpZiAoc3RhdGUueCkgY29weShzdGF0ZSwgeGcpO1xuICAgIHBybmcuc3RhdGUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGNvcHkoeGcsIHt9KTsgfVxuICB9XG4gIHJldHVybiBwcm5nO1xufVxuXG5pZiAobW9kdWxlICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gaW1wbDtcbn0gZWxzZSBpZiAoZGVmaW5lICYmIGRlZmluZS5hbWQpIHtcbiAgZGVmaW5lKGZ1bmN0aW9uKCkgeyByZXR1cm4gaW1wbDsgfSk7XG59IGVsc2Uge1xuICB0aGlzLnhvcnNoaWZ0NyA9IGltcGw7XG59XG5cbn0pKFxuICB0aGlzLFxuICAodHlwZW9mIG1vZHVsZSkgPT0gJ29iamVjdCcgJiYgbW9kdWxlLCAgICAvLyBwcmVzZW50IGluIG5vZGUuanNcbiAgKHR5cGVvZiBkZWZpbmUpID09ICdmdW5jdGlvbicgJiYgZGVmaW5lICAgLy8gcHJlc2VudCB3aXRoIGFuIEFNRCBsb2FkZXJcbik7XG5cbiIsIi8vIEEgcG9ydCBvZiBhbiBhbGdvcml0aG0gYnkgSm9oYW5uZXMgQmFhZ8O4ZSA8YmFhZ29lQGJhYWdvZS5jb20+LCAyMDEwXG4vLyBodHRwOi8vYmFhZ29lLmNvbS9lbi9SYW5kb21NdXNpbmdzL2phdmFzY3JpcHQvXG4vLyBodHRwczovL2dpdGh1Yi5jb20vbnF1aW5sYW4vYmV0dGVyLXJhbmRvbS1udW1iZXJzLWZvci1qYXZhc2NyaXB0LW1pcnJvclxuLy8gT3JpZ2luYWwgd29yayBpcyB1bmRlciBNSVQgbGljZW5zZSAtXG5cbi8vIENvcHlyaWdodCAoQykgMjAxMCBieSBKb2hhbm5lcyBCYWFnw7hlIDxiYWFnb2VAYmFhZ29lLm9yZz5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuXG5cblxuKGZ1bmN0aW9uKGdsb2JhbCwgbW9kdWxlLCBkZWZpbmUpIHtcblxuZnVuY3Rpb24gQWxlYShzZWVkKSB7XG4gIHZhciBtZSA9IHRoaXMsIG1hc2ggPSBNYXNoKCk7XG5cbiAgbWUubmV4dCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB0ID0gMjA5MTYzOSAqIG1lLnMwICsgbWUuYyAqIDIuMzI4MzA2NDM2NTM4Njk2M2UtMTA7IC8vIDJeLTMyXG4gICAgbWUuczAgPSBtZS5zMTtcbiAgICBtZS5zMSA9IG1lLnMyO1xuICAgIHJldHVybiBtZS5zMiA9IHQgLSAobWUuYyA9IHQgfCAwKTtcbiAgfTtcblxuICAvLyBBcHBseSB0aGUgc2VlZGluZyBhbGdvcml0aG0gZnJvbSBCYWFnb2UuXG4gIG1lLmMgPSAxO1xuICBtZS5zMCA9IG1hc2goJyAnKTtcbiAgbWUuczEgPSBtYXNoKCcgJyk7XG4gIG1lLnMyID0gbWFzaCgnICcpO1xuICBtZS5zMCAtPSBtYXNoKHNlZWQpO1xuICBpZiAobWUuczAgPCAwKSB7IG1lLnMwICs9IDE7IH1cbiAgbWUuczEgLT0gbWFzaChzZWVkKTtcbiAgaWYgKG1lLnMxIDwgMCkgeyBtZS5zMSArPSAxOyB9XG4gIG1lLnMyIC09IG1hc2goc2VlZCk7XG4gIGlmIChtZS5zMiA8IDApIHsgbWUuczIgKz0gMTsgfVxuICBtYXNoID0gbnVsbDtcbn1cblxuZnVuY3Rpb24gY29weShmLCB0KSB7XG4gIHQuYyA9IGYuYztcbiAgdC5zMCA9IGYuczA7XG4gIHQuczEgPSBmLnMxO1xuICB0LnMyID0gZi5zMjtcbiAgcmV0dXJuIHQ7XG59XG5cbmZ1bmN0aW9uIGltcGwoc2VlZCwgb3B0cykge1xuICB2YXIgeGcgPSBuZXcgQWxlYShzZWVkKSxcbiAgICAgIHN0YXRlID0gb3B0cyAmJiBvcHRzLnN0YXRlLFxuICAgICAgcHJuZyA9IHhnLm5leHQ7XG4gIHBybmcuaW50MzIgPSBmdW5jdGlvbigpIHsgcmV0dXJuICh4Zy5uZXh0KCkgKiAweDEwMDAwMDAwMCkgfCAwOyB9XG4gIHBybmcuZG91YmxlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHBybmcoKSArIChwcm5nKCkgKiAweDIwMDAwMCB8IDApICogMS4xMTAyMjMwMjQ2MjUxNTY1ZS0xNjsgLy8gMl4tNTNcbiAgfTtcbiAgcHJuZy5xdWljayA9IHBybmc7XG4gIGlmIChzdGF0ZSkge1xuICAgIGlmICh0eXBlb2Yoc3RhdGUpID09ICdvYmplY3QnKSBjb3B5KHN0YXRlLCB4Zyk7XG4gICAgcHJuZy5zdGF0ZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gY29weSh4Zywge30pOyB9XG4gIH1cbiAgcmV0dXJuIHBybmc7XG59XG5cbmZ1bmN0aW9uIE1hc2goKSB7XG4gIHZhciBuID0gMHhlZmM4MjQ5ZDtcblxuICB2YXIgbWFzaCA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICBkYXRhID0gU3RyaW5nKGRhdGEpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgbiArPSBkYXRhLmNoYXJDb2RlQXQoaSk7XG4gICAgICB2YXIgaCA9IDAuMDI1MTk2MDMyODI0MTY5MzggKiBuO1xuICAgICAgbiA9IGggPj4+IDA7XG4gICAgICBoIC09IG47XG4gICAgICBoICo9IG47XG4gICAgICBuID0gaCA+Pj4gMDtcbiAgICAgIGggLT0gbjtcbiAgICAgIG4gKz0gaCAqIDB4MTAwMDAwMDAwOyAvLyAyXjMyXG4gICAgfVxuICAgIHJldHVybiAobiA+Pj4gMCkgKiAyLjMyODMwNjQzNjUzODY5NjNlLTEwOyAvLyAyXi0zMlxuICB9O1xuXG4gIHJldHVybiBtYXNoO1xufVxuXG5cbmlmIChtb2R1bGUgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBpbXBsO1xufSBlbHNlIGlmIChkZWZpbmUgJiYgZGVmaW5lLmFtZCkge1xuICBkZWZpbmUoZnVuY3Rpb24oKSB7IHJldHVybiBpbXBsOyB9KTtcbn0gZWxzZSB7XG4gIHRoaXMuYWxlYSA9IGltcGw7XG59XG5cbn0pKFxuICB0aGlzLFxuICAodHlwZW9mIG1vZHVsZSkgPT0gJ29iamVjdCcgJiYgbW9kdWxlLCAgICAvLyBwcmVzZW50IGluIG5vZGUuanNcbiAgKHR5cGVvZiBkZWZpbmUpID09ICdmdW5jdGlvbicgJiYgZGVmaW5lICAgLy8gcHJlc2VudCB3aXRoIGFuIEFNRCBsb2FkZXJcbik7XG5cblxuIiwiLy8gQSBKYXZhc2NyaXB0IGltcGxlbWVudGFpb24gb2YgdGhlIFwieG9yMTI4XCIgcHJuZyBhbGdvcml0aG0gYnlcbi8vIEdlb3JnZSBNYXJzYWdsaWEuICBTZWUgaHR0cDovL3d3dy5qc3RhdHNvZnQub3JnL3YwOC9pMTQvcGFwZXJcblxuKGZ1bmN0aW9uKGdsb2JhbCwgbW9kdWxlLCBkZWZpbmUpIHtcblxuZnVuY3Rpb24gWG9yR2VuKHNlZWQpIHtcbiAgdmFyIG1lID0gdGhpcywgc3Ryc2VlZCA9ICcnO1xuXG4gIG1lLnggPSAwO1xuICBtZS55ID0gMDtcbiAgbWUueiA9IDA7XG4gIG1lLncgPSAwO1xuXG4gIC8vIFNldCB1cCBnZW5lcmF0b3IgZnVuY3Rpb24uXG4gIG1lLm5leHQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdCA9IG1lLnggXiAobWUueCA8PCAxMSk7XG4gICAgbWUueCA9IG1lLnk7XG4gICAgbWUueSA9IG1lLno7XG4gICAgbWUueiA9IG1lLnc7XG4gICAgcmV0dXJuIG1lLncgXj0gKG1lLncgPj4+IDE5KSBeIHQgXiAodCA+Pj4gOCk7XG4gIH07XG5cbiAgaWYgKHNlZWQgPT09IChzZWVkIHwgMCkpIHtcbiAgICAvLyBJbnRlZ2VyIHNlZWQuXG4gICAgbWUueCA9IHNlZWQ7XG4gIH0gZWxzZSB7XG4gICAgLy8gU3RyaW5nIHNlZWQuXG4gICAgc3Ryc2VlZCArPSBzZWVkO1xuICB9XG5cbiAgLy8gTWl4IGluIHN0cmluZyBzZWVkLCB0aGVuIGRpc2NhcmQgYW4gaW5pdGlhbCBiYXRjaCBvZiA2NCB2YWx1ZXMuXG4gIGZvciAodmFyIGsgPSAwOyBrIDwgc3Ryc2VlZC5sZW5ndGggKyA2NDsgaysrKSB7XG4gICAgbWUueCBePSBzdHJzZWVkLmNoYXJDb2RlQXQoaykgfCAwO1xuICAgIG1lLm5leHQoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjb3B5KGYsIHQpIHtcbiAgdC54ID0gZi54O1xuICB0LnkgPSBmLnk7XG4gIHQueiA9IGYuejtcbiAgdC53ID0gZi53O1xuICByZXR1cm4gdDtcbn1cblxuZnVuY3Rpb24gaW1wbChzZWVkLCBvcHRzKSB7XG4gIHZhciB4ZyA9IG5ldyBYb3JHZW4oc2VlZCksXG4gICAgICBzdGF0ZSA9IG9wdHMgJiYgb3B0cy5zdGF0ZSxcbiAgICAgIHBybmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuICh4Zy5uZXh0KCkgPj4+IDApIC8gMHgxMDAwMDAwMDA7IH07XG4gIHBybmcuZG91YmxlID0gZnVuY3Rpb24oKSB7XG4gICAgZG8ge1xuICAgICAgdmFyIHRvcCA9IHhnLm5leHQoKSA+Pj4gMTEsXG4gICAgICAgICAgYm90ID0gKHhnLm5leHQoKSA+Pj4gMCkgLyAweDEwMDAwMDAwMCxcbiAgICAgICAgICByZXN1bHQgPSAodG9wICsgYm90KSAvICgxIDw8IDIxKTtcbiAgICB9IHdoaWxlIChyZXN1bHQgPT09IDApO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIHBybmcuaW50MzIgPSB4Zy5uZXh0O1xuICBwcm5nLnF1aWNrID0gcHJuZztcbiAgaWYgKHN0YXRlKSB7XG4gICAgaWYgKHR5cGVvZihzdGF0ZSkgPT0gJ29iamVjdCcpIGNvcHkoc3RhdGUsIHhnKTtcbiAgICBwcm5nLnN0YXRlID0gZnVuY3Rpb24oKSB7IHJldHVybiBjb3B5KHhnLCB7fSk7IH1cbiAgfVxuICByZXR1cm4gcHJuZztcbn1cblxuaWYgKG1vZHVsZSAmJiBtb2R1bGUuZXhwb3J0cykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGltcGw7XG59IGVsc2UgaWYgKGRlZmluZSAmJiBkZWZpbmUuYW1kKSB7XG4gIGRlZmluZShmdW5jdGlvbigpIHsgcmV0dXJuIGltcGw7IH0pO1xufSBlbHNlIHtcbiAgdGhpcy54b3IxMjggPSBpbXBsO1xufVxuXG59KShcbiAgdGhpcyxcbiAgKHR5cGVvZiBtb2R1bGUpID09ICdvYmplY3QnICYmIG1vZHVsZSwgICAgLy8gcHJlc2VudCBpbiBub2RlLmpzXG4gICh0eXBlb2YgZGVmaW5lKSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZSAgIC8vIHByZXNlbnQgd2l0aCBhbiBBTUQgbG9hZGVyXG4pO1xuXG5cbiIsIi8vIEEgbGlicmFyeSBvZiBzZWVkYWJsZSBSTkdzIGltcGxlbWVudGVkIGluIEphdmFzY3JpcHQuXG4vL1xuLy8gVXNhZ2U6XG4vL1xuLy8gdmFyIHNlZWRyYW5kb20gPSByZXF1aXJlKCdzZWVkcmFuZG9tJyk7XG4vLyB2YXIgcmFuZG9tID0gc2VlZHJhbmRvbSgxKTsgLy8gb3IgYW55IHNlZWQuXG4vLyB2YXIgeCA9IHJhbmRvbSgpOyAgICAgICAvLyAwIDw9IHggPCAxLiAgRXZlcnkgYml0IGlzIHJhbmRvbS5cbi8vIHZhciB4ID0gcmFuZG9tLnF1aWNrKCk7IC8vIDAgPD0geCA8IDEuICAzMiBiaXRzIG9mIHJhbmRvbW5lc3MuXG5cbi8vIGFsZWEsIGEgNTMtYml0IG11bHRpcGx5LXdpdGgtY2FycnkgZ2VuZXJhdG9yIGJ5IEpvaGFubmVzIEJhYWfDuGUuXG4vLyBQZXJpb2Q6IH4yXjExNlxuLy8gUmVwb3J0ZWQgdG8gcGFzcyBhbGwgQmlnQ3J1c2ggdGVzdHMuXG52YXIgYWxlYSA9IHJlcXVpcmUoJy4vbGliL2FsZWEnKTtcblxuLy8geG9yMTI4LCBhIHB1cmUgeG9yLXNoaWZ0IGdlbmVyYXRvciBieSBHZW9yZ2UgTWFyc2FnbGlhLlxuLy8gUGVyaW9kOiAyXjEyOC0xLlxuLy8gUmVwb3J0ZWQgdG8gZmFpbDogTWF0cml4UmFuayBhbmQgTGluZWFyQ29tcC5cbnZhciB4b3IxMjggPSByZXF1aXJlKCcuL2xpYi94b3IxMjgnKTtcblxuLy8geG9yd293LCBHZW9yZ2UgTWFyc2FnbGlhJ3MgMTYwLWJpdCB4b3Itc2hpZnQgY29tYmluZWQgcGx1cyB3ZXlsLlxuLy8gUGVyaW9kOiAyXjE5Mi0yXjMyXG4vLyBSZXBvcnRlZCB0byBmYWlsOiBDb2xsaXNpb25PdmVyLCBTaW1wUG9rZXIsIGFuZCBMaW5lYXJDb21wLlxudmFyIHhvcndvdyA9IHJlcXVpcmUoJy4vbGliL3hvcndvdycpO1xuXG4vLyB4b3JzaGlmdDcsIGJ5IEZyYW7Dp29pcyBQYW5uZXRvbiBhbmQgUGllcnJlIEwnZWN1eWVyLCB0YWtlc1xuLy8gYSBkaWZmZXJlbnQgYXBwcm9hY2g6IGl0IGFkZHMgcm9idXN0bmVzcyBieSBhbGxvd2luZyBtb3JlIHNoaWZ0c1xuLy8gdGhhbiBNYXJzYWdsaWEncyBvcmlnaW5hbCB0aHJlZS4gIEl0IGlzIGEgNy1zaGlmdCBnZW5lcmF0b3Jcbi8vIHdpdGggMjU2IGJpdHMsIHRoYXQgcGFzc2VzIEJpZ0NydXNoIHdpdGggbm8gc3lzdG1hdGljIGZhaWx1cmVzLlxuLy8gUGVyaW9kIDJeMjU2LTEuXG4vLyBObyBzeXN0ZW1hdGljIEJpZ0NydXNoIGZhaWx1cmVzIHJlcG9ydGVkLlxudmFyIHhvcnNoaWZ0NyA9IHJlcXVpcmUoJy4vbGliL3hvcnNoaWZ0NycpO1xuXG4vLyB4b3I0MDk2LCBieSBSaWNoYXJkIEJyZW50LCBpcyBhIDQwOTYtYml0IHhvci1zaGlmdCB3aXRoIGFcbi8vIHZlcnkgbG9uZyBwZXJpb2QgdGhhdCBhbHNvIGFkZHMgYSBXZXlsIGdlbmVyYXRvci4gSXQgYWxzbyBwYXNzZXNcbi8vIEJpZ0NydXNoIHdpdGggbm8gc3lzdGVtYXRpYyBmYWlsdXJlcy4gIEl0cyBsb25nIHBlcmlvZCBtYXlcbi8vIGJlIHVzZWZ1bCBpZiB5b3UgaGF2ZSBtYW55IGdlbmVyYXRvcnMgYW5kIG5lZWQgdG8gYXZvaWRcbi8vIGNvbGxpc2lvbnMuXG4vLyBQZXJpb2Q6IDJeNDEyOC0yXjMyLlxuLy8gTm8gc3lzdGVtYXRpYyBCaWdDcnVzaCBmYWlsdXJlcyByZXBvcnRlZC5cbnZhciB4b3I0MDk2ID0gcmVxdWlyZSgnLi9saWIveG9yNDA5NicpO1xuXG4vLyBUeWNoZS1pLCBieSBTYW11ZWwgTmV2ZXMgYW5kIEZpbGlwZSBBcmF1am8sIGlzIGEgYml0LXNoaWZ0aW5nIHJhbmRvbVxuLy8gbnVtYmVyIGdlbmVyYXRvciBkZXJpdmVkIGZyb20gQ2hhQ2hhLCBhIG1vZGVybiBzdHJlYW0gY2lwaGVyLlxuLy8gaHR0cHM6Ly9lZGVuLmRlaS51Yy5wdC9+c25ldmVzL3B1YnMvMjAxMS1zbmZhMi5wZGZcbi8vIFBlcmlvZDogfjJeMTI3XG4vLyBObyBzeXN0ZW1hdGljIEJpZ0NydXNoIGZhaWx1cmVzIHJlcG9ydGVkLlxudmFyIHR5Y2hlaSA9IHJlcXVpcmUoJy4vbGliL3R5Y2hlaScpO1xuXG4vLyBUaGUgb3JpZ2luYWwgQVJDNC1iYXNlZCBwcm5nIGluY2x1ZGVkIGluIHRoaXMgbGlicmFyeS5cbi8vIFBlcmlvZDogfjJeMTYwMFxudmFyIHNyID0gcmVxdWlyZSgnLi9zZWVkcmFuZG9tJyk7XG5cbnNyLmFsZWEgPSBhbGVhO1xuc3IueG9yMTI4ID0geG9yMTI4O1xuc3IueG9yd293ID0geG9yd293O1xuc3IueG9yc2hpZnQ3ID0geG9yc2hpZnQ3O1xuc3IueG9yNDA5NiA9IHhvcjQwOTY7XG5zci50eWNoZWkgPSB0eWNoZWk7XG5cbm1vZHVsZS5leHBvcnRzID0gc3I7XG4iLCIvLyBBIEphdmFzY3JpcHQgaW1wbGVtZW50YWlvbiBvZiB0aGUgXCJUeWNoZS1pXCIgcHJuZyBhbGdvcml0aG0gYnlcbi8vIFNhbXVlbCBOZXZlcyBhbmQgRmlsaXBlIEFyYXVqby5cbi8vIFNlZSBodHRwczovL2VkZW4uZGVpLnVjLnB0L35zbmV2ZXMvcHVicy8yMDExLXNuZmEyLnBkZlxuXG4oZnVuY3Rpb24oZ2xvYmFsLCBtb2R1bGUsIGRlZmluZSkge1xuXG5mdW5jdGlvbiBYb3JHZW4oc2VlZCkge1xuICB2YXIgbWUgPSB0aGlzLCBzdHJzZWVkID0gJyc7XG5cbiAgLy8gU2V0IHVwIGdlbmVyYXRvciBmdW5jdGlvbi5cbiAgbWUubmV4dCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBiID0gbWUuYiwgYyA9IG1lLmMsIGQgPSBtZS5kLCBhID0gbWUuYTtcbiAgICBiID0gKGIgPDwgMjUpIF4gKGIgPj4+IDcpIF4gYztcbiAgICBjID0gKGMgLSBkKSB8IDA7XG4gICAgZCA9IChkIDw8IDI0KSBeIChkID4+PiA4KSBeIGE7XG4gICAgYSA9IChhIC0gYikgfCAwO1xuICAgIG1lLmIgPSBiID0gKGIgPDwgMjApIF4gKGIgPj4+IDEyKSBeIGM7XG4gICAgbWUuYyA9IGMgPSAoYyAtIGQpIHwgMDtcbiAgICBtZS5kID0gKGQgPDwgMTYpIF4gKGMgPj4+IDE2KSBeIGE7XG4gICAgcmV0dXJuIG1lLmEgPSAoYSAtIGIpIHwgMDtcbiAgfTtcblxuICAvKiBUaGUgZm9sbG93aW5nIGlzIG5vbi1pbnZlcnRlZCB0eWNoZSwgd2hpY2ggaGFzIGJldHRlciBpbnRlcm5hbFxuICAgKiBiaXQgZGlmZnVzaW9uLCBidXQgd2hpY2ggaXMgYWJvdXQgMjUlIHNsb3dlciB0aGFuIHR5Y2hlLWkgaW4gSlMuXG4gIG1lLm5leHQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYSA9IG1lLmEsIGIgPSBtZS5iLCBjID0gbWUuYywgZCA9IG1lLmQ7XG4gICAgYSA9IChtZS5hICsgbWUuYiB8IDApID4+PiAwO1xuICAgIGQgPSBtZS5kIF4gYTsgZCA9IGQgPDwgMTYgXiBkID4+PiAxNjtcbiAgICBjID0gbWUuYyArIGQgfCAwO1xuICAgIGIgPSBtZS5iIF4gYzsgYiA9IGIgPDwgMTIgXiBkID4+PiAyMDtcbiAgICBtZS5hID0gYSA9IGEgKyBiIHwgMDtcbiAgICBkID0gZCBeIGE7IG1lLmQgPSBkID0gZCA8PCA4IF4gZCA+Pj4gMjQ7XG4gICAgbWUuYyA9IGMgPSBjICsgZCB8IDA7XG4gICAgYiA9IGIgXiBjO1xuICAgIHJldHVybiBtZS5iID0gKGIgPDwgNyBeIGIgPj4+IDI1KTtcbiAgfVxuICAqL1xuXG4gIG1lLmEgPSAwO1xuICBtZS5iID0gMDtcbiAgbWUuYyA9IDI2NTQ0MzU3NjkgfCAwO1xuICBtZS5kID0gMTM2NzEzMDU1MTtcblxuICBpZiAoc2VlZCA9PT0gTWF0aC5mbG9vcihzZWVkKSkge1xuICAgIC8vIEludGVnZXIgc2VlZC5cbiAgICBtZS5hID0gKHNlZWQgLyAweDEwMDAwMDAwMCkgfCAwO1xuICAgIG1lLmIgPSBzZWVkIHwgMDtcbiAgfSBlbHNlIHtcbiAgICAvLyBTdHJpbmcgc2VlZC5cbiAgICBzdHJzZWVkICs9IHNlZWQ7XG4gIH1cblxuICAvLyBNaXggaW4gc3RyaW5nIHNlZWQsIHRoZW4gZGlzY2FyZCBhbiBpbml0aWFsIGJhdGNoIG9mIDY0IHZhbHVlcy5cbiAgZm9yICh2YXIgayA9IDA7IGsgPCBzdHJzZWVkLmxlbmd0aCArIDIwOyBrKyspIHtcbiAgICBtZS5iIF49IHN0cnNlZWQuY2hhckNvZGVBdChrKSB8IDA7XG4gICAgbWUubmV4dCgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvcHkoZiwgdCkge1xuICB0LmEgPSBmLmE7XG4gIHQuYiA9IGYuYjtcbiAgdC5jID0gZi5jO1xuICB0LmQgPSBmLmQ7XG4gIHJldHVybiB0O1xufTtcblxuZnVuY3Rpb24gaW1wbChzZWVkLCBvcHRzKSB7XG4gIHZhciB4ZyA9IG5ldyBYb3JHZW4oc2VlZCksXG4gICAgICBzdGF0ZSA9IG9wdHMgJiYgb3B0cy5zdGF0ZSxcbiAgICAgIHBybmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuICh4Zy5uZXh0KCkgPj4+IDApIC8gMHgxMDAwMDAwMDA7IH07XG4gIHBybmcuZG91YmxlID0gZnVuY3Rpb24oKSB7XG4gICAgZG8ge1xuICAgICAgdmFyIHRvcCA9IHhnLm5leHQoKSA+Pj4gMTEsXG4gICAgICAgICAgYm90ID0gKHhnLm5leHQoKSA+Pj4gMCkgLyAweDEwMDAwMDAwMCxcbiAgICAgICAgICByZXN1bHQgPSAodG9wICsgYm90KSAvICgxIDw8IDIxKTtcbiAgICB9IHdoaWxlIChyZXN1bHQgPT09IDApO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIHBybmcuaW50MzIgPSB4Zy5uZXh0O1xuICBwcm5nLnF1aWNrID0gcHJuZztcbiAgaWYgKHN0YXRlKSB7XG4gICAgaWYgKHR5cGVvZihzdGF0ZSkgPT0gJ29iamVjdCcpIGNvcHkoc3RhdGUsIHhnKTtcbiAgICBwcm5nLnN0YXRlID0gZnVuY3Rpb24oKSB7IHJldHVybiBjb3B5KHhnLCB7fSk7IH1cbiAgfVxuICByZXR1cm4gcHJuZztcbn1cblxuaWYgKG1vZHVsZSAmJiBtb2R1bGUuZXhwb3J0cykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGltcGw7XG59IGVsc2UgaWYgKGRlZmluZSAmJiBkZWZpbmUuYW1kKSB7XG4gIGRlZmluZShmdW5jdGlvbigpIHsgcmV0dXJuIGltcGw7IH0pO1xufSBlbHNlIHtcbiAgdGhpcy50eWNoZWkgPSBpbXBsO1xufVxuXG59KShcbiAgdGhpcyxcbiAgKHR5cGVvZiBtb2R1bGUpID09ICdvYmplY3QnICYmIG1vZHVsZSwgICAgLy8gcHJlc2VudCBpbiBub2RlLmpzXG4gICh0eXBlb2YgZGVmaW5lKSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZSAgIC8vIHByZXNlbnQgd2l0aCBhbiBBTUQgbG9hZGVyXG4pO1xuXG5cbiIsIi8qXG5Db3B5cmlnaHQgMjAxOSBEYXZpZCBCYXUuXG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZ1xuYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG5cIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbndpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbmRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0b1xucGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvXG50aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlXG5pbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCxcbkVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULlxuSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTllcbkNMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsXG5UT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRVxuU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbiovXG5cbihmdW5jdGlvbiAoZ2xvYmFsLCBwb29sLCBtYXRoKSB7XG4vL1xuLy8gVGhlIGZvbGxvd2luZyBjb25zdGFudHMgYXJlIHJlbGF0ZWQgdG8gSUVFRSA3NTQgbGltaXRzLlxuLy9cblxudmFyIHdpZHRoID0gMjU2LCAgICAgICAgLy8gZWFjaCBSQzQgb3V0cHV0IGlzIDAgPD0geCA8IDI1NlxuICAgIGNodW5rcyA9IDYsICAgICAgICAgLy8gYXQgbGVhc3Qgc2l4IFJDNCBvdXRwdXRzIGZvciBlYWNoIGRvdWJsZVxuICAgIGRpZ2l0cyA9IDUyLCAgICAgICAgLy8gdGhlcmUgYXJlIDUyIHNpZ25pZmljYW50IGRpZ2l0cyBpbiBhIGRvdWJsZVxuICAgIHJuZ25hbWUgPSAncmFuZG9tJywgLy8gcm5nbmFtZTogbmFtZSBmb3IgTWF0aC5yYW5kb20gYW5kIE1hdGguc2VlZHJhbmRvbVxuICAgIHN0YXJ0ZGVub20gPSBtYXRoLnBvdyh3aWR0aCwgY2h1bmtzKSxcbiAgICBzaWduaWZpY2FuY2UgPSBtYXRoLnBvdygyLCBkaWdpdHMpLFxuICAgIG92ZXJmbG93ID0gc2lnbmlmaWNhbmNlICogMixcbiAgICBtYXNrID0gd2lkdGggLSAxLFxuICAgIG5vZGVjcnlwdG87ICAgICAgICAgLy8gbm9kZS5qcyBjcnlwdG8gbW9kdWxlLCBpbml0aWFsaXplZCBhdCB0aGUgYm90dG9tLlxuXG4vL1xuLy8gc2VlZHJhbmRvbSgpXG4vLyBUaGlzIGlzIHRoZSBzZWVkcmFuZG9tIGZ1bmN0aW9uIGRlc2NyaWJlZCBhYm92ZS5cbi8vXG5mdW5jdGlvbiBzZWVkcmFuZG9tKHNlZWQsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIHZhciBrZXkgPSBbXTtcbiAgb3B0aW9ucyA9IChvcHRpb25zID09IHRydWUpID8geyBlbnRyb3B5OiB0cnVlIH0gOiAob3B0aW9ucyB8fCB7fSk7XG5cbiAgLy8gRmxhdHRlbiB0aGUgc2VlZCBzdHJpbmcgb3IgYnVpbGQgb25lIGZyb20gbG9jYWwgZW50cm9weSBpZiBuZWVkZWQuXG4gIHZhciBzaG9ydHNlZWQgPSBtaXhrZXkoZmxhdHRlbihcbiAgICBvcHRpb25zLmVudHJvcHkgPyBbc2VlZCwgdG9zdHJpbmcocG9vbCldIDpcbiAgICAoc2VlZCA9PSBudWxsKSA/IGF1dG9zZWVkKCkgOiBzZWVkLCAzKSwga2V5KTtcblxuICAvLyBVc2UgdGhlIHNlZWQgdG8gaW5pdGlhbGl6ZSBhbiBBUkM0IGdlbmVyYXRvci5cbiAgdmFyIGFyYzQgPSBuZXcgQVJDNChrZXkpO1xuXG4gIC8vIFRoaXMgZnVuY3Rpb24gcmV0dXJucyBhIHJhbmRvbSBkb3VibGUgaW4gWzAsIDEpIHRoYXQgY29udGFpbnNcbiAgLy8gcmFuZG9tbmVzcyBpbiBldmVyeSBiaXQgb2YgdGhlIG1hbnRpc3NhIG9mIHRoZSBJRUVFIDc1NCB2YWx1ZS5cbiAgdmFyIHBybmcgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbiA9IGFyYzQuZyhjaHVua3MpLCAgICAgICAgICAgICAvLyBTdGFydCB3aXRoIGEgbnVtZXJhdG9yIG4gPCAyIF4gNDhcbiAgICAgICAgZCA9IHN0YXJ0ZGVub20sICAgICAgICAgICAgICAgICAvLyAgIGFuZCBkZW5vbWluYXRvciBkID0gMiBeIDQ4LlxuICAgICAgICB4ID0gMDsgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgYW5kIG5vICdleHRyYSBsYXN0IGJ5dGUnLlxuICAgIHdoaWxlIChuIDwgc2lnbmlmaWNhbmNlKSB7ICAgICAgICAgIC8vIEZpbGwgdXAgYWxsIHNpZ25pZmljYW50IGRpZ2l0cyBieVxuICAgICAgbiA9IChuICsgeCkgKiB3aWR0aDsgICAgICAgICAgICAgIC8vICAgc2hpZnRpbmcgbnVtZXJhdG9yIGFuZFxuICAgICAgZCAqPSB3aWR0aDsgICAgICAgICAgICAgICAgICAgICAgIC8vICAgZGVub21pbmF0b3IgYW5kIGdlbmVyYXRpbmcgYVxuICAgICAgeCA9IGFyYzQuZygxKTsgICAgICAgICAgICAgICAgICAgIC8vICAgbmV3IGxlYXN0LXNpZ25pZmljYW50LWJ5dGUuXG4gICAgfVxuICAgIHdoaWxlIChuID49IG92ZXJmbG93KSB7ICAgICAgICAgICAgIC8vIFRvIGF2b2lkIHJvdW5kaW5nIHVwLCBiZWZvcmUgYWRkaW5nXG4gICAgICBuIC89IDI7ICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICBsYXN0IGJ5dGUsIHNoaWZ0IGV2ZXJ5dGhpbmdcbiAgICAgIGQgLz0gMjsgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgIHJpZ2h0IHVzaW5nIGludGVnZXIgbWF0aCB1bnRpbFxuICAgICAgeCA+Pj49IDE7ICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgd2UgaGF2ZSBleGFjdGx5IHRoZSBkZXNpcmVkIGJpdHMuXG4gICAgfVxuICAgIHJldHVybiAobiArIHgpIC8gZDsgICAgICAgICAgICAgICAgIC8vIEZvcm0gdGhlIG51bWJlciB3aXRoaW4gWzAsIDEpLlxuICB9O1xuXG4gIHBybmcuaW50MzIgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGFyYzQuZyg0KSB8IDA7IH1cbiAgcHJuZy5xdWljayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJjNC5nKDQpIC8gMHgxMDAwMDAwMDA7IH1cbiAgcHJuZy5kb3VibGUgPSBwcm5nO1xuXG4gIC8vIE1peCB0aGUgcmFuZG9tbmVzcyBpbnRvIGFjY3VtdWxhdGVkIGVudHJvcHkuXG4gIG1peGtleSh0b3N0cmluZyhhcmM0LlMpLCBwb29sKTtcblxuICAvLyBDYWxsaW5nIGNvbnZlbnRpb246IHdoYXQgdG8gcmV0dXJuIGFzIGEgZnVuY3Rpb24gb2YgcHJuZywgc2VlZCwgaXNfbWF0aC5cbiAgcmV0dXJuIChvcHRpb25zLnBhc3MgfHwgY2FsbGJhY2sgfHxcbiAgICAgIGZ1bmN0aW9uKHBybmcsIHNlZWQsIGlzX21hdGhfY2FsbCwgc3RhdGUpIHtcbiAgICAgICAgaWYgKHN0YXRlKSB7XG4gICAgICAgICAgLy8gTG9hZCB0aGUgYXJjNCBzdGF0ZSBmcm9tIHRoZSBnaXZlbiBzdGF0ZSBpZiBpdCBoYXMgYW4gUyBhcnJheS5cbiAgICAgICAgICBpZiAoc3RhdGUuUykgeyBjb3B5KHN0YXRlLCBhcmM0KTsgfVxuICAgICAgICAgIC8vIE9ubHkgcHJvdmlkZSB0aGUgLnN0YXRlIG1ldGhvZCBpZiByZXF1ZXN0ZWQgdmlhIG9wdGlvbnMuc3RhdGUuXG4gICAgICAgICAgcHJuZy5zdGF0ZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gY29weShhcmM0LCB7fSk7IH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIGNhbGxlZCBhcyBhIG1ldGhvZCBvZiBNYXRoIChNYXRoLnNlZWRyYW5kb20oKSksIG11dGF0ZVxuICAgICAgICAvLyBNYXRoLnJhbmRvbSBiZWNhdXNlIHRoYXQgaXMgaG93IHNlZWRyYW5kb20uanMgaGFzIHdvcmtlZCBzaW5jZSB2MS4wLlxuICAgICAgICBpZiAoaXNfbWF0aF9jYWxsKSB7IG1hdGhbcm5nbmFtZV0gPSBwcm5nOyByZXR1cm4gc2VlZDsgfVxuXG4gICAgICAgIC8vIE90aGVyd2lzZSwgaXQgaXMgYSBuZXdlciBjYWxsaW5nIGNvbnZlbnRpb24sIHNvIHJldHVybiB0aGVcbiAgICAgICAgLy8gcHJuZyBkaXJlY3RseS5cbiAgICAgICAgZWxzZSByZXR1cm4gcHJuZztcbiAgICAgIH0pKFxuICBwcm5nLFxuICBzaG9ydHNlZWQsXG4gICdnbG9iYWwnIGluIG9wdGlvbnMgPyBvcHRpb25zLmdsb2JhbCA6ICh0aGlzID09IG1hdGgpLFxuICBvcHRpb25zLnN0YXRlKTtcbn1cblxuLy9cbi8vIEFSQzRcbi8vXG4vLyBBbiBBUkM0IGltcGxlbWVudGF0aW9uLiAgVGhlIGNvbnN0cnVjdG9yIHRha2VzIGEga2V5IGluIHRoZSBmb3JtIG9mXG4vLyBhbiBhcnJheSBvZiBhdCBtb3N0ICh3aWR0aCkgaW50ZWdlcnMgdGhhdCBzaG91bGQgYmUgMCA8PSB4IDwgKHdpZHRoKS5cbi8vXG4vLyBUaGUgZyhjb3VudCkgbWV0aG9kIHJldHVybnMgYSBwc2V1ZG9yYW5kb20gaW50ZWdlciB0aGF0IGNvbmNhdGVuYXRlc1xuLy8gdGhlIG5leHQgKGNvdW50KSBvdXRwdXRzIGZyb20gQVJDNC4gIEl0cyByZXR1cm4gdmFsdWUgaXMgYSBudW1iZXIgeFxuLy8gdGhhdCBpcyBpbiB0aGUgcmFuZ2UgMCA8PSB4IDwgKHdpZHRoIF4gY291bnQpLlxuLy9cbmZ1bmN0aW9uIEFSQzQoa2V5KSB7XG4gIHZhciB0LCBrZXlsZW4gPSBrZXkubGVuZ3RoLFxuICAgICAgbWUgPSB0aGlzLCBpID0gMCwgaiA9IG1lLmkgPSBtZS5qID0gMCwgcyA9IG1lLlMgPSBbXTtcblxuICAvLyBUaGUgZW1wdHkga2V5IFtdIGlzIHRyZWF0ZWQgYXMgWzBdLlxuICBpZiAoIWtleWxlbikgeyBrZXkgPSBba2V5bGVuKytdOyB9XG5cbiAgLy8gU2V0IHVwIFMgdXNpbmcgdGhlIHN0YW5kYXJkIGtleSBzY2hlZHVsaW5nIGFsZ29yaXRobS5cbiAgd2hpbGUgKGkgPCB3aWR0aCkge1xuICAgIHNbaV0gPSBpKys7XG4gIH1cbiAgZm9yIChpID0gMDsgaSA8IHdpZHRoOyBpKyspIHtcbiAgICBzW2ldID0gc1tqID0gbWFzayAmIChqICsga2V5W2kgJSBrZXlsZW5dICsgKHQgPSBzW2ldKSldO1xuICAgIHNbal0gPSB0O1xuICB9XG5cbiAgLy8gVGhlIFwiZ1wiIG1ldGhvZCByZXR1cm5zIHRoZSBuZXh0IChjb3VudCkgb3V0cHV0cyBhcyBvbmUgbnVtYmVyLlxuICAobWUuZyA9IGZ1bmN0aW9uKGNvdW50KSB7XG4gICAgLy8gVXNpbmcgaW5zdGFuY2UgbWVtYmVycyBpbnN0ZWFkIG9mIGNsb3N1cmUgc3RhdGUgbmVhcmx5IGRvdWJsZXMgc3BlZWQuXG4gICAgdmFyIHQsIHIgPSAwLFxuICAgICAgICBpID0gbWUuaSwgaiA9IG1lLmosIHMgPSBtZS5TO1xuICAgIHdoaWxlIChjb3VudC0tKSB7XG4gICAgICB0ID0gc1tpID0gbWFzayAmIChpICsgMSldO1xuICAgICAgciA9IHIgKiB3aWR0aCArIHNbbWFzayAmICgoc1tpXSA9IHNbaiA9IG1hc2sgJiAoaiArIHQpXSkgKyAoc1tqXSA9IHQpKV07XG4gICAgfVxuICAgIG1lLmkgPSBpOyBtZS5qID0gajtcbiAgICByZXR1cm4gcjtcbiAgICAvLyBGb3Igcm9idXN0IHVucHJlZGljdGFiaWxpdHksIHRoZSBmdW5jdGlvbiBjYWxsIGJlbG93IGF1dG9tYXRpY2FsbHlcbiAgICAvLyBkaXNjYXJkcyBhbiBpbml0aWFsIGJhdGNoIG9mIHZhbHVlcy4gIFRoaXMgaXMgY2FsbGVkIFJDNC1kcm9wWzI1Nl0uXG4gICAgLy8gU2VlIGh0dHA6Ly9nb29nbGUuY29tL3NlYXJjaD9xPXJzYStmbHVocmVyK3Jlc3BvbnNlJmJ0bklcbiAgfSkod2lkdGgpO1xufVxuXG4vL1xuLy8gY29weSgpXG4vLyBDb3BpZXMgaW50ZXJuYWwgc3RhdGUgb2YgQVJDNCB0byBvciBmcm9tIGEgcGxhaW4gb2JqZWN0LlxuLy9cbmZ1bmN0aW9uIGNvcHkoZiwgdCkge1xuICB0LmkgPSBmLmk7XG4gIHQuaiA9IGYuajtcbiAgdC5TID0gZi5TLnNsaWNlKCk7XG4gIHJldHVybiB0O1xufTtcblxuLy9cbi8vIGZsYXR0ZW4oKVxuLy8gQ29udmVydHMgYW4gb2JqZWN0IHRyZWUgdG8gbmVzdGVkIGFycmF5cyBvZiBzdHJpbmdzLlxuLy9cbmZ1bmN0aW9uIGZsYXR0ZW4ob2JqLCBkZXB0aCkge1xuICB2YXIgcmVzdWx0ID0gW10sIHR5cCA9ICh0eXBlb2Ygb2JqKSwgcHJvcDtcbiAgaWYgKGRlcHRoICYmIHR5cCA9PSAnb2JqZWN0Jykge1xuICAgIGZvciAocHJvcCBpbiBvYmopIHtcbiAgICAgIHRyeSB7IHJlc3VsdC5wdXNoKGZsYXR0ZW4ob2JqW3Byb3BdLCBkZXB0aCAtIDEpKTsgfSBjYXRjaCAoZSkge31cbiAgICB9XG4gIH1cbiAgcmV0dXJuIChyZXN1bHQubGVuZ3RoID8gcmVzdWx0IDogdHlwID09ICdzdHJpbmcnID8gb2JqIDogb2JqICsgJ1xcMCcpO1xufVxuXG4vL1xuLy8gbWl4a2V5KClcbi8vIE1peGVzIGEgc3RyaW5nIHNlZWQgaW50byBhIGtleSB0aGF0IGlzIGFuIGFycmF5IG9mIGludGVnZXJzLCBhbmRcbi8vIHJldHVybnMgYSBzaG9ydGVuZWQgc3RyaW5nIHNlZWQgdGhhdCBpcyBlcXVpdmFsZW50IHRvIHRoZSByZXN1bHQga2V5LlxuLy9cbmZ1bmN0aW9uIG1peGtleShzZWVkLCBrZXkpIHtcbiAgdmFyIHN0cmluZ3NlZWQgPSBzZWVkICsgJycsIHNtZWFyLCBqID0gMDtcbiAgd2hpbGUgKGogPCBzdHJpbmdzZWVkLmxlbmd0aCkge1xuICAgIGtleVttYXNrICYgal0gPVxuICAgICAgbWFzayAmICgoc21lYXIgXj0ga2V5W21hc2sgJiBqXSAqIDE5KSArIHN0cmluZ3NlZWQuY2hhckNvZGVBdChqKyspKTtcbiAgfVxuICByZXR1cm4gdG9zdHJpbmcoa2V5KTtcbn1cblxuLy9cbi8vIGF1dG9zZWVkKClcbi8vIFJldHVybnMgYW4gb2JqZWN0IGZvciBhdXRvc2VlZGluZywgdXNpbmcgd2luZG93LmNyeXB0byBhbmQgTm9kZSBjcnlwdG9cbi8vIG1vZHVsZSBpZiBhdmFpbGFibGUuXG4vL1xuZnVuY3Rpb24gYXV0b3NlZWQoKSB7XG4gIHRyeSB7XG4gICAgdmFyIG91dDtcbiAgICBpZiAobm9kZWNyeXB0byAmJiAob3V0ID0gbm9kZWNyeXB0by5yYW5kb21CeXRlcykpIHtcbiAgICAgIC8vIFRoZSB1c2Ugb2YgJ291dCcgdG8gcmVtZW1iZXIgcmFuZG9tQnl0ZXMgbWFrZXMgdGlnaHQgbWluaWZpZWQgY29kZS5cbiAgICAgIG91dCA9IG91dCh3aWR0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dCA9IG5ldyBVaW50OEFycmF5KHdpZHRoKTtcbiAgICAgIChnbG9iYWwuY3J5cHRvIHx8IGdsb2JhbC5tc0NyeXB0bykuZ2V0UmFuZG9tVmFsdWVzKG91dCk7XG4gICAgfVxuICAgIHJldHVybiB0b3N0cmluZyhvdXQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdmFyIGJyb3dzZXIgPSBnbG9iYWwubmF2aWdhdG9yLFxuICAgICAgICBwbHVnaW5zID0gYnJvd3NlciAmJiBicm93c2VyLnBsdWdpbnM7XG4gICAgcmV0dXJuIFsrbmV3IERhdGUsIGdsb2JhbCwgcGx1Z2lucywgZ2xvYmFsLnNjcmVlbiwgdG9zdHJpbmcocG9vbCldO1xuICB9XG59XG5cbi8vXG4vLyB0b3N0cmluZygpXG4vLyBDb252ZXJ0cyBhbiBhcnJheSBvZiBjaGFyY29kZXMgdG8gYSBzdHJpbmdcbi8vXG5mdW5jdGlvbiB0b3N0cmluZyhhKSB7XG4gIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KDAsIGEpO1xufVxuXG4vL1xuLy8gV2hlbiBzZWVkcmFuZG9tLmpzIGlzIGxvYWRlZCwgd2UgaW1tZWRpYXRlbHkgbWl4IGEgZmV3IGJpdHNcbi8vIGZyb20gdGhlIGJ1aWx0LWluIFJORyBpbnRvIHRoZSBlbnRyb3B5IHBvb2wuICBCZWNhdXNlIHdlIGRvXG4vLyBub3Qgd2FudCB0byBpbnRlcmZlcmUgd2l0aCBkZXRlcm1pbmlzdGljIFBSTkcgc3RhdGUgbGF0ZXIsXG4vLyBzZWVkcmFuZG9tIHdpbGwgbm90IGNhbGwgbWF0aC5yYW5kb20gb24gaXRzIG93biBhZ2FpbiBhZnRlclxuLy8gaW5pdGlhbGl6YXRpb24uXG4vL1xubWl4a2V5KG1hdGgucmFuZG9tKCksIHBvb2wpO1xuXG4vL1xuLy8gTm9kZWpzIGFuZCBBTUQgc3VwcG9ydDogZXhwb3J0IHRoZSBpbXBsZW1lbnRhdGlvbiBhcyBhIG1vZHVsZSB1c2luZ1xuLy8gZWl0aGVyIGNvbnZlbnRpb24uXG4vL1xuaWYgKCh0eXBlb2YgbW9kdWxlKSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHNlZWRyYW5kb207XG4gIC8vIFdoZW4gaW4gbm9kZS5qcywgdHJ5IHVzaW5nIGNyeXB0byBwYWNrYWdlIGZvciBhdXRvc2VlZGluZy5cbiAgdHJ5IHtcbiAgICBub2RlY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJyk7XG4gIH0gY2F0Y2ggKGV4KSB7fVxufSBlbHNlIGlmICgodHlwZW9mIGRlZmluZSkgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gIGRlZmluZShmdW5jdGlvbigpIHsgcmV0dXJuIHNlZWRyYW5kb207IH0pO1xufSBlbHNlIHtcbiAgLy8gV2hlbiBpbmNsdWRlZCBhcyBhIHBsYWluIHNjcmlwdCwgc2V0IHVwIE1hdGguc2VlZHJhbmRvbSBnbG9iYWwuXG4gIG1hdGhbJ3NlZWQnICsgcm5nbmFtZV0gPSBzZWVkcmFuZG9tO1xufVxuXG5cbi8vIEVuZCBhbm9ueW1vdXMgc2NvcGUsIGFuZCBwYXNzIGluaXRpYWwgdmFsdWVzLlxufSkoXG4gIC8vIGdsb2JhbDogYHNlbGZgIGluIGJyb3dzZXJzIChpbmNsdWRpbmcgc3RyaWN0IG1vZGUgYW5kIHdlYiB3b3JrZXJzKSxcbiAgLy8gb3RoZXJ3aXNlIGB0aGlzYCBpbiBOb2RlIGFuZCBvdGhlciBlbnZpcm9ubWVudHNcbiAgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykgPyBzZWxmIDogdGhpcyxcbiAgW10sICAgICAvLyBwb29sOiBlbnRyb3B5IHBvb2wgc3RhcnRzIGVtcHR5XG4gIE1hdGggICAgLy8gbWF0aDogcGFja2FnZSBjb250YWluaW5nIHJhbmRvbSwgcG93LCBhbmQgc2VlZHJhbmRvbVxuKTtcbiIsIi8vIEEgSmF2YXNjcmlwdCBpbXBsZW1lbnRhaW9uIG9mIFJpY2hhcmQgQnJlbnQncyBYb3JnZW5zIHhvcjQwOTYgYWxnb3JpdGhtLlxuLy9cbi8vIFRoaXMgZmFzdCBub24tY3J5cHRvZ3JhcGhpYyByYW5kb20gbnVtYmVyIGdlbmVyYXRvciBpcyBkZXNpZ25lZCBmb3Jcbi8vIHVzZSBpbiBNb250ZS1DYXJsbyBhbGdvcml0aG1zLiBJdCBjb21iaW5lcyBhIGxvbmctcGVyaW9kIHhvcnNoaWZ0XG4vLyBnZW5lcmF0b3Igd2l0aCBhIFdleWwgZ2VuZXJhdG9yLCBhbmQgaXQgcGFzc2VzIGFsbCBjb21tb24gYmF0dGVyaWVzXG4vLyBvZiBzdGFzdGljaWFsIHRlc3RzIGZvciByYW5kb21uZXNzIHdoaWxlIGNvbnN1bWluZyBvbmx5IGEgZmV3IG5hbm9zZWNvbmRzXG4vLyBmb3IgZWFjaCBwcm5nIGdlbmVyYXRlZC4gIEZvciBiYWNrZ3JvdW5kIG9uIHRoZSBnZW5lcmF0b3IsIHNlZSBCcmVudCdzXG4vLyBwYXBlcjogXCJTb21lIGxvbmctcGVyaW9kIHJhbmRvbSBudW1iZXIgZ2VuZXJhdG9ycyB1c2luZyBzaGlmdHMgYW5kIHhvcnMuXCJcbi8vIGh0dHA6Ly9hcnhpdi5vcmcvcGRmLzEwMDQuMzExNXYxLnBkZlxuLy9cbi8vIFVzYWdlOlxuLy9cbi8vIHZhciB4b3I0MDk2ID0gcmVxdWlyZSgneG9yNDA5NicpO1xuLy8gcmFuZG9tID0geG9yNDA5NigxKTsgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZWVkIHdpdGggaW50MzIgb3Igc3RyaW5nLlxuLy8gYXNzZXJ0LmVxdWFsKHJhbmRvbSgpLCAwLjE1MjA0MzY0NTA1Mzg1NDcpOyAvLyAoMCwgMSkgcmFuZ2UsIDUzIGJpdHMuXG4vLyBhc3NlcnQuZXF1YWwocmFuZG9tLmludDMyKCksIDE4MDY1MzQ4OTcpOyAgIC8vIHNpZ25lZCBpbnQzMiwgMzIgYml0cy5cbi8vXG4vLyBGb3Igbm9uemVybyBudW1lcmljIGtleXMsIHRoaXMgaW1wZWxlbWVudGF0aW9uIHByb3ZpZGVzIGEgc2VxdWVuY2Vcbi8vIGlkZW50aWNhbCB0byB0aGF0IGJ5IEJyZW50J3MgeG9yZ2VucyAzIGltcGxlbWVudGFpb24gaW4gQy4gIFRoaXNcbi8vIGltcGxlbWVudGF0aW9uIGFsc28gcHJvdmlkZXMgZm9yIGluaXRhbGl6aW5nIHRoZSBnZW5lcmF0b3Igd2l0aFxuLy8gc3RyaW5nIHNlZWRzLCBvciBmb3Igc2F2aW5nIGFuZCByZXN0b3JpbmcgdGhlIHN0YXRlIG9mIHRoZSBnZW5lcmF0b3IuXG4vL1xuLy8gT24gQ2hyb21lLCB0aGlzIHBybmcgYmVuY2htYXJrcyBhYm91dCAyLjEgdGltZXMgc2xvd2VyIHRoYW5cbi8vIEphdmFzY3JpcHQncyBidWlsdC1pbiBNYXRoLnJhbmRvbSgpLlxuXG4oZnVuY3Rpb24oZ2xvYmFsLCBtb2R1bGUsIGRlZmluZSkge1xuXG5mdW5jdGlvbiBYb3JHZW4oc2VlZCkge1xuICB2YXIgbWUgPSB0aGlzO1xuXG4gIC8vIFNldCB1cCBnZW5lcmF0b3IgZnVuY3Rpb24uXG4gIG1lLm5leHQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdyA9IG1lLncsXG4gICAgICAgIFggPSBtZS5YLCBpID0gbWUuaSwgdCwgdjtcbiAgICAvLyBVcGRhdGUgV2V5bCBnZW5lcmF0b3IuXG4gICAgbWUudyA9IHcgPSAodyArIDB4NjFjODg2NDcpIHwgMDtcbiAgICAvLyBVcGRhdGUgeG9yIGdlbmVyYXRvci5cbiAgICB2ID0gWFsoaSArIDM0KSAmIDEyN107XG4gICAgdCA9IFhbaSA9ICgoaSArIDEpICYgMTI3KV07XG4gICAgdiBePSB2IDw8IDEzO1xuICAgIHQgXj0gdCA8PCAxNztcbiAgICB2IF49IHYgPj4+IDE1O1xuICAgIHQgXj0gdCA+Pj4gMTI7XG4gICAgLy8gVXBkYXRlIFhvciBnZW5lcmF0b3IgYXJyYXkgc3RhdGUuXG4gICAgdiA9IFhbaV0gPSB2IF4gdDtcbiAgICBtZS5pID0gaTtcbiAgICAvLyBSZXN1bHQgaXMgdGhlIGNvbWJpbmF0aW9uLlxuICAgIHJldHVybiAodiArICh3IF4gKHcgPj4+IDE2KSkpIHwgMDtcbiAgfTtcblxuICBmdW5jdGlvbiBpbml0KG1lLCBzZWVkKSB7XG4gICAgdmFyIHQsIHYsIGksIGosIHcsIFggPSBbXSwgbGltaXQgPSAxMjg7XG4gICAgaWYgKHNlZWQgPT09IChzZWVkIHwgMCkpIHtcbiAgICAgIC8vIE51bWVyaWMgc2VlZHMgaW5pdGlhbGl6ZSB2LCB3aGljaCBpcyB1c2VkIHRvIGdlbmVyYXRlcyBYLlxuICAgICAgdiA9IHNlZWQ7XG4gICAgICBzZWVkID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU3RyaW5nIHNlZWRzIGFyZSBtaXhlZCBpbnRvIHYgYW5kIFggb25lIGNoYXJhY3RlciBhdCBhIHRpbWUuXG4gICAgICBzZWVkID0gc2VlZCArICdcXDAnO1xuICAgICAgdiA9IDA7XG4gICAgICBsaW1pdCA9IE1hdGgubWF4KGxpbWl0LCBzZWVkLmxlbmd0aCk7XG4gICAgfVxuICAgIC8vIEluaXRpYWxpemUgY2lyY3VsYXIgYXJyYXkgYW5kIHdleWwgdmFsdWUuXG4gICAgZm9yIChpID0gMCwgaiA9IC0zMjsgaiA8IGxpbWl0OyArK2opIHtcbiAgICAgIC8vIFB1dCB0aGUgdW5pY29kZSBjaGFyYWN0ZXJzIGludG8gdGhlIGFycmF5LCBhbmQgc2h1ZmZsZSB0aGVtLlxuICAgICAgaWYgKHNlZWQpIHYgXj0gc2VlZC5jaGFyQ29kZUF0KChqICsgMzIpICUgc2VlZC5sZW5ndGgpO1xuICAgICAgLy8gQWZ0ZXIgMzIgc2h1ZmZsZXMsIHRha2UgdiBhcyB0aGUgc3RhcnRpbmcgdyB2YWx1ZS5cbiAgICAgIGlmIChqID09PSAwKSB3ID0gdjtcbiAgICAgIHYgXj0gdiA8PCAxMDtcbiAgICAgIHYgXj0gdiA+Pj4gMTU7XG4gICAgICB2IF49IHYgPDwgNDtcbiAgICAgIHYgXj0gdiA+Pj4gMTM7XG4gICAgICBpZiAoaiA+PSAwKSB7XG4gICAgICAgIHcgPSAodyArIDB4NjFjODg2NDcpIHwgMDsgICAgIC8vIFdleWwuXG4gICAgICAgIHQgPSAoWFtqICYgMTI3XSBePSAodiArIHcpKTsgIC8vIENvbWJpbmUgeG9yIGFuZCB3ZXlsIHRvIGluaXQgYXJyYXkuXG4gICAgICAgIGkgPSAoMCA9PSB0KSA/IGkgKyAxIDogMDsgICAgIC8vIENvdW50IHplcm9lcy5cbiAgICAgIH1cbiAgICB9XG4gICAgLy8gV2UgaGF2ZSBkZXRlY3RlZCBhbGwgemVyb2VzOyBtYWtlIHRoZSBrZXkgbm9uemVyby5cbiAgICBpZiAoaSA+PSAxMjgpIHtcbiAgICAgIFhbKHNlZWQgJiYgc2VlZC5sZW5ndGggfHwgMCkgJiAxMjddID0gLTE7XG4gICAgfVxuICAgIC8vIFJ1biB0aGUgZ2VuZXJhdG9yIDUxMiB0aW1lcyB0byBmdXJ0aGVyIG1peCB0aGUgc3RhdGUgYmVmb3JlIHVzaW5nIGl0LlxuICAgIC8vIEZhY3RvcmluZyB0aGlzIGFzIGEgZnVuY3Rpb24gc2xvd3MgdGhlIG1haW4gZ2VuZXJhdG9yLCBzbyBpdCBpcyBqdXN0XG4gICAgLy8gdW5yb2xsZWQgaGVyZS4gIFRoZSB3ZXlsIGdlbmVyYXRvciBpcyBub3QgYWR2YW5jZWQgd2hpbGUgd2FybWluZyB1cC5cbiAgICBpID0gMTI3O1xuICAgIGZvciAoaiA9IDQgKiAxMjg7IGogPiAwOyAtLWopIHtcbiAgICAgIHYgPSBYWyhpICsgMzQpICYgMTI3XTtcbiAgICAgIHQgPSBYW2kgPSAoKGkgKyAxKSAmIDEyNyldO1xuICAgICAgdiBePSB2IDw8IDEzO1xuICAgICAgdCBePSB0IDw8IDE3O1xuICAgICAgdiBePSB2ID4+PiAxNTtcbiAgICAgIHQgXj0gdCA+Pj4gMTI7XG4gICAgICBYW2ldID0gdiBeIHQ7XG4gICAgfVxuICAgIC8vIFN0b3Jpbmcgc3RhdGUgYXMgb2JqZWN0IG1lbWJlcnMgaXMgZmFzdGVyIHRoYW4gdXNpbmcgY2xvc3VyZSB2YXJpYWJsZXMuXG4gICAgbWUudyA9IHc7XG4gICAgbWUuWCA9IFg7XG4gICAgbWUuaSA9IGk7XG4gIH1cblxuICBpbml0KG1lLCBzZWVkKTtcbn1cblxuZnVuY3Rpb24gY29weShmLCB0KSB7XG4gIHQuaSA9IGYuaTtcbiAgdC53ID0gZi53O1xuICB0LlggPSBmLlguc2xpY2UoKTtcbiAgcmV0dXJuIHQ7XG59O1xuXG5mdW5jdGlvbiBpbXBsKHNlZWQsIG9wdHMpIHtcbiAgaWYgKHNlZWQgPT0gbnVsbCkgc2VlZCA9ICsobmV3IERhdGUpO1xuICB2YXIgeGcgPSBuZXcgWG9yR2VuKHNlZWQpLFxuICAgICAgc3RhdGUgPSBvcHRzICYmIG9wdHMuc3RhdGUsXG4gICAgICBwcm5nID0gZnVuY3Rpb24oKSB7IHJldHVybiAoeGcubmV4dCgpID4+PiAwKSAvIDB4MTAwMDAwMDAwOyB9O1xuICBwcm5nLmRvdWJsZSA9IGZ1bmN0aW9uKCkge1xuICAgIGRvIHtcbiAgICAgIHZhciB0b3AgPSB4Zy5uZXh0KCkgPj4+IDExLFxuICAgICAgICAgIGJvdCA9ICh4Zy5uZXh0KCkgPj4+IDApIC8gMHgxMDAwMDAwMDAsXG4gICAgICAgICAgcmVzdWx0ID0gKHRvcCArIGJvdCkgLyAoMSA8PCAyMSk7XG4gICAgfSB3aGlsZSAocmVzdWx0ID09PSAwKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICBwcm5nLmludDMyID0geGcubmV4dDtcbiAgcHJuZy5xdWljayA9IHBybmc7XG4gIGlmIChzdGF0ZSkge1xuICAgIGlmIChzdGF0ZS5YKSBjb3B5KHN0YXRlLCB4Zyk7XG4gICAgcHJuZy5zdGF0ZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gY29weSh4Zywge30pOyB9XG4gIH1cbiAgcmV0dXJuIHBybmc7XG59XG5cbmlmIChtb2R1bGUgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBpbXBsO1xufSBlbHNlIGlmIChkZWZpbmUgJiYgZGVmaW5lLmFtZCkge1xuICBkZWZpbmUoZnVuY3Rpb24oKSB7IHJldHVybiBpbXBsOyB9KTtcbn0gZWxzZSB7XG4gIHRoaXMueG9yNDA5NiA9IGltcGw7XG59XG5cbn0pKFxuICB0aGlzLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3aW5kb3cgb2JqZWN0IG9yIGdsb2JhbFxuICAodHlwZW9mIG1vZHVsZSkgPT0gJ29iamVjdCcgJiYgbW9kdWxlLCAgICAvLyBwcmVzZW50IGluIG5vZGUuanNcbiAgKHR5cGVvZiBkZWZpbmUpID09ICdmdW5jdGlvbicgJiYgZGVmaW5lICAgLy8gcHJlc2VudCB3aXRoIGFuIEFNRCBsb2FkZXJcbik7XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHRsb2FkZWQ6IGZhbHNlLFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcblx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmFtZEQgPSBmdW5jdGlvbiAoKSB7XG5cdHRocm93IG5ldyBFcnJvcignZGVmaW5lIGNhbm5vdCBiZSB1c2VkIGluZGlyZWN0Jyk7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uYW1kTyA9IHt9OyIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIl9fd2VicGFja19yZXF1aXJlX18ubm1kID0gKG1vZHVsZSkgPT4ge1xuXHRtb2R1bGUucGF0aHMgPSBbXTtcblx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRyZXR1cm4gbW9kdWxlO1xufTsiLCJpbXBvcnQge0V4cGVyaW1lbnRfRGVmaW5pdGlvbn0gZnJvbSBcIi4uL0V4cGVyaW1lbnRhdGlvbi9FeHBlcmltZW50X0RlZmluaXRpb25cIjtcbmltcG9ydCB7VGFza30gZnJvbSBcIi4uL0V4cGVyaW1lbnRhdGlvbi9UYXNrXCI7XG5leHBvcnQgZnVuY3Rpb24gaW5pdCgpe31cblxuZXhwb3J0IHR5cGUgRnVuY3Rpb25fUDE8VD4gPSAocDE6IFQpID0+IHZvaWQ7XG5leHBvcnQgdHlwZSBGdW5jdGlvbl9QMV9SPFQsIFI+ID0gKHAxOiBUKSA9PiBSO1xuZXhwb3J0IHR5cGUgRnVuY3Rpb25fUDI8VCwgVT4gPSAocDE6IFQsIHAyOiBVKSA9PiB2b2lkO1xuZXhwb3J0IHR5cGUgRnVuY3Rpb25fUDJfUjxULCBVLCBSPiA9IChwMTogVCwgcDI6IFUpID0+IFI7XG5leHBvcnQgdHlwZSBGdW5jdGlvbl9QMzxULCBVLCBWPiA9IChwMTogVCwgcDI6IFUsIHAzOiBWKSA9PiB2b2lkO1xuZXhwb3J0IHR5cGUgRnVuY3Rpb25fUDNfUjxULCBVLCBWLCBSPiA9IChwMTogVCwgcDI6IFUsIHAzOiBWKSA9PiBSO1xuXG5leHBvcnQgY2xhc3MgUmVmT2JqZWN0PFQ+IHtcbiAgICB2YWx1ZTogVDtcblxuICAgIGNvbnN0cnVjdG9yKHZhbHVlOiBUKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb250YWlucyhjb2xsZWN0aW9uOmFueVtdLCBlbGVtZW50OmFueSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBjb2xsZWN0aW9uLmluZGV4T2YoZWxlbWVudCkgIT0gLTE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYXJ0ZXNpYW5fcHJvZHVjdChhcnIxLCBhcnIyLCBmKSB7XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IGFycjEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZm9yKGxldCBqID0gMDsgaSA8IGFycjIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGYoYXJyMVtpXSwgYXJyMltqXSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGd1YXJhbnRlZV90ZXN0KGY6KCk9PmJvb2xlYW4pIHtcbiAgICBsZXQgcmVzdWx0OiBib29sZWFuID0gZigpO1xuXG4gICAgaWYoIXJlc3VsdClcbiAgICAgICAgdGhyb3cgXCJTb21ldGhpbmcgaXMgd3JvbmcgaGVyZVwiO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ3VhcmFudGVlX3RydWUodHJ1ZUZhbHNlOiBib29sZWFuKSB7XG4gICAgaWYoIXRydWVGYWxzZSlcbiAgICAgICAgdGhyb3cgXCJTb21ldGhpbmcgaXMgd3JvbmcgaGVyZVwiO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29udmVydF9zdHJpbmdfdG9faHRtbF9zdHJpbmcoczogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHNcbiAgICAgICAgLnJlcGxhY2UoLyYvZywgJyZhbXA7JylcbiAgICAgICAgLnJlcGxhY2UoLzwvZywgJyZsdDsnKVxuICAgICAgICAucmVwbGFjZSgvPi9nLCAnJmd0OycpXG4gICAgICAgIC5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7JylcbiAgICAgICAgLnJlcGxhY2UoLycvZywgJyYjMzk7JylcbiAgICAgICAgLnJlcGxhY2UoL1xcbi9nLCBcIjxici8+XCIpXG4gICAgICAgIC5yZXBsYWNlKC8gL2csICcmbmJzcDsnKVxufVxuXG5leHBvcnQgZnVuY3Rpb24ga2V5X2V2ZW50X3N0cmluZyhldmVudCk6c3RyaW5nIHtcbiAgICB2YXIgcG9zdGZpeCA9IFwiXCI7XG5cbiAgICBpZihldmVudC5rZXk9PVwiQWx0XCIpXG4gICAgICAgIGlmKGV2ZW50LmN0cmxLZXkpIHJldHVybiBcIkFsdCtDdHJsXCI7XG5cbiAgICBpZihldmVudC5rZXk9PVwiQ29udHJvbFwiKVxuICAgICAgICBpZihldmVudC5hbHRLZXkpXG4gICAgICAgICAgICByZXR1cm4gXCJDdHJsK0FsdFwiO1xuXG4gICAgcG9zdGZpeCA9IHBvc3RmaXggKyAoZXZlbnQuYWx0S2V5P1wiK0FsdFwiOlwiXCIpO1xuICAgIHBvc3RmaXggPSBwb3N0Zml4ICsgKGV2ZW50LmN0cmxLZXk/XCIrQ29udHJvbFwiOlwiXCIpO1xuXG4gICAgaWYoZXZlbnQua2V5PT1cIkFsdFwiKSByZXR1cm4gXCJBbHRcIjtcbiAgICAvLyBpZihldmVudC5rZXk9PVwiQ29udHJvbFwiKSByZXR1cm4gcG9zdGZpeDtcblxuICAgIHJldHVybiBcIlwiICsgZXZlbnQua2V5ICsgcG9zdGZpeDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFycmF5X3RvX3NlcXVlbmNlX29mX3NpemVfKHNlcXVlbmNlOmFueVtdKTpudW1iZXJbXSB7XG4gICAgdmFyIHJldDogbnVtYmVyW10gPSBbXTtcbiAgICB2YXIgY291bnRlcj0wO1xuICAgIGZvcih2YXIgZWxlbWVudCBvZiBzZXF1ZW5jZSkge1xuICAgICAgICByZXQucHVzaChjb3VudGVyKTtcbiAgICAgICAgY291bnRlcisrO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3N2X2VuY29kaW5nKGFfc3RyaW5nOlN0cmluZykge1xuICAgIGxldCBhZGRfZXNjYXBlcyA9IGFfc3RyaW5nLnNwbGl0KFwiXFxcIlwiKS5qb2luKFwiXFxcIlxcXCJcIik7XG4gICAgcmV0dXJuIFwiXFxcIlwiICsgYWRkX2VzY2FwZXMgKyBcIlxcXCJcIjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNhdmVfZmlsZV9pbl9odG1sKGZpbGVuYW1lOnN0cmluZywgZGF0YTpzdHJpbmdbXSkge1xuICAgIGNvbnN0IGJsb2IgPSBuZXcgQmxvYihkYXRhLCB7dHlwZTogJ2FwcGxpY2F0aW9uL3NzYyd9KTtcbiAgICBjb25zdCBlbGVtID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICBlbGVtLmhyZWYgPSB3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcbiAgICBlbGVtLmRvd25sb2FkID0gZmlsZW5hbWU7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChlbGVtKTtcbiAgICBlbGVtLmNsaWNrKCk7XG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChlbGVtKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZF91cGxvYWRfcHVzaF9idXR0b24odXJsOnN0cmluZywgYnV0dG9uX3Rlc3Q6c3RyaW5nLCBkYXRhOnN0cmluZykge1xuXG4gICAgY29uc3QgZWxlbSA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdmb3JtJyk7XG4gICAgZWxlbS5zZXRBdHRyaWJ1dGUoXCJhY3Rpb25cIiwgdXJsKTtcbiAgICBlbGVtLnNldEF0dHJpYnV0ZShcIm1ldGhvZFwiLCBcInBvc3RcIik7XG5cbiAgICBjb25zdCBpID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgaS5zZXRBdHRyaWJ1dGUoXCJuYW1lXCIsIFwiZGF0YVwiKTtcbiAgICBpLnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJoaWRkZW5cIik7XG4gICAgaS5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLCBkYXRhKTtcbiAgICBlbGVtLmFwcGVuZENoaWxkKGkpO1xuXG4gICAgY29uc3QgaiA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgIGouc2V0QXR0cmlidXRlKFwidmFsdWVcIiwgYnV0dG9uX3Rlc3QpXG4gICAgai5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwic3VibWl0XCIpO1xuXG5cbiAgICBlbGVtLmFwcGVuZENoaWxkKGopO1xuXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChlbGVtKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwbG9hZF9leHBlcmltZW50X3RvX3NlcnZlcjxUYXNrVHlwZSBleHRlbmRzIFRhc2s+KGV4cGVyaW1lbnQ6RXhwZXJpbWVudF9EZWZpbml0aW9uKSB7XG4gICAgbGV0IGNzdiA9IGV4cGVyaW1lbnQuZ2VuZXJhdGVfY3N2X2RhdGEoKTtcbiAgICBsZXQgY3VycmVudFVybCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuXG5cblxuICAgIC8vIGNvbnN0IHJlc3BvbnNlID0gZmV0Y2goJ2h0dHA6Ly8xMjcuMC4wLjE6ODA4OCcsIHtcbiAgICAvLyAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgLy8gICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtleHBlcmltZW50X25hbWUgOiBcImR1bW15MlwiLCBleHBlcmltZW50X2RhdGE6IGRhdGF9KSxcbiAgICAvLyAgICAgaGVhZGVyczogeydDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD1VVEYtOCd9IH0pXG5cbiAgICBjb25zb2xlLmxvZyhjdXJyZW50VXJsKTtcblxufVxuIiwiaW1wb3J0IHtBdXRvbWF0YX0gZnJvbSBcIi4vQXV0b21hdGFcIjtcblxuZXhwb3J0IGNsYXNzIEF1dG9tYXRhX0ZvcndhcmRlciB7XG5cbiAgICBhdXRvbWF0YTogQXV0b21hdGE7XG5cbiAgICBmb3J3YXJkZXJfbmFtZTogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IoZm9yd2FyZGVyX25hbWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLmZvcndhcmRlcl9uYW1lID0gZm9yd2FyZGVyX25hbWU7XG4gICAgfVxuXG5cbiAgICBpbnB1dChzOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5hdXRvbWF0YS5pbnB1dChzKTtcbiAgICB9XG5cbiAgICBzZXRfYWN0aXZlX2Z1bmN0aW9uOiAoKT0+dm9pZCA9ICgpPT57fTtcblxuICAgIGFkZF9hY3RpdmF0aW9uX2Z1bmN0aW9uKHRvX2FkZDogKCk9PnZvaWQpIHtcbiAgICAgICAgLy8gbGV0IG9sZF9hY3RpdmF0aW9uX2Z1bmN0aW9uID0gdGhpcy5zZXRfYWN0aXZlX2Z1bmN0aW9uO1xuICAgICAgICAvLyB0aGlzLnNldF9hY3RpdmVfZnVuY3Rpb24gPSAoKSA9PiB7XG4gICAgICAgIC8vICAgICBvbGRfYWN0aXZhdGlvbl9mdW5jdGlvbigpO1xuICAgICAgICAvLyAgICAgdG9fYWRkKCk7XG4gICAgICAgIC8vIH1cbiAgICB9XG5cbiAgICBzZXRfYWN0aXZlKCkge31cbn1cbiIsImltcG9ydCB7VHJhbnNpdGlvbiwgVHJhbnNpdGlvbl9BY2NlcHRvcl9GdW5jdGlvbn0gZnJvbSBcIi4vVHJhbnNpdGlvbnNcIjtcbmltcG9ydCB7Y29udGFpbnN9IGZyb20gXCIuLi91dGlscy9VdGlsc1wiO1xuaW1wb3J0IHtBdXRvbWF0YV9Db25maWd1cmF0b3J9IGZyb20gXCIuL0F1dG9tYXRhX0NvbmZpZ3VyYXRvclwiO1xuZXhwb3J0IGZ1bmN0aW9uIGluaXQoKXt9XG5cbmV4cG9ydCBjbGFzcyBBdXRvbWF0YSB7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgY29uZmlnOiBBdXRvbWF0YV9Db25maWd1cmF0b3JcbiAgICApXG4gICAge1xuICAgICAgICB0aGlzLnN0YXJ0X3N0YXRlID0gY29uZmlnLnN0YXJ0O1xuICAgICAgICB0aGlzLnN0YXRlcyA9IGNvbmZpZy5zdGF0ZXM7XG5cbiAgICAgICAgZm9yKGxldCBpPTA7IGk8dGhpcy5zdGF0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMudHJhbnNpdGlvbnMucHVzaChbXSk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGZvcihsZXQgdCBvZiBjb25maWcudHJhbnNpdGlvbnMpIHtcbiAgICAgICAgICAgIGlmKHRoaXMudHJhbnNpdGlvbnMgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiU29tZXRoaW5nIGlzIHdyb25nIGhlcmVcIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKHRoaXMudHJhbnNpdGlvbnMgPT0gdW5kZWZpbmVkIHx8IHQuZnJvbT09dW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJTb21ldGhpbmcgaXMgd3JvbmcgaGVyZVwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYodGhpcy50cmFuc2l0aW9uc1t0LmZyb21dID09dW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJTb21ldGhpbmcgaXMgd3JvbmcgaGVyZVwiKTtcbiAgICAgICAgICAgIH1cbnRyeSB7XG4gICAgdGhpcy50cmFuc2l0aW9uc1t0LmZyb21dLnB1c2godCk7XG59Y2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLmxvZyhcIndlaXJkXCIpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pbml0X2Z1bmN0aW9uID0gY29uZmlnLmluaXRfZnVuY3Rpb247XG4gICAgICAgIHRoaXMuZW5kX3N0YXRlcyA9IGNvbmZpZy5lbmRfc3RhdGVzO1xuICAgIH1cblxuXG4gICAgY3VycmVudF9zdGF0ZTpudW1iZXIgPSAtMTtcbiAgICBzdGFydF9zdGF0ZTogbnVtYmVyO1xuICAgIHRyYW5zaXRpb25zOlRyYW5zaXRpb25bXVtdID0gW107XG4gICAgc3RhdGVzOiBudW1iZXJbXSA9IFtdO1xuICAgIGVuZF9zdGF0ZXM6IG51bWJlcltdO1xuICAgIGluaXRfZnVuY3Rpb246ICgpPT52b2lkO1xuXG4gICAgLy8gb25fZmluaXNoX2Z1bmN0aW9uOiAobnVtYmVyKSA9PiB2b2lkO1xuXG4gICAgaW5wdXQoXG4gICAgICAgICAgICBpbnB1dDpzdHJpbmdcbiAgICAgICAgIClcbiAgICA6dm9pZFxuICAgIHtcbiAgICAgICAgbGV0IG1hdGNoaW5nX3RyYW5zaXRpb246VHJhbnNpdGlvbiA9IHRoaXMuZmlyc3RfbWF0Y2goaW5wdXQpO1xuICAgICAgICBsZXQgc3RhdGVfYmVmb3JlOm51bWJlciA9IHRoaXMuY3VycmVudF9zdGF0ZTtcbiAgICAgICAgaWYobWF0Y2hpbmdfdHJhbnNpdGlvbiAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRfc3RhdGUgPSBtYXRjaGluZ190cmFuc2l0aW9uLm5leHRfc3RhdGU7IC8vIGdvIHRvIG5leHQgc3RhdGVcbiAgICAgICAgICAgIG1hdGNoaW5nX3RyYW5zaXRpb24uYWN0aW9uKHN0YXRlX2JlZm9yZSwgaW5wdXQsIHRoaXMuY3VycmVudF9zdGF0ZSk7IC8vIGdvIHRvIG5leHQgc3RhdGVcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXJ0KFxuICAgICAgICAgKVxuICAgIHtcbiAgICAgICAgdGhpcy5jdXJyZW50X3N0YXRlID0gdGhpcy5zdGFydF9zdGF0ZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGZpcnN0X21hdGNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0OiBzdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgIDpUcmFuc2l0aW9uXG4gICAge1xuICAgICAgICBmb3IobGV0IGk9MDsgaTx0aGlzLnRyYW5zaXRpb25zW3RoaXMuY3VycmVudF9zdGF0ZV0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmKHRoaXMudHJhbnNpdGlvbnNbdGhpcy5jdXJyZW50X3N0YXRlXVtpXS5hY2NlcHRzKGlucHV0KSlcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50cmFuc2l0aW9uc1t0aGlzLmN1cnJlbnRfc3RhdGVdW2ldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGluaXRpYWxpemUoKSB7XG4gICAgICAgIHRoaXMuY3VycmVudF9zdGF0ZSA9IHRoaXMuc3RhcnRfc3RhdGU7XG4gICAgICAgIHRoaXMuaW5pdF9mdW5jdGlvbigpO1xuICAgIH1cblxuICAgIGFkZF9maW5pc2hfYWN0aW9uKGFjdGlvbjogKCkgPT4gdm9pZCkge1xuICAgICAgICBmb3IobGV0IHRyYW5zaXRpb25zIG9mIHRoaXMudHJhbnNpdGlvbnMpIHtcbiAgICAgICAgICAgIGZvcihsZXQgdHJhbnNpdGlvbiBvZiB0cmFuc2l0aW9ucykge1xuICAgICAgICAgICAgICAgIGlmKHRoaXMuaXNfdHJhbnNpdGlvbl90b19lbmQodHJhbnNpdGlvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGZvcm1lcl9hY3Rpb24gPSB0cmFuc2l0aW9uLmFjdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbi5hY3Rpb24gPSAoZnJvbTogbnVtYmVyLCBpbnB1dDogc3RyaW5nLCBuZXh0OiBudW1iZXIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1lcl9hY3Rpb24oZnJvbSwgaW5wdXQsIG5leHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGlzX3RyYW5zaXRpb25fdG9fZW5kKHRyYW5zaXRpb246IFRyYW5zaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIGNvbnRhaW5zKHRoaXMuZW5kX3N0YXRlcywgdHJhbnNpdGlvbi5uZXh0X3N0YXRlKTtcbiAgICB9XG5cbiAgICBhZGRfYWN0aW9uX3RvX3RyYW5zaXRpb25zKGlzX3RhcmdldF90cmFuc2l0aW9uOihpbl90cmFuc2l0aW9uOiBUcmFuc2l0aW9uKSA9PiBib29sZWFuLCBhY3Rpb246ICgpID0+IHZvaWQpIHtcbiAgICAgICAgZm9yKGxldCB0cmFuc2l0aW9ucyBvZiB0aGlzLnRyYW5zaXRpb25zKSB7XG4gICAgICAgICAgICBmb3IobGV0IHRyYW5zaXRpb24gb2YgdHJhbnNpdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBpZihpc190YXJnZXRfdHJhbnNpdGlvbih0cmFuc2l0aW9uKSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgZm9ybWVyX2FjdGlvbiA9IHRyYW5zaXRpb24uYWN0aW9uO1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uLmFjdGlvbiA9IChmcm9tOiBudW1iZXIsIGlucHV0OiBzdHJpbmcsIG5leHQ6IG51bWJlcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWVyX2FjdGlvbihmcm9tLCBpbnB1dCwgbmV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuXG4iLCJpbXBvcnQge0F1dG9tYXRhX0ZvcndhcmRlcn0gZnJvbSBcIi4uL0F1dG9tYXRhL0F1dG9tYXRhX0ZvcndhcmRlclwiO1xuaW1wb3J0IHtFeHBlcmltZW50X091dHB1dF9Xcml0ZXIsIE1lYXN1cmVtZW50X1R5cGUsIE91dHB1dF9Db21tYW5kfSBmcm9tIFwiLi4vRXhwZXJpbWVudGF0aW9uL0V4cGVyaW1lbnRhdGlvblwiO1xuaW1wb3J0IHtBdXRvbWF0YV9Db25maWd1cmF0b3J9IGZyb20gXCIuLi9BdXRvbWF0YS9BdXRvbWF0YV9Db25maWd1cmF0b3JcIjtcbmltcG9ydCB7QXV0b21hdGF9IGZyb20gXCIuLi9BdXRvbWF0YS9BdXRvbWF0YVwiO1xuZXhwb3J0IGZ1bmN0aW9uIGluaXQoKXt9XG5cbi8qXG4gICAgSSBkb24ndCBkbyBhbnl0aGluZyAtIEkgYW0ganVzdCBhIHN1cGVyY2xhc3NcbiAqL1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQXV0b21hdGFfV2l0aF9PdXRwdXRfRm9yd2FyZGVyIGV4dGVuZHMgQXV0b21hdGFfRm9yd2FyZGVyIHtcblxuICAgIC8vIG91dHB1dF93cml0ZXI6IEF1dG9tYXRhX0lPO1xuICAgIHByZV9ydW5faW5zdHJ1Y3Rpb25zOiBPdXRwdXRfQ29tbWFuZDtcbiAgICBwb3N0X3J1bl9pbnN0cnVjdGlvbnM6IE91dHB1dF9Db21tYW5kO1xuICAgIG1lYXN1cmVtZW50OiBNZWFzdXJlbWVudF9UeXBlO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgICAgICAgICAgICAgIGZvcndhcmRlcl9uYW1lOiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgIG1lYXN1cmVtZW50OiBNZWFzdXJlbWVudF9UeXBlLFxuICAgICAgICAgICAgICAgICAgICBwcmVfcnVuX2luc3RydWN0aW9uczogT3V0cHV0X0NvbW1hbmQsXG4gICAgICAgICAgICAgICAgICAgIHBvc3RfcnVuX2luc3RydWN0aW9uczogT3V0cHV0X0NvbW1hbmRcbiAgICAgICAgICAgICAgIClcbiAgICB7XG4gICAgICAgIHN1cGVyKGZvcndhcmRlcl9uYW1lKTtcbiAgICAgICAgdGhpcy5wcmVfcnVuX2luc3RydWN0aW9ucyA9IHByZV9ydW5faW5zdHJ1Y3Rpb25zO1xuICAgICAgICB0aGlzLnBvc3RfcnVuX2luc3RydWN0aW9ucyA9IHBvc3RfcnVuX2luc3RydWN0aW9ucztcbiAgICAgICAgdGhpcy5tZWFzdXJlbWVudCA9IG1lYXN1cmVtZW50O1xuICAgICAgICB0aGlzLmF1dG9tYXRhID0gdGhpcy5jcmVhdGVfYXV0b21hdGEoKTsvL25ldyBBdXRvbWF0YSh0aGlzLmF1dG9tYXRhX2NvbmZpZ3VyYXRvcigpKTtcbiAgICAgICAgdGhpcy5hdXRvbWF0YS5pbml0aWFsaXplKCk7XG5cbiAgICB9XG5cbiAgICBzZXRfYWN0aXZlKCkge1xuICAgICAgICB0aGlzLnNob3dfaW50cm8oKTtcbiAgICB9XG5cbiAgICBjcmVhdGVfYXV0b21hdGEoKSB7XG4gICAgICAgIHJldHVybiBuZXcgQXV0b21hdGEodGhpcy5hdXRvbWF0YV9jb25maWd1cmF0b3IoKSk7XG4gICAgfVxuXG4gICAgYWJzdHJhY3QgYXV0b21hdGFfY29uZmlndXJhdG9yKCk6IEF1dG9tYXRhX0NvbmZpZ3VyYXRvcjtcblxuICAgIG91dHB1dF93cml0ZXIoKTpFeHBlcmltZW50X091dHB1dF9Xcml0ZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5tZWFzdXJlbWVudC5vdXRwdXRfd3JpdGVyKCk7XG4gICAgfVxuXG4gICAgc2hvd19pbnRybygpIHtcbiAgICAgICAgdGhpcy5vdXRwdXRfd3JpdGVyKCkuY2xlYXJfYWxsKCk7XG4gICAgICAgIHRoaXMub3V0cHV0X3dyaXRlcigpLnByaW50X3N0cmluZ190b19zdGF0ZSh0aGlzLmZvcndhcmRlcl9uYW1lKTtcbiAgICAgICAgdGhpcy5wcmVfcnVuX2luc3RydWN0aW9ucygpO1xuICAgIH1cblxuICAgIGFic3RyYWN0IHNob3dfb3V0cm8oKTtcblxuICAgIGVtcHR5X3NjcmVlbl9hbmRfc2hvd19pbnN0cnVjdGlvbnMoY29tbWFuZDpPdXRwdXRfQ29tbWFuZCkge1xuICAgICAgICB0aGlzLm91dHB1dF93cml0ZXIoKS5jbGVhcl9zdGF0ZSgpO1xuICAgICAgICB0aGlzLm91dHB1dF93cml0ZXIoKS5jbGVhcl9zdGFnZSgpO1xuXG4gICAgICAgIGlmKGNvbW1hbmQ9PW51bGwgfHwgY29tbWFuZCA9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInNvbWV0aGluZyBpcyBzdHJhbmdlXCIpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBjb21tYW5kKCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9UcmFuc2l0aW9uc1wiO1xuaW1wb3J0IHtBdXRvbWF0YX0gZnJvbSBcIi4vQXV0b21hdGFcIjtcbmV4cG9ydCBmdW5jdGlvbiBpbml0KCl7fVxuXG5leHBvcnQgY2xhc3MgQXV0b21hdGFfQ29uZmlndXJhdG9yIHtcbiAgICBzdGF0ZXM6IG51bWJlcltdO1xuICAgIHN0YXJ0OiBudW1iZXI7XG4gICAgdHJhbnNpdGlvbnM6VHJhbnNpdGlvbltdO1xuICAgIGVuZF9zdGF0ZXM6bnVtYmVyW107XG4gICAgaW5pdF9mdW5jdGlvbjooKT0+dm9pZDtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZXM6IG51bWJlcltdLFxuICAgICAgICAgICAgICAgICAgICBzdGFydDogbnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICBpbml0X2Z1bmN0aW9uOigpPT52b2lkLFxuICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uczogVHJhbnNpdGlvbltdLFxuICAgICAgICAgICAgICAgICAgICBlbmRfc3RhdGVzOiBudW1iZXJbXSxcbiAgICApIHtcbiAgICAgICAgdGhpcy5zdGF0ZXMgPSBzdGF0ZXM7XG4gICAgICAgIHRoaXMuc3RhcnQgPSBzdGFydDtcbiAgICAgICAgdGhpcy5pbml0X2Z1bmN0aW9uID0gaW5pdF9mdW5jdGlvbjtcbiAgICAgICAgdGhpcy50cmFuc2l0aW9ucyA9IHRyYW5zaXRpb25zO1xuICAgICAgICB0aGlzLmVuZF9zdGF0ZXMgPSBlbmRfc3RhdGVzO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZV9hdXRvbWF0YShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZXM6IG51bWJlcltdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBudW1iZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5pdF9mdW5jdGlvbjooKT0+dm9pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uczogVHJhbnNpdGlvbltdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZF9zdGF0ZXM6bnVtYmVyW10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxue1xuICAgIHJldHVybiBuZXcgQXV0b21hdGEobmV3IEF1dG9tYXRhX0NvbmZpZ3VyYXRvcihzdGF0ZXMsIHN0YXJ0LCAgaW5pdF9mdW5jdGlvbiwgdHJhbnNpdGlvbnMsIGVuZF9zdGF0ZXMpKTtcbn1cbiIsImltcG9ydCB7Y29udGFpbnN9IGZyb20gXCIuLi91dGlscy9VdGlsc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gaW5pdCgpe31cbmFic3RyYWN0IGNsYXNzIFRyYW5zaXRpb25fQWNjZXB0b3Ige1xuICAgIGFic3RyYWN0IGFjY2VwdHMoaW5wdXQ6IHN0cmluZyk6IGJvb2xlYW47XG59XG5cbmNsYXNzIFRyYW5zaXRpb25fU3RyaW5nc19BY2NlcHRvciBleHRlbmRzICBUcmFuc2l0aW9uX0FjY2VwdG9yIHtcbiAgICBjb25zdHJ1Y3RvcihzdHJpbmdzOiBzdHJpbmdbXSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmFjY2VwdGVkX3N0cmluZ3MgPSBzdHJpbmdzO1xuICAgIH1cblxuICAgIGFjY2VwdGVkX3N0cmluZ3M6IHN0cmluZ1tdO1xuICAgIGFjY2VwdHMoaW5wdXQ6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gY29udGFpbnModGhpcy5hY2NlcHRlZF9zdHJpbmdzLCBpbnB1dCk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgVHJhbnNpdGlvbl9BY2NlcHRvcl9GdW5jdGlvbiBleHRlbmRzICBUcmFuc2l0aW9uX0FjY2VwdG9yIHtcbiAgICBjb25zdHJ1Y3RvcihhY2NlcHRvcl9mdW5jdGlvbjogKGNoZWNrZWRfc3RyaW5nOnN0cmluZykgPT4gYm9vbGVhbikge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmFjY2VwdG9yX2Z1bmN0aW9uID0gYWNjZXB0b3JfZnVuY3Rpb247XG4gICAgfVxuXG4gICAgYWNjZXB0b3JfZnVuY3Rpb246IChjaGVja2VkX3N0cmluZzpzdHJpbmcpID0+IGJvb2xlYW47XG4gICAgYWNjZXB0cyhpbnB1dDogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFjY2VwdG9yX2Z1bmN0aW9uKGlucHV0KTtcbiAgICB9XG59XG5cbmNsYXNzIFRyYW5zaXRpb25fU3RyaW5nc19BY2NlcHRzX0FMTCBleHRlbmRzICBUcmFuc2l0aW9uX0FjY2VwdG9yIHtcbiAgICBhY2NlcHRzKGlucHV0OiBTdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBrZXlzKHN0cmluZ3M6c3RyaW5nW10pIHtcbiAgICByZXR1cm4gbmV3IFRyYW5zaXRpb25fU3RyaW5nc19BY2NlcHRvcihzdHJpbmdzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlmX2Z1bmMoZjogKHM6c3RyaW5nKT0+Ym9vbGVhbikge1xuICAgIHJldHVybiBuZXcgVHJhbnNpdGlvbl9BY2NlcHRvcl9GdW5jdGlvbihmKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBlYWNoX2NoYXIoY2hhcmxpc3Q6c3RyaW5nKSB7XG4gICAgdmFyIGNoYXJzOnN0cmluZ1tdID0gW107XG4gICAgZm9yKGxldCBhIG9mIGNoYXJsaXN0KSB7XG4gICAgICAgIGNoYXJzLnB1c2goYSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uX1N0cmluZ3NfQWNjZXB0b3IoY2hhcnMpO1xufVxuXG5leHBvcnQgY2xhc3MgVHJhbnNpdGlvbiB7XG4gICAgZnJvbTogbnVtYmVyO1xuICAgIGFjY2VwdG9yOiBUcmFuc2l0aW9uX0FjY2VwdG9yO1xuICAgIG5leHRfc3RhdGU6IG51bWJlcjtcbiAgICBhY3Rpb246IChmcm9tIDpudW1iZXIsIGlucHV0IDpzdHJpbmcsIHRvIDpudW1iZXIpID0+IHZvaWQ7XG5cbiAgICBjb25zdHJ1Y3Rvcihmcm9tOiBudW1iZXIsIGFjY2VwdG9yOiBUcmFuc2l0aW9uX0FjY2VwdG9yLCBuZXh0X3N0YXRlOiBudW1iZXIsIGFjdGlvbjogKGZyb20gOm51bWJlciwgaW5wdXQgOnN0cmluZywgdG8gOm51bWJlcikgPT4gdm9pZCl7XG4gICAgICAgIHRoaXMuZnJvbSA9IGZyb207XG4gICAgICAgIHRoaXMuYWNjZXB0b3IgPSBhY2NlcHRvcjtcbiAgICAgICAgdGhpcy5uZXh0X3N0YXRlID0gbmV4dF9zdGF0ZTtcbiAgICAgICAgdGhpcy5hY3Rpb24gPSBhY3Rpb247XG4gICAgfTtcblxuICAgIGlzX3ZhbGlkX2lucHV0KGlucHV0OiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWNjZXB0b3IuYWNjZXB0cyhpbnB1dCk7XG4gICAgfVxuXG4gICAgYWNjZXB0cyhpbnB1dDogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFjY2VwdG9yLmFjY2VwdHMoaW5wdXQpO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFNpbXBsZV9UcmFuc2l0aW9uKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbTogbnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjZXB0X2lucHV0X2Z1bmN0aW9uOiAoaW5wdXQ6IHN0cmluZyk9PmJvb2xlYW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0X3N0YXRlOiBudW1iZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb246IChzOlN0cmluZyk9PnZvaWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbntcbiAgICByZXR1cm4gbmV3IFRyYW5zaXRpb24oZnJvbSwgbmV3IFRyYW5zaXRpb25fQWNjZXB0b3JfRnVuY3Rpb24oYWNjZXB0X2lucHV0X2Z1bmN0aW9uKSwgbmV4dF9zdGF0ZSwgKHM6bnVtYmVyLCBpOnN0cmluZywgbjpudW1iZXIpID0+IGFjdGlvbihpKSlcbn1cblxuXG5cbmV4cG9ydCBmdW5jdGlvbiBhY2NlcHRfYWxsKCk6VHJhbnNpdGlvbl9TdHJpbmdzX0FjY2VwdHNfQUxMIHtcbiAgICByZXR1cm4gbmV3IFRyYW5zaXRpb25fU3RyaW5nc19BY2NlcHRzX0FMTCgpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGRvX25vdGhpbmcoYXQ6bnVtYmVyLCBpbnB1dDpzdHJpbmcsIG5leHQ6IG51bWJlcik6dm9pZCB7fVxuZXhwb3J0IGZ1bmN0aW9uIHBhc3MoZjooKT0+dm9pZCk6KGF0Om51bWJlciwgaW5wdXQ6c3RyaW5nLCBuZXh0OiBudW1iZXIpPT52b2lkIHtcbiAgICByZXR1cm4gKGF0Om51bWJlciwgaW5wdXQ6c3RyaW5nLCBuZXh0OiBudW1iZXIpID0+IGYoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb20oZnJvbTogbnVtYmVyKVxue1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRvOiAodG86IG51bWJlcikgPT4geyByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG9uOiAoa2V5OiBzdHJpbmcpPT4geyByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWY6IChjaGVjazogKGk6c3RyaW5nKT0+Ym9vbGVhbik9PiB7IHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZG86KGFjdGlvbjooaTpzdHJpbmcpPT52b2lkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBTaW1wbGVfVHJhbnNpdGlvbihmcm9tLCAoaW5wdXQ6IHN0cmluZyk9PiB7cmV0dXJuIGlucHV0PT1rZXkgJiYgY2hlY2soaW5wdXQpfSwgdG8sIGFjdGlvbilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgfX0sXG4gICAgICAgICAgICAgICAgICAgICAgICBkbzooYWN0aW9uOihpOnN0cmluZyk9PnZvaWQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gU2ltcGxlX1RyYW5zaXRpb24oZnJvbSwgKGlucHV0OiBzdHJpbmcpPT4ge3JldHVybiBpbnB1dD09a2V5fSwgdG8sIGFjdGlvbilcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfX0sXG4gICAgICAgICAgICAgICAgb25fYW55OiAoa2V5czogc3RyaW5nW10pPT4geyByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBpZjogKGNoZWNrOiAoaTpzdHJpbmcpPT5ib29sZWFuKT0+IHsgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvOihhY3Rpb246KGk6c3RyaW5nKT0+dm9pZCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBTaW1wbGVfVHJhbnNpdGlvbihmcm9tLCAoaW5wdXQ6IHN0cmluZyk9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb250YWlucyhrZXlzLGlucHV0KSAmJiBjaGVjayhpbnB1dCl9LCB0bywgYWN0aW9uKVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9fSxcbiAgICAgICAgICAgICAgICAgICAgZG86KGFjdGlvbjooaTpzdHJpbmcpPT52b2lkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gU2ltcGxlX1RyYW5zaXRpb24oZnJvbSwgKGlucHV0OiBzdHJpbmcpPT4ge3JldHVybiBjb250YWlucyhrZXlzLGlucHV0KX0sIHRvLCBhY3Rpb24pXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgfX0sXG5cbiAgICB9XG5cbn1cbiIsImltcG9ydCB7QXV0b21hdGFfV2l0aF9PdXRwdXRfRm9yd2FyZGVyfSBmcm9tIFwiLi9BdXRvbWF0YV9XaXRoX091dHB1dF9Gb3J3YXJkZXJcIjtcbmltcG9ydCB7QXV0b21hdGFfQ29uZmlndXJhdG9yfSBmcm9tIFwiLi4vQXV0b21hdGEvQXV0b21hdGFfQ29uZmlndXJhdG9yXCI7XG5pbXBvcnQge2Zyb219IGZyb20gXCIuLi9BdXRvbWF0YS9UcmFuc2l0aW9uc1wiO1xuaW1wb3J0IHtNZWFzdXJlbWVudF9UeXBlfSBmcm9tIFwiLi4vRXhwZXJpbWVudGF0aW9uL0V4cGVyaW1lbnRhdGlvblwiO1xuXG5sZXQgU0hPV19JTlRSTz0wO1xubGV0IFNIT1dfUVVFU1RJT049MTtcbmxldCBBTlNXRVJFRF9JTkNPTVBMRVRFPTI7XG5sZXQgQU5TV0VSRVNfQ09NUExFVEUgPSAzXG5sZXQgRVZFUllUSElOR19ET05FID0gNDtcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFF1ZXN0aW9uIHtcbiAgICB2YXJpYWJsZV9uYW1lOiBzdHJpbmc7XG4gICAgcXVlc3Rpb25fdGV4dDogc3RyaW5nO1xuICAgIGFuc3dlciA9IG51bGw7XG5cbiAgICBjb25zdHJ1Y3Rvcih2YXJpYWJsZV9uYW1lOiBzdHJpbmcsIHF1ZXN0aW9uX3RleHQ6IHN0cmluZykge1xuICAgICAgICB0aGlzLnZhcmlhYmxlX25hbWUgPSB2YXJpYWJsZV9uYW1lO1xuICAgICAgICB0aGlzLnF1ZXN0aW9uX3RleHQgPSBxdWVzdGlvbl90ZXh0O1xuICAgIH1cblxuICAgIGFic3RyYWN0IGlucHV0X2h0bWwoKTtcblxuICAgIHN0b3JlX2Fuc3dlcigpIHtcbiAgICAgICAgbGV0IGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLnZhcmlhYmxlX25hbWUpO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHRoaXMuYW5zd2VyID0gZWxlbWVudC52YWx1ZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgQWx0ZXJuYXRpdmVzIGV4dGVuZHMgUXVlc3Rpb24ge1xuICAgIGFsdGVybmF0aXZlczpzdHJpbmdbXTtcblxuICAgIGNvbnN0cnVjdG9yKHZhcmlhYmxlX25hbWU6IHN0cmluZywgcXVlc3Rpb25fdGV4dDogc3RyaW5nLCBhbHRlcm5hdGl2ZXM6IHN0cmluZ1tdKSB7XG4gICAgICAgIHN1cGVyKHZhcmlhYmxlX25hbWUsIHF1ZXN0aW9uX3RleHQpO1xuICAgICAgICB0aGlzLmFsdGVybmF0aXZlcyA9IGFsdGVybmF0aXZlcztcbiAgICB9XG5cbiAgICBpbnB1dF9odG1sKCkge1xuICAgICAgICBsZXQgaHRtbF9zdHJpbmcgPSBcIjxzZWxlY3QgaWQ9XFxcIlwiICsgdGhpcy52YXJpYWJsZV9uYW1lICsgXCJcXFwiPlwiO1xuICAgICAgICBodG1sX3N0cmluZyArPVwiPG9wdGlvbiBkaXNhYmxlZCBzZWxlY3RlZCB2YWx1ZT4gLS0gc2VsZWN0IGFuIG9wdGlvbiAtLSA8L29wdGlvbj5cIjtcbiAgICAgICAgbGV0IGluZGV4ID0gMDtcbiAgICAgICAgdGhpcy5hbHRlcm5hdGl2ZXMuZm9yRWFjaCgoYSkgPT5cbiAgICAgICAgICAgIGh0bWxfc3RyaW5nICs9IFwiPG9wdGlvbiB2YWx1ZT1cIiArIGluZGV4KysgKyBcIj5cIiArIGEgKyBcIjwvb3B0aW9uPlwiXG4gICAgICAgICk7XG4gICAgICAgIGh0bWxfc3RyaW5nICs9IChcIjwvc2VsZWN0PlwiKTtcbiAgICAgICAgcmV0dXJuIGh0bWxfc3RyaW5nO1xuICAgIH1cblxuICAgIHN0b3JlX2Fuc3dlcigpIHtcbiAgICAgICAgbGV0IGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLnZhcmlhYmxlX25hbWUpO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHRoaXMuYW5zd2VyID0gdGhpcy5hbHRlcm5hdGl2ZXNbZWxlbWVudC52YWx1ZV07XG4gICAgfVxuXG59XG5cbmV4cG9ydCBjbGFzcyBJbmZvcm1hdGlvbiBleHRlbmRzIFF1ZXN0aW9uIHtcbiAgICBodG1sX3N0cmluZygpIHtcbiAgICAgICAgbGV0IGh0bWxfc3RyaW5nID0gXCI8cD5XZSBoYXZlIG9uZSBxdWVzdGlvbiB0byB5b3UuPC9wPlwiO1xuICAgICAgICByZXR1cm4gaHRtbF9zdHJpbmc7XG4gICAgfVxuXG4gICAgaW5wdXRfaHRtbCgpIHtcbiAgICAgICAgbGV0IGh0bWxfc3RyaW5nID0gXCI8aW5wdXQgdHlwZT1cXFwidGV4dFxcXCIgaWQ9XFxcIlwiICsgdGhpcy52YXJpYWJsZV9uYW1lICsgXCJcXFwiPlwiO1xuICAgICAgICByZXR1cm4gaHRtbF9zdHJpbmc7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IocXVlc3Rpb25fdGV4dDogc3RyaW5nKSB7XG4gICAgICAgIHN1cGVyKG51bGwsIHF1ZXN0aW9uX3RleHQpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEZyZWV0ZXh0IGV4dGVuZHMgUXVlc3Rpb24ge1xuICAgIGh0bWxfc3RyaW5nKCkge1xuICAgIH1cblxuICAgIGlucHV0X2h0bWwoKSB7XG4gICAgICAgIGxldCBodG1sX3N0cmluZyA9IFwiPGlucHV0IHR5cGU9XFxcInRleHRcXFwiIGlkPVxcXCJcIiArIHRoaXMudmFyaWFibGVfbmFtZSArIFwiXFxcIj5cIjtcbiAgICAgICAgcmV0dXJuIGh0bWxfc3RyaW5nO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFF1ZXN0aW9ubmFpcmVfRm9yd2FyZGVyIGV4dGVuZHMgQXV0b21hdGFfV2l0aF9PdXRwdXRfRm9yd2FyZGVyIHtcblxuICAgIGN1cnJlbnRfcXVlc3Rpb25fbnVtYmVyID0gLTE7XG4gICAgcXVlc3Rpb25zOiBRdWVzdGlvbltdO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHF1ZXN0aW9uczogUXVlc3Rpb25bXSxcbiAgICAgICAgbWVhc3VyZW1lbnQ6IE1lYXN1cmVtZW50X1R5cGUsXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKFxuICAgICAgICAgICAgICAgIFwiUXVlc3Rpb25uYWlyZVwiLFxuICAgICAgICAgICAgICAgIG1lYXN1cmVtZW50LFxuICAgICAgICAgICAgICAgICgpPT5tZWFzdXJlbWVudC5vdXRwdXRfd3JpdGVyKCkucHJpbnRfaHRtbF9vbl9zdGFnZShcbiAgICAgICAgICAgICAgICAgICAgXCJQbGVhc2UsIGFuc3dlciB0aGUgZm9sbG93aW5nIHF1ZXN0aW9ucy48YnI+XCIpLFxuICAgICAgICAgICAgICAgICgpPT5tZWFzdXJlbWVudC5vdXRwdXRfd3JpdGVyKCkucHJpbnRfaHRtbF9vbl9zdGFnZShcbiAgICAgICAgICAgICAgICAgICAgXCJUaGFuayB5b3UgZm9yIGFuc3dlcmluZyB0aGUgcXVlc3Rpb25zLlwiKVxuICAgICAgICApO1xuICAgICAgICB0aGlzLnF1ZXN0aW9ucyA9IHF1ZXN0aW9ucztcblxuICAgIH1cblxuICAgIGF1dG9tYXRhX2NvbmZpZ3VyYXRvcigpICB7XG4gICAgICAgIHJldHVybiBuZXcgQXV0b21hdGFfQ29uZmlndXJhdG9yKFxuICAgICAgICAgICAgW1NIT1dfSU5UUk8sIFNIT1dfUVVFU1RJT04sIEFOU1dFUkVEX0lOQ09NUExFVEUsIEFOU1dFUkVTX0NPTVBMRVRFLCBFVkVSWVRISU5HX0RPTkVdLFxuICAgICAgICAgICAgU0hPV19JTlRSTyxcbiAgICAgICAgICAgICgpPT57fSxcbiAgICAgICAgICAgIHRoaXMudHJhbnNpdGlvbnMoKSxcbiAgICAgICAgICAgIFtFVkVSWVRISU5HX0RPTkVdXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgdHJhbnNpdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBmcm9tKFNIT1dfSU5UUk8pLnRvKEVWRVJZVEhJTkdfRE9ORSlcbiAgICAgICAgICAgICAgICAub24oXCJET05FXCIpXG4gICAgICAgICAgICAgICAgLmlmKChpOnN0cmluZykgPT5cbiAgICAgICAgICAgICAgICAgICAgdHJ1ZVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAuZG8oKGk6c3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkX3Jlc3VsdF90b19xdWVzdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImR1bW15XCIpO1xuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICBdO1xuICAgIH1cblxuICAgIHNob3dfaW50cm8oKSB7XG4gICAgICAgIHN1cGVyLnNob3dfaW50cm8oKTtcbiAgICAgICAgbGV0IGh0bWxfc3RyaW5nID0gdGhpcy5jcmVhdGVfcXVlc3Rpb25uYWlyZV9odG1sX3N0cmluZygpO1xuICAgICAgICB0aGlzLm91dHB1dF93cml0ZXIoKS5wcmludF9odG1sX29uX3N0YWdlKGh0bWxfc3RyaW5nKTtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJET05FXCIpLm9uY2xpY2sgPSAoKSA9PlxuICAgICAgICAgICAgdGhpcy5pbnB1dChcIkRPTkVcIik7XG4gICAgICAgIDtcbiAgICB9XG5cbiAgICBzaG93X291dHJvKCkge1xuICAgIH1cblxuICAgIGNyZWF0ZV9xdWVzdGlvbm5haXJlX2h0bWxfc3RyaW5nKCk6c3RyaW5nIHtcbiAgICAgICAgbGV0IGh0bWxfc3RyaW5nID0gXCI8ZmllbGRzZXQ+PGxlZ2VuZD5RdWVzdGlvbm5haXJlPC9sZWdlbmQ+PGRpdiBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7Pjx0YWJsZT5cIjtcbiAgICAgICAgdGhpcy5xdWVzdGlvbnMuZm9yRWFjaChcbiAgICAgICAgICAgIChxKT0+XG4gICAgICAgICAgICAgICAgaHRtbF9zdHJpbmcgKz0gXCI8dHI+PHRkPlwiICsgcS5xdWVzdGlvbl90ZXh0ICsgXCI8L3RkPlwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCI8dGQ+XCIgKyBxLmlucHV0X2h0bWwoKSArIFwiPC90ZD48L3RyPlwiXG4gICAgICAgICk7XG4gICAgICAgIGh0bWxfc3RyaW5nICs9IFwiPC90YWJsZT48L2Rpdj48L2ZpZWxkc2V0Pjxicj48YnV0dG9uIGlkPSdET05FJz5PayAtIGFsbCBxdWVzdGlvbnMgYW5zd2VyZWQ8L2J1dHRvbj5cIjtcbiAgICAgICAgcmV0dXJuIGh0bWxfc3RyaW5nO1xuICAgIH1cblxuICAgIGFkZF9yZXN1bHRfdG9fcXVlc3Rpb24oKSB7XG4gICAgICAgIGZvcihsZXQgcXVlc3Rpb24gb2YgdGhpcy5xdWVzdGlvbnMpIHtcbiAgICAgICAgICAgIHF1ZXN0aW9uLnN0b3JlX2Fuc3dlcigpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHtUYXNrfSBmcm9tIFwiLi9UYXNrXCI7XG5pbXBvcnQge2NvbnZlcnRfc3RyaW5nX3RvX2h0bWxfc3RyaW5nfSBmcm9tIFwiLi4vdXRpbHMvVXRpbHNcIjtcbmltcG9ydCB7QWx0ZXJuYXRpdmVzLCBGcmVldGV4dCwgSW5mb3JtYXRpb259IGZyb20gXCIuLi9BdXRvbWF0YV9Gb3J3YXJkZXJzL1F1ZXN0aW9ubmFpcmVfRm9yd2FyZGVyXCI7XG5pbXBvcnQgc2VlZHJhbmRvbSBmcm9tIFwic2VlZHJhbmRvbVwiO1xuXG5leHBvcnQgdHlwZSBPdXRwdXRfQ29tbWFuZD0oKT0+dm9pZDtcblxuZXhwb3J0IGZ1bmN0aW9uIFJlYWN0aW9uX1RpbWUoaW5wdXQ6ICh3cml0ZXI6IEV4cGVyaW1lbnRfT3V0cHV0X1dyaXRlcik9PiBFeHBlcmltZW50X0lucHV0X1R5cGUpOiAod3JpdGVyOiBFeHBlcmltZW50X091dHB1dF9Xcml0ZXIpID0+IE1lYXN1cmVtZW50X1R5cGUge1xuICAgIHJldHVybiAod3JpdGVyOiBFeHBlcmltZW50X091dHB1dF9Xcml0ZXIpID0+IG5ldyBSZWFjdGlvbl9UaW1lX01lYXN1cmVtZW50KGlucHV0KHdyaXRlcikpO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIFJlYWN0aW9uX1RpbWVfV2l0aF9QZW5hbHR5KGlucHV0OiAod3JpdGVyOiBFeHBlcmltZW50X091dHB1dF9Xcml0ZXIpPT4gRXhwZXJpbWVudF9JbnB1dF9UeXBlLCBwZW5hbHR5X3NlY29uZHM6bnVtYmVyKTogKHdyaXRlcjogRXhwZXJpbWVudF9PdXRwdXRfV3JpdGVyKSA9PiBNZWFzdXJlbWVudF9UeXBlIHtcbiAgICByZXR1cm4gKHdyaXRlcjogRXhwZXJpbWVudF9PdXRwdXRfV3JpdGVyKSA9PiBuZXcgUmVhY3Rpb25fVGltZV9QZW5hbHR5X01lYXN1cmVtZW50KGlucHV0KHdyaXRlciksIHBlbmFsdHlfc2Vjb25kcyk7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gVGltZV90b19maW5pc2goaW5wdXQ6IChFeHBlcmltZW50X091dHB1dF9Xcml0ZXIpPT4gRXhwZXJpbWVudF9JbnB1dF9UeXBlKTogKEV4cGVyaW1lbnRfT3V0cHV0X1dyaXRlcikgPT4gTWVhc3VyZW1lbnRfVHlwZSB7XG4gICAgcmV0dXJuICh3cml0ZXI6IEV4cGVyaW1lbnRfT3V0cHV0X1dyaXRlcikgPT4gbmV3IFRpbWVfVG9fRmluaXNoX01lYXN1cmVtZW50KGlucHV0KHdyaXRlcikpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gVGltZV90b19maW5pc2hfd2l0aF9QZW5hbHR5KGlucHV0OiAoRXhwZXJpbWVudF9PdXRwdXRfV3JpdGVyKT0+IEV4cGVyaW1lbnRfSW5wdXRfVHlwZSwgcGVuYWx0eV9zZWNvbmRzOiBudW1iZXIpOiAoRXhwZXJpbWVudF9PdXRwdXRfV3JpdGVyKSA9PiBNZWFzdXJlbWVudF9UeXBlIHtcbiAgICByZXR1cm4gKHdyaXRlcjogRXhwZXJpbWVudF9PdXRwdXRfV3JpdGVyKSA9PiBuZXcgVGltZV9Ub19GaW5pc2hfV2l0aF9UaW1lX1BlbmFsdHlfTWVhc3VyZW1lbnQoaW5wdXQod3JpdGVyKSwgcGVuYWx0eV9zZWNvbmRzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGtleXMoa2V5X2xpc3Q6IHN0cmluZ1tdKSB7XG4gICAgcmV0dXJuICh3cml0ZXI6RXhwZXJpbWVudF9PdXRwdXRfV3JpdGVyKSA9PiBuZXcgS2V5X1ByZXNzaW5nKGtleV9saXN0LCB3cml0ZXIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24ga2V5c18wX3RvXzkoKSB7XG4gICAgcmV0dXJuICh3cml0ZXI6RXhwZXJpbWVudF9PdXRwdXRfV3JpdGVyKSA9PiBuZXcgS2V5X1ByZXNzaW5nKFtcIjBcIiwgXCIxXCIsIFwiMlwiLCBcIjNcIiwgXCI0XCIsIFwiNVwiLCBcIjZcIiwgXCI3XCIsIFwiOFwiLCBcIjlcIl0sIHdyaXRlcik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0ZXh0X2lucHV0X2V4cGVyaW1lbnQob3V0cHV0X3dyaXRlcjogRXhwZXJpbWVudF9PdXRwdXRfV3JpdGVyKTpFeHBlcmltZW50X0lucHV0X1R5cGUge1xuICAgIHJldHVybiBuZXcgRnJlZV9UZXh0X1VzZXJfSW5wdXRfRXhwZXJpbWVudChvdXRwdXRfd3JpdGVyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRleHRfaW5wdXRfZXhwZXJpbWVudF93aXRoX3ByZV9wb3N0X2xhYmVsKHByZSwgcG9zdCkge1xuICAgIHJldHVybiAob3V0cHV0X3dyaXRlcjogRXhwZXJpbWVudF9PdXRwdXRfV3JpdGVyKSA9PiBuZXcgRnJlZV9UZXh0X1VzZXJfSW5wdXRfRXhwZXJpbWVudF9XaXRoX1ByZVBvc3Qob3V0cHV0X3dyaXRlciwgcHJlLCBwb3N0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluZm9ybWF0aW9uKHF1ZXN0aW9uOnN0cmluZykge1xuICAgIHJldHVybiBuZXcgSW5mb3JtYXRpb24ocXVlc3Rpb24pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZnJlZV90ZXh0KHZhcl9uYW1lOiBzdHJpbmcsIHF1ZXN0aW9uOnN0cmluZykge1xuICAgIHJldHVybiBuZXcgRnJlZXRleHQodmFyX25hbWUsIHF1ZXN0aW9uKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhbHRlcm5hdGl2ZXModmFyX25hbWU6IHN0cmluZywgcXVlc3Rpb246c3RyaW5nLCBhbHRlcm5hdGl2ZXM6IHN0cmluZ1tdKSB7XG4gICAgcmV0dXJuIG5ldyBBbHRlcm5hdGl2ZXModmFyX25hbWUsIHF1ZXN0aW9uLCBhbHRlcm5hdGl2ZXMpO1xufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgRXhwZXJpbWVudF9PdXRwdXRfV3JpdGVyIHtcbiAgICBhYnN0cmFjdCBwcmludF9leHBlcmltZW50X25hbWUoczogc3RyaW5nKTtcblxuICAgIGFic3RyYWN0IHByaW50X3N0cmluZ190b19zdGF0ZShmb3J3YXJkZXJfbmFtZTogc3RyaW5nKTtcblxuICAgIGFic3RyYWN0IGNsZWFyX3N0YWdlKCk7XG4gICAgYWJzdHJhY3QgY2xlYXJfZXJyb3IoKTtcblxuICAgIGFic3RyYWN0IHByaW50X3N0cmluZ19vbl9zdGFnZShzOiBzdHJpbmcpO1xuICAgIGFic3RyYWN0IHByaW50X2h0bWxfb25fc3RhZ2Uoczogc3RyaW5nKTtcbiAgICBhYnN0cmFjdCBwcmludF9odG1sX29uX2Vycm9yKHM6IHN0cmluZyk7XG5cbiAgICBhYnN0cmFjdCBwcmludF9lcnJvcl9zdHJpbmdfb25fc3RhZ2UoZXJyb3Jfc3RyaW5nOiBzdHJpbmcpO1xuICAgIGNvbnZlcnRfc3RyaW5nX3RvX2h0bWxfc3RyaW5nKHM6c3RyaW5nKTpzdHJpbmcge1xuICAgICAgICByZXR1cm4gY29udmVydF9zdHJpbmdfdG9faHRtbF9zdHJpbmcocyk7XG4gICAgfVxuICAgIHN0cmluZ19wYWdlX2NvbW1hbmQoczogc3RyaW5nKTogT3V0cHV0X0NvbW1hbmQge1xuICAgICAgICByZXR1cm4gKCk9PnRoaXMucHJpbnRfc3RyaW5nX29uX3N0YWdlKHMpO1xuICAgIH1cblxuICAgIHN0YWdlX3N0cmluZ19wYWdlc19jb21tYW5kcyhwYWdlczogc3RyaW5nW10pOk91dHB1dF9Db21tYW5kW10ge1xuICAgICAgICBsZXQgcmV0ID0gW107XG4gICAgICAgIGZvcihsZXQgYSBvZiBwYWdlcykge1xuICAgICAgICAgICAgcmV0LnB1c2godGhpcy5zdHJpbmdfcGFnZV9jb21tYW5kKGEpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH1cblxuICAgIGFic3RyYWN0IGFza19mb3JfaW5wdXQoKTtcblxuICAgIGFic3RyYWN0IHByaW50X3N0cmluZ190b19wYWdlX251bWJlcihzOnN0cmluZyk7XG5cbiAgICBnZXRfZ2l2ZW5fYW5zd2VyKGlucHV0OnN0cmluZyk6c3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH1cblxuICAgIHByaW50X29uX2lucHV0X3Jlc3BvbnNlKGdpdmVuX2Fuc3dlcjogc3RyaW5nKSB7fVxuICAgIHNldF9mb2N1c19vbl9pbnB1dCgpe31cblxuICAgIGFic3RyYWN0IGNsZWFyX3N0YXRlKCk7XG4gICAgY2xlYXJfYWxsKCkge1xuICAgICAgICB0aGlzLmNsZWFyX3N0YXRlKCk7XG4gICAgICAgIHRoaXMuY2xlYXJfc3RhZ2UoKTtcbiAgICB9XG59XG5cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIE1lYXN1cmVtZW50X1R5cGUge1xuICAgIGlucHV0X3R5cGU6IEV4cGVyaW1lbnRfSW5wdXRfVHlwZTtcbiAgICBzdGFydF90aW1lOiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3RvcihpbnB1dF90eXBlOiBFeHBlcmltZW50X0lucHV0X1R5cGUpIHtcbiAgICAgICAgdGhpcy5pbnB1dF90eXBlID0gaW5wdXRfdHlwZTtcbiAgICB9XG5cbiAgICBhY2NlcHRlZF9yZXNwb25zZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlucHV0X3R5cGUuYWNjZXB0ZWRfcmVzcG9uc2VzKCk7XG4gICAgfVxuXG4gICAgZ2l2ZW5fYW5zd2VyKGk6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gdGhpcy5pbnB1dF90eXBlLmdpdmVuX2Fuc3dlcihpKTtcbiAgICB9XG5cbiAgICBzdGFydF9tZWFzdXJlbWVudCh0YXNrOiBUYXNrKSB7XG4gICAgICAgIHRoaXMuc3RhcnRfdGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpLnZhbHVlT2YoKTtcbiAgICAgICAgdGFzay5wcmludF90YXNrKCk7XG4gICAgfVxuXG4gICAgc3RvcF9tZWFzdXJlbWVudChpbnB1dDogc3RyaW5nLCB0YXNrOiBUYXNrKSB7XG4gICAgICAgIGxldCBlbmRfdGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpLnZhbHVlT2YoKTtcbiAgICAgICAgdGFzay5naXZlbl9hbnN3ZXIgPSAgdGhpcy5pbnB1dF90eXBlLmdldF9naXZlbl9hbnN3ZXIoaW5wdXQpO1xuICAgICAgICB0YXNrLnJlcXVpcmVkX21pbGxpc2Vjb25kcyA9IGVuZF90aW1lIC0gdGhpcy5zdGFydF90aW1lO1xuICAgICAgICB0YXNrLmRvX3ByaW50X2FmdGVyX3Rhc2tfaW5mb3JtYXRpb24oKTtcbiAgICB9XG5cbiAgICBpbmNvcnJlY3RfcmVzcG9uc2UoaTogc3RyaW5nLCB0YXNrOiBUYXNrKSB7XG4gICAgICAgIGxldCBlbmRfdGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpLnZhbHVlT2YoKTtcbiAgICAgICAgbGV0IGdpdmVuX2Fuc3dlciA9IHRhc2suZXhwZXJpbWVudF9kZWZpbml0aW9uLm1lYXN1cmVtZW50LmdldF9naXZlbl9hbnN3ZXIoaSk7XG4gICAgICAgIHRhc2suaW52YWxpZF9hbnN3ZXJzLnB1c2goW2dpdmVuX2Fuc3dlciwgZW5kX3RpbWUgLSB0aGlzLnN0YXJ0X3RpbWVdKVxuICAgICAgICB0YXNrLmRvX3ByaW50X2Vycm9yX21lc3NhZ2UodGhpcy5pbnB1dF90eXBlLmdldF9naXZlbl9hbnN3ZXIoaSkpO1xuICAgIH1cblxuICAgIG91dHB1dF93cml0ZXIoKTpFeHBlcmltZW50X091dHB1dF9Xcml0ZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5pbnB1dF90eXBlLm91dHB1dF93cml0ZXI7XG4gICAgfVxuXG4gICAgZ2V0X2dpdmVuX2Fuc3dlcihpbnB1dDpzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5wdXRfdHlwZS5nZXRfZ2l2ZW5fYW5zd2VyKGlucHV0KTtcbiAgICB9XG5cbiAgICBkZW1hbmRzX3BlbmFsdHkoKTpib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHBlbmFsdHlfaXNfb3ZlcigpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG59XG5cbmV4cG9ydCBjbGFzcyBSZWFjdGlvbl9UaW1lX01lYXN1cmVtZW50IGV4dGVuZHMgTWVhc3VyZW1lbnRfVHlwZSB7XG4gICAgY29uc3RydWN0b3IoaW5wdXRfdHlwZTogRXhwZXJpbWVudF9JbnB1dF9UeXBlKSB7XG4gICAgICAgIHN1cGVyKGlucHV0X3R5cGUpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFJlYWN0aW9uX1RpbWVfUGVuYWx0eV9NZWFzdXJlbWVudCBleHRlbmRzIE1lYXN1cmVtZW50X1R5cGUge1xuXG4gICAgcGVuYWx0eV9taWxpc2Vjb25kczogbnVtYmVyO1xuICAgIHBlbmFsdHlfc3RhcnRlZDpib29sZWFuID0gZmFsc2U7XG4gICAgcGVuYWx0eV9zdGFydF9wb2ludCA9IG51bGw7XG5cbiAgICBjb25zdHJ1Y3RvcihpbnB1dF90eXBlOiBFeHBlcmltZW50X0lucHV0X1R5cGUsIHBlbmFsdHlfc2Vjb25kczogbnVtYmVyKSB7XG4gICAgICAgIHN1cGVyKGlucHV0X3R5cGUpO1xuICAgICAgICB0aGlzLnBlbmFsdHlfbWlsaXNlY29uZHMgPSBwZW5hbHR5X3NlY29uZHMgKiAxMDAwO1xuICAgIH1cblxuICAgIGRlbWFuZHNfcGVuYWx0eSgpOmJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpbmNvcnJlY3RfcmVzcG9uc2UoaTogc3RyaW5nLCB0YXNrOiBUYXNrKSB7XG4gICAgICAgIHN1cGVyLmluY29ycmVjdF9yZXNwb25zZShpLCB0YXNrKTtcbiAgICAgICAgdGhpcy5wZW5hbHR5X3N0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLnBlbmFsdHlfc3RhcnRfcG9pbnQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKS52YWx1ZU9mKCk7XG5cbiAgICAgICAgdGFzay5kb19wcmludF9lcnJvcl9tZXNzYWdlKHRoaXMuaW5wdXRfdHlwZS5nZXRfZ2l2ZW5fYW5zd2VyKGkpKTtcbiAgICB9XG5cbiAgICBkZWxldGVfcGVuYWx0eSgpIHtcbiAgICAgICAgdGhpcy5wZW5hbHR5X3N0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5wZW5hbHR5X3N0YXJ0X3BvaW50ID0gbnVsbDtcbiAgICB9XG5cbiAgICBwZW5hbHR5X2lzX292ZXIoKSB7XG4gICAgICAgIGxldCBkaWZmID0gKG5ldyBEYXRlKCkuZ2V0VGltZSgpLnZhbHVlT2YoKSktdGhpcy5zdGFydF90aW1lO1xuICAgICAgICByZXR1cm4gIXRoaXMucGVuYWx0eV9zdGFydGVkIHx8IGRpZmYgPj0gdGhpcy5wZW5hbHR5X21pbGlzZWNvbmRzO1xuICAgIH1cblxuICAgIHN0YXJ0X21lYXN1cmVtZW50KHRhc2s6IFRhc2spIHtcbiAgICAgICAgc3VwZXIuc3RhcnRfbWVhc3VyZW1lbnQodGFzayk7XG4gICAgICAgIHRoaXMuZGVsZXRlX3BlbmFsdHkoKTtcbiAgICB9XG5cblxufVxuXG5cbmV4cG9ydCBjbGFzcyBUaW1lX1RvX0ZpbmlzaF9NZWFzdXJlbWVudCBleHRlbmRzIE1lYXN1cmVtZW50X1R5cGUge1xuICAgIGNvbnN0cnVjdG9yKGlucHV0X3R5cGU6IEV4cGVyaW1lbnRfSW5wdXRfVHlwZSkge1xuICAgICAgICBzdXBlcihpbnB1dF90eXBlKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBUaW1lX1RvX0ZpbmlzaF9XaXRoX1RpbWVfUGVuYWx0eV9NZWFzdXJlbWVudCBleHRlbmRzIFRpbWVfVG9fRmluaXNoX01lYXN1cmVtZW50IHtcblxuICAgIHBlbmFsdHlfbWlsaXNlY29uZHM6IG51bWJlcjtcbiAgICBwZW5hbHR5X3N0YXJ0ZWQ6Ym9vbGVhbiA9IGZhbHNlO1xuICAgIHBlbmFsdHlfc3RhcnRfcG9pbnQgPSBudWxsO1xuXG4gICAgY29uc3RydWN0b3IoaW5wdXRfdHlwZTogRXhwZXJpbWVudF9JbnB1dF9UeXBlLCBwZW5hbHR5X3NlY29uZHM6IG51bWJlcikge1xuICAgICAgICBzdXBlcihpbnB1dF90eXBlKTtcbiAgICAgICAgdGhpcy5wZW5hbHR5X21pbGlzZWNvbmRzID0gcGVuYWx0eV9zZWNvbmRzICogMTAwMDtcbiAgICB9XG5cbiAgICBkZW1hbmRzX3BlbmFsdHkoKTpib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaW5jb3JyZWN0X3Jlc3BvbnNlKGk6IHN0cmluZywgdGFzazogVGFzaykge1xuICAgICAgICBzdXBlci5pbmNvcnJlY3RfcmVzcG9uc2UoaSwgdGFzayk7XG4gICAgICAgIHRoaXMucGVuYWx0eV9zdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5wZW5hbHR5X3N0YXJ0X3BvaW50ID0gbmV3IERhdGUoKS5nZXRUaW1lKCkudmFsdWVPZigpO1xuXG4gICAgICAgIHRhc2suZG9fcHJpbnRfZXJyb3JfbWVzc2FnZSh0aGlzLmlucHV0X3R5cGUuZ2V0X2dpdmVuX2Fuc3dlcihpKSk7XG4gICAgfVxuXG4gICAgZGVsZXRlX3BlbmFsdHkoKSB7XG4gICAgICAgIHRoaXMucGVuYWx0eV9zdGFydGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMucGVuYWx0eV9zdGFydF9wb2ludCA9IG51bGw7XG4gICAgfVxuXG4gICAgcGVuYWx0eV9pc19vdmVyKCkge1xuICAgICAgICBsZXQgZGlmZiA9IChuZXcgRGF0ZSgpLmdldFRpbWUoKS52YWx1ZU9mKCkpLXRoaXMuc3RhcnRfdGltZTtcbiAgICAgICAgcmV0dXJuICF0aGlzLnBlbmFsdHlfc3RhcnRlZCB8fCBkaWZmID49IHRoaXMucGVuYWx0eV9taWxpc2Vjb25kcztcbiAgICB9XG5cbiAgICBzdGFydF9tZWFzdXJlbWVudCh0YXNrOiBUYXNrKSB7XG4gICAgICAgIHN1cGVyLnN0YXJ0X21lYXN1cmVtZW50KHRhc2spO1xuICAgICAgICB0aGlzLmRlbGV0ZV9wZW5hbHR5KCk7XG4gICAgfVxuXG59XG5cblxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgRXhwZXJpbWVudF9JbnB1dF9UeXBlIHtcblxuICAgIG91dHB1dF93cml0ZXI6IEV4cGVyaW1lbnRfT3V0cHV0X1dyaXRlcjtcbiAgICBhYnN0cmFjdCBhY2NlcHRlZF9yZXNwb25zZXMoKTpzdHJpbmdbXTtcbiAgICBhYnN0cmFjdCBnaXZlbl9hbnN3ZXIoa2V5X3ByZXNzZWQ6IHN0cmluZyk7XG5cbiAgICBjb25zdHJ1Y3RvcihvdXRwdXRfd3JpdGVyOiBFeHBlcmltZW50X091dHB1dF9Xcml0ZXIpIHtcbiAgICAgICAgdGhpcy5vdXRwdXRfd3JpdGVyID0gb3V0cHV0X3dyaXRlcjtcbiAgICB9XG5cbiAgICBwcmludF9pbnB1dF9yZXF1ZXN0KCkge1xuICAgICAgICB0aGlzLm91dHB1dF93cml0ZXIuYXNrX2Zvcl9pbnB1dCgpO1xuICAgIH1cblxuICAgIGdldF9naXZlbl9hbnN3ZXIoaW5wdXRfc3RyaW5nOiBzdHJpbmcpIHtcbiAgICAgICAgbGV0IHZhbHVlID0gdGhpcy5vdXRwdXRfd3JpdGVyLmdldF9naXZlbl9hbnN3ZXIoaW5wdXRfc3RyaW5nKTtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEtleV9QcmVzc2luZyBleHRlbmRzIEV4cGVyaW1lbnRfSW5wdXRfVHlwZSB7XG5cbiAgICBhY2NlcHRlZF9rZXlzOiBzdHJpbmdbXTtcblxuICAgIGNvbnN0cnVjdG9yKGFjY2VwdGVkX2tleXM6IHN0cmluZ1tdLCBvdXRwdXRfd3JpdGVyOiBFeHBlcmltZW50X091dHB1dF9Xcml0ZXIpIHtcbiAgICAgICAgc3VwZXIob3V0cHV0X3dyaXRlcik7XG4gICAgICAgIHRoaXMuYWNjZXB0ZWRfa2V5cyA9IGFjY2VwdGVkX2tleXM7XG4gICAgfVxuXG4gICAgYWNjZXB0ZWRfcmVzcG9uc2VzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hY2NlcHRlZF9rZXlzO1xuICAgIH1cblxuICAgIGdpdmVuX2Fuc3dlcihrZXlfcHJlc3NlZDogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBrZXlfcHJlc3NlZDtcbiAgICB9XG5cbiAgICBwcmludF9pbnB1dF9yZXF1ZXN0KCkge1xuICAgICAgICAvLyBJIGFtIGEga2V5Li4uLm5vIG5lZWQgZm9yIGlucHV0IGZpZWxkc1xuICAgIH1cblxuICAgIGdldF9naXZlbl9hbnN3ZXIoaW5wdXRfc3RyaW5nOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0X3N0cmluZztcbiAgICB9XG5cbn1cblxuZXhwb3J0IGNsYXNzIEZyZWVfVGV4dF9Vc2VyX0lucHV0X0V4cGVyaW1lbnQgZXh0ZW5kcyBFeHBlcmltZW50X0lucHV0X1R5cGUge1xuXG4gICAgY29uc3RydWN0b3Iob3V0cHV0X3dyaXRlcjogRXhwZXJpbWVudF9PdXRwdXRfV3JpdGVyKSB7XG4gICAgICAgIHN1cGVyKG91dHB1dF93cml0ZXIpO1xuICAgIH1cblxuICAgIGFjY2VwdGVkX3Jlc3BvbnNlcygpIHtcbiAgICAgICAgcmV0dXJuIFtcIkVudGVyXCJdO1xuICAgIH1cblxuICAgIGdpdmVuX2Fuc3dlcihrZXlfcHJlc3NlZDogc3RyaW5nKSB7fVxuXG4gICAgcHJpbnRfaW5wdXRfcmVxdWVzdCgpIHtcbiAgICAgICAgdGhpcy5vdXRwdXRfd3JpdGVyLmFza19mb3JfaW5wdXQoKTtcbiAgICB9XG5cbn1cblxuZXhwb3J0IGNsYXNzIEZyZWVfVGV4dF9Vc2VyX0lucHV0X0V4cGVyaW1lbnRfV2l0aF9QcmVQb3N0IGV4dGVuZHMgRXhwZXJpbWVudF9JbnB1dF9UeXBlIHtcblxuICAgIGNvbnN0cnVjdG9yKG91dHB1dF93cml0ZXI6IEV4cGVyaW1lbnRfT3V0cHV0X1dyaXRlciwgcHJlOiBzdHJpbmcsIHBvc3Q6c3RyaW5nKSB7XG4gICAgICAgIHN1cGVyKG91dHB1dF93cml0ZXIpO1xuICAgIH1cblxuICAgIGFjY2VwdGVkX3Jlc3BvbnNlcygpIHtcbiAgICAgICAgcmV0dXJuIFtcIkVudGVyXCJdO1xuICAgIH1cblxuICAgIGdpdmVuX2Fuc3dlcihrZXlfcHJlc3NlZDogc3RyaW5nKSB7fVxuXG4gICAgcHJpbnRfaW5wdXRfcmVxdWVzdCgpIHtcbiAgICAgICAgdGhpcy5vdXRwdXRfd3JpdGVyLmFza19mb3JfaW5wdXQoKTtcbiAgICB9XG5cbn1cblxuY2xhc3MgX1JhbmRvbSB7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc2VlZHJhbmRvbSgnMTIzNDU2Nzg5MCcsIHsgZ2xvYmFsOiB0cnVlIH0pO1xuICAgIH1cbiAgICBuZXdfcmFuZG9tX2ludGVnZXIodXBwZXJfbGltaXQ6IG51bWJlcik6IG51bWJlciB7XG4gICAgICAgIHJldHVybiBNYXRoLnRydW5jKHVwcGVyX2xpbWl0ICogTWF0aC5yYW5kb20oKSk7XG4gICAgfVxuXG4gICAgc2V0X3NlZWQoc2VlZDogc3RyaW5nKSB7XG4gICAgICAgIHNlZWRyYW5kb20oc2VlZCwgeyBnbG9iYWw6IHRydWUgfSk7XG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgUmFuZG9tID0gbmV3IF9SYW5kb20oKTtcblxuZXhwb3J0IGZ1bmN0aW9uIFNFVF9TRUVEKHNlZWQ6IHN0cmluZykge1xuICAgIFJhbmRvbS5zZXRfc2VlZChzZWVkKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJhbmRvbV9pbnRlZ2VyX3VwX3RvX2V4Y2x1ZGluZyh1cHBlcl9saW1pdDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gUmFuZG9tLm5ld19yYW5kb21faW50ZWdlcih1cHBlcl9saW1pdCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkb19yYW5kb21fYXJyYXlfc29ydDxUPihhcnJheTpUW10pOlRbXSB7XG4gICAgbGV0IGNvcHkgPSBbLi4uYXJyYXldO1xuICAgIGxldCByZXN1bHQgPSBbXTtcbiAgICB3aGlsZShjb3B5Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmVzdWx0LnB1c2goY29weS5zcGxpY2UocmFuZG9tX2ludGVnZXJfdXBfdG9fZXhjbHVkaW5nKGNvcHkubGVuZ3RoKSwgMSlbMF0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmFuZG9tX2FycmF5X2VsZW1lbnRfYW5kX3JlbW92ZTxUPihhcnJheTpUW10pOlQge1xuICAgIGxldCBwb3NpdGlvbiA9IHJhbmRvbV9pbnRlZ2VyX3VwX3RvX2V4Y2x1ZGluZyhhcnJheS5sZW5ndGgpO1xuICAgIGxldCByZXQgPSBhcnJheVtwb3NpdGlvbl07XG4gICAgYXJyYXkuc3BsaWNlKHBvc2l0aW9uLCAxKTtcbiAgICByZXR1cm4gcmV0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmFuZG9tX2FycmF5X2VsZW1lbnQ8VD4oYXJyYXk6VFtdKTpUIHtcbiAgICByZXR1cm4gYXJyYXlbcmFuZG9tX2ludGVnZXJfdXBfdG9fZXhjbHVkaW5nKGFycmF5Lmxlbmd0aCldO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmFuZG9tX2FycmF5X2VsZW1lbnRfd2l0aG91dDxUPihhcnJheTpUW10sIGV4Y2VwdGlvbnMpOlQge1xuICAgICAgICBsZXQgY29weSA9IGFycmF5LmZpbHRlciggZSA9PiAhZXhjZXB0aW9ucy5pbmNsdWRlcyhlKSApO1xuICAgICAgICByZXR1cm4gcmFuZG9tX2FycmF5X2VsZW1lbnQoY29weSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByYW5kb21fYXJyYXlfZWxlbWVudHNfd2l0aG91dF9yZXBldGl0aW9uczxUPihhcnJheTpUW10sIG51bWJlcl9vZl9lbGVtZW50c190b19jaG9zZTogbnVtYmVyKTpUW10ge1xuICAgIGxldCByYW5kb21seV9zb3J0ZWRfYXJyYXkgPSBkb19yYW5kb21fYXJyYXlfc29ydChhcnJheSk7XG4gICAgcmV0dXJuIHJhbmRvbWx5X3NvcnRlZF9hcnJheS5zbGljZSgwLCBudW1iZXJfb2ZfZWxlbWVudHNfdG9fY2hvc2UpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gIHJhbmRvbV9sb3dlcl9jYXNlX2xldHRlcigpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSg5NyArIHJhbmRvbV9pbnRlZ2VyX3VwX3RvX2V4Y2x1ZGluZygyNikpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gIHJhbmRvbV9sb3dlcl9jYXNlX2xldHRlcl9leGNlcHQobGV0dGVyczpzdHJpbmdbXSk6c3RyaW5nIHtcbiAgICB3aGlsZSh0cnVlKSB7XG4gICAgICAgIGxldCByZXQgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDk3ICsgcmFuZG9tX2ludGVnZXJfdXBfdG9fZXhjbHVkaW5nKDI2KSk7XG4gICAgICAgIGlmKCFsZXR0ZXJzLmluY2x1ZGVzKHJldCkpXG4gICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uICByYW5kb21fdXBwZXJfY2FzZV9sZXR0ZXJfZXhjZXB0KGxldHRlcnM6c3RyaW5nW10pOnN0cmluZyB7XG4gICAgd2hpbGUodHJ1ZSkge1xuICAgICAgICBsZXQgcmV0ID0gU3RyaW5nLmZyb21DaGFyQ29kZSg5NyArIHJhbmRvbV9pbnRlZ2VyX3VwX3RvX2V4Y2x1ZGluZygyNikpLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgIGlmKCFsZXR0ZXJzLmluY2x1ZGVzKHJldCkpXG4gICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgIH1cbn1cblxuXG4vLyBUaGlzIGludm9jYXRpb24ganVzdCBtYWtlcyBzdXJlIHRoYXQgUkFORE9NIGlzIGxvYWRlZFxuc2VlZHJhbmRvbSgpO1xuIiwiaW1wb3J0IHtFeHBlcmltZW50X0RlZmluaXRpb259IGZyb20gXCIuL0V4cGVyaW1lbnRfRGVmaW5pdGlvblwiO1xuaW1wb3J0IHtUcmVhdG1lbnRfQ29tYmluYXRpb259IGZyb20gXCIuL3RyZWF0bWVudHMvVHJlYXRtZW50X0NvbWJpbmF0aW9uXCI7XG5cbmV4cG9ydCBjbGFzcyBUYXNrIHtcblxuICAgIHRyZWF0bWVudF9jb21iaW5hdGlvbjogVHJlYXRtZW50X0NvbWJpbmF0aW9uO1xuICAgIGV4cGVjdGVkX2Fuc3dlcjogc3RyaW5nID0gXCJcIjtcbiAgICBnaXZlbl9hbnN3ZXI6IHN0cmluZyA9IFwiXCI7XG4gICAgcmVxdWlyZWRfbWlsbGlzZWNvbmRzID0gbnVsbDtcbiAgICB0YXNrX251bWJlcl9pbl9leGVjdXRpb246IG51bWJlciA9IC0xO1xuICAgIGV4cGVyaW1lbnRfZGVmaW5pdGlvbjogRXhwZXJpbWVudF9EZWZpbml0aW9uO1xuICAgIGludmFsaWRfYW5zd2VycyA9IFtdO1xuICAgIGlzX3RyYWluaW5nOmJvb2xlYW4gPSBmYWxzZTtcbiAgICBoYXNfcHJlX3Rhc2tfZGVzY3JpcHRpb246IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIGNvbnN0cnVjdG9yKHRjOiBUcmVhdG1lbnRfQ29tYmluYXRpb24sIGV4cGVyaW1lbnRfZGVmaW5pdGlvbjogRXhwZXJpbWVudF9EZWZpbml0aW9uLCB0ZXh0OiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy50cmVhdG1lbnRfY29tYmluYXRpb24gPSB0YztcbiAgICAgICAgdGhpcy5leHBlcmltZW50X2RlZmluaXRpb24gPSBleHBlcmltZW50X2RlZmluaXRpb247XG4gICAgICAgIC8vIHRoaXMuY29kZV9zdHJpbmcodGV4dCk7XG4gICAgfVxuXG4gICAgZG9fcHJpbnRfdGFzazogKCk9PnZvaWQgPSAoKSA9PiB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpO1xuICAgIH1cblxuICAgIGRvX3ByaW50X3ByZV90YXNrOiAoKT0+dm9pZCA9ICgpID0+IHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIik7XG4gICAgfVxuXG4gICAgZG9fcHJpbnRfZXJyb3JfbWVzc2FnZTooaW5wdXQ6c3RyaW5nKT0+dm9pZCA9ICgpID0+IHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIik7XG4gICAgfVxuXG4gICAgYWNjZXB0c19hbnN3ZXJfZnVuY3Rpb24gPSAoYW5zd2VyOnN0cmluZykgPT4gdHJ1ZTtcbiAgICBhY2NlcHRzX2Fuc3dlcihpbnB1dDpzdHJpbmcpIHtcbiAgICAgICAgbGV0IGFuc3dlciA9IHRoaXMuZXhwZXJpbWVudF9kZWZpbml0aW9uLm1lYXN1cmVtZW50LmdldF9naXZlbl9hbnN3ZXIoaW5wdXQpO1xuICAgICAgICByZXR1cm4gdGhpcy5hY2NlcHRzX2Fuc3dlcl9mdW5jdGlvbihhbnN3ZXIpO1xuICAgIH1cblxuICAgIG5leHRfdGFzaygpOlRhc2sge1xuICAgICAgICBpZih0aGlzLnRhc2tfbnVtYmVyX2luX2V4ZWN1dGlvbjx0aGlzLmV4cGVyaW1lbnRfZGVmaW5pdGlvbi50YXNrcy5sZW5ndGgpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5leHBlcmltZW50X2RlZmluaXRpb24udGFza3NbdGhpcy50YXNrX251bWJlcl9pbl9leGVjdXRpb25dO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBodG1sX3N0cmluZ193aXRoX2NtZChodG1sX3N0cmluZzogc3RyaW5nLCBjbWQ6ICgpPT52b2lkKSB7XG4gICAgICAgIC8vIHRoaXMud3JpdGVfYWN0aW9uID0gKHdyaXRlcjogQXV0b21hdGFfSU8pID0+IHtcbiAgICAgICAgLy8gICAgIHdyaXRlci53cml0ZShBVVRPTUFUQV9PVVRQVVRfV1JJVEVSX0FDVElPTi5PVkVSV1JJVEUsIEFVVE9NQVRBX09VVFBVVF9XUklURVJfVEFHUy5TVEFHRSwgaHRtbF9saW5lKGh0bWxfc3RyaW5nKSk7XG4gICAgICAgIC8vICAgICBjbWQoKTtcbiAgICAgICAgLy8gfVxuICAgIH1cblxuICAgIGh0bWxfbm9kZV93aXRoX2NtZChlbGVtZW50OiBhbnksIGNtZDogKCk9PnZvaWQpIHtcbiAgICAgICAgLy8gdGhpcy53cml0ZV9hY3Rpb24gPSAod3JpdGVyOiBBdXRvbWF0YV9JTykgPT4ge1xuICAgICAgICAvLyAgICAgd3JpdGVyLndyaXRlKEFVVE9NQVRBX09VVFBVVF9XUklURVJfQUNUSU9OLk9WRVJXUklURSwgQVVUT01BVEFfT1VUUFVUX1dSSVRFUl9UQUdTLlNUQUdFLCBodG1sX25vZGUoZWxlbWVudCkpO1xuICAgICAgICAvLyAgICAgY21kKCk7XG4gICAgICAgIC8vIH1cbiAgICB9XG4gICAgYWZ0ZXJfdGFza19zdHJpbmdfY29uc3RydWN0b3IoYV9zdHJpbmdfY29uc3RydWN0b3I6ICgpID0+IHN0cmluZykge1xuICAgICAgICAvLyB0aGlzLmFmdGVyX3Rhc2tfd3JpdGVfYWN0aW9uID0gKCkgPT4gKHdyaXRlcjogQXV0b21hdGFfSU8pID0+d3JpdGVyLndyaXRlKEFVVE9NQVRBX09VVFBVVF9XUklURVJfQUNUSU9OLkFQUEVORCwgQVVUT01BVEFfT1VUUFVUX1dSSVRFUl9UQUdTLlNUQUdFLCB0ZXh0X2xpbmUoYV9zdHJpbmdfY29uc3RydWN0b3IoKSkpO1xuICAgIH1cblxuICAgIGRvX3ByaW50X2FmdGVyX3Rhc2tfaW5mb3JtYXRpb246ICgpPT52b2lkID0gKCkgPT4ge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKTtcbiAgICB9XG5cbiAgICBwcmludF90YXNrKCkge1xuICAgICAgICB0aGlzLmRvX3ByaW50X3Rhc2soKTtcbiAgICAgICAgdGhpcy5wcmludF9pbnB1dF9yZXF1ZXN0KCk7XG4gICAgfVxuXG4gICAgcHJpbnRfcHJlX3Rhc2tfaW5mbygpIHtcbiAgICAgICAgdGhpcy5kb19wcmludF9wcmVfdGFzaygpO1xuICAgIH1cblxuICAgIHByaXZhdGUgcHJpbnRfaW5wdXRfcmVxdWVzdCgpIHtcbiAgICAgICAgdGhpcy5leHBlcmltZW50X2RlZmluaXRpb24ubWVhc3VyZW1lbnQuaW5wdXRfdHlwZS5wcmludF9pbnB1dF9yZXF1ZXN0KCk7XG4gICAgfVxuXG4gICAgdHJlYXRtZW50X3ZhbHVlKHRyZWF0bWVudF9uYW1lOiBzdHJpbmcpIHtcblxuICAgICAgICBmb3IobGV0IHRyZWF0bWVudCBvZiB0aGlzLnRyZWF0bWVudF9jb21iaW5hdGlvbi50cmVhdG1lbnRfY29tYmluYXRpb24pXG4gICAgICAgICAgICBpZih0cmVhdG1lbnQudmFyaWFibGUubmFtZT09PXRyZWF0bWVudF9uYW1lKVxuICAgICAgICAgICAgICAgIHJldHVybiB0cmVhdG1lbnQudmFsdWU7XG5cbiAgICAgICAgdGhyb3cgXCJVbmtub3duIHRyZWF0bWVudDogXCIgKyB0cmVhdG1lbnRfbmFtZTtcbiAgICB9XG5cbiAgICBzZXRfY29tcHV0ZWRfdmFyaWFibGVfdmFsdWUodmFyaWFibGVfbmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKSB7XG5cbiAgICAgICAgZm9yKGxldCB0cmVhdG1lbnQgb2YgdGhpcy50cmVhdG1lbnRfY29tYmluYXRpb24udHJlYXRtZW50X2NvbWJpbmF0aW9uKVxuICAgICAgICAgICAgaWYodHJlYXRtZW50LnZhcmlhYmxlLm5hbWU9PT12YXJpYWJsZV9uYW1lKSB7XG4gICAgICAgICAgICAgICAgdHJlYXRtZW50LnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIHRocm93IFwiVW5rbm93biB0cmVhdG1lbnQ6IFwiICsgdmFyaWFibGVfbmFtZTtcbiAgICB9XG59XG4iLCJpbXBvcnQgdHlwZSB7SW5kZXBlbmRlbnRfVmFyaWFibGV9IGZyb20gXCIuL0luZGVwZW5kZW50X1ZhcmlhYmxlXCI7XG5pbXBvcnQge1RyZWF0bWVudF9Db21iaW5hdGlvbn0gZnJvbSBcIi4vVHJlYXRtZW50X0NvbWJpbmF0aW9uXCI7XG5pbXBvcnQge1Rhc2t9IGZyb20gXCIuLi9UYXNrXCI7XG5pbXBvcnQge0V4cGVyaW1lbnRfRGVmaW5pdGlvbn0gZnJvbSBcIi4uL0V4cGVyaW1lbnRfRGVmaW5pdGlvblwiO1xuaW1wb3J0IHtkb19yYW5kb21fYXJyYXlfc29ydH0gZnJvbSBcIi4uL0V4cGVyaW1lbnRhdGlvblwiO1xuaW1wb3J0IHtJbmRlcGVuZGVudF9WYXJpYWJsZXN9IGZyb20gXCIuL0luZGVwZW5kZW50X1ZhcmlhYmxlc1wiO1xuXG4vKipcbiAqIEFsbCBleHBlcmltZW50IGRlZmluaXRpb25zIGNvbnRhaW4gdGhlIHRyZWF0bWVudCBjb21iaW5hdGlvbnMgKGluY2x1ZGluZyByZXBldGl0aW9ucylcbiAqL1xuZXhwb3J0IGNsYXNzIFRyZWF0bWVudHNfQ29tYmluYXRvciB7XG5cbiAgICB2YXJpYWJsZXM6IEluZGVwZW5kZW50X1ZhcmlhYmxlcztcbiAgICByZXBldGl0aW9uczogbnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3IodmFyaWFibGVzOiBJbmRlcGVuZGVudF9WYXJpYWJsZXMsIHJlcGV0aXRpb25zOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy52YXJpYWJsZXMgPSB2YXJpYWJsZXM7XG4gICAgICAgIHRoaXMucmVwZXRpdGlvbnMgPSByZXBldGl0aW9ucztcbiAgICB9XG5cbiAgICBjbG9uZSgpOiBUcmVhdG1lbnRzX0NvbWJpbmF0b3Ige1xuICAgICAgICByZXR1cm4gbmV3IFRyZWF0bWVudHNfQ29tYmluYXRvcih0aGlzLnZhcmlhYmxlcywgdGhpcy5yZXBldGl0aW9ucyk7XG4gICAgfVxuXG4gICAgY3JlYXRlX3RyZWF0bWVudF9jb21iaW5hdGlvbnMoKTogVHJlYXRtZW50X0NvbWJpbmF0aW9uW10ge1xuICAgICAgICBsZXQgdHJlYXRtZW50X2NvbWJpbmF0aW9ucyA9IFtdO1xuICAgICAgICBmb3IobGV0IHI9MDsgcjx0aGlzLnJlcGV0aXRpb25zOyByKyspIHtcbiAgICAgICAgICAgIHRyZWF0bWVudF9jb21iaW5hdGlvbnMgPSB0cmVhdG1lbnRfY29tYmluYXRpb25zLmNvbmNhdCh0aGlzLnZhcmlhYmxlcy5jcmVhdGVfdHJlYXRtZW50X2NvbWJpbmF0aW9ucygpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJlYXRtZW50X2NvbWJpbmF0aW9ucztcbiAgICB9XG5cbiAgICBjcmVhdGVfdGFza3MoZXhwZXJpbWVudF9kZWZpbml0aW9uOiBFeHBlcmltZW50X0RlZmluaXRpb24pOlRhc2tbXSB7XG4gICAgICAgIGxldCB0YXNrcyA9IFtdO1xuICAgICAgICBmb3IgKGxldCB0cmVhdG1lbnRfY29tYmluYXRpb24gb2YgdGhpcy5jcmVhdGVfdHJlYXRtZW50X2NvbWJpbmF0aW9ucygpKSB7XG4gICAgICAgICAgICBsZXQgdGFzazogVGFzayA9IG5ldyBUYXNrKHRyZWF0bWVudF9jb21iaW5hdGlvbi5jbG9uZSgpLCBleHBlcmltZW50X2RlZmluaXRpb24sIFwiXCIpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBleHBlcmltZW50X2RlZmluaXRpb24uZXhwZXJpbWVudF9kZWZpbml0aW9uX3Rhc2tfY3JlYXRvcih0YXNrKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJoYWx0XCIpO1xuICAgICAgICAgICAgICAgIGV4cGVyaW1lbnRfZGVmaW5pdGlvbi5leHBlcmltZW50X2RlZmluaXRpb25fdGFza19jcmVhdG9yKHRhc2spXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0YXNrLmlzX3RyYWluaW5nID0gZXhwZXJpbWVudF9kZWZpbml0aW9uLmlzX3RyYWluaW5nO1xuICAgICAgICAgICAgdGFza3MucHVzaCh0YXNrKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZG9fcmFuZG9tX2FycmF5X3NvcnQodGFza3MpO1xuICAgIH1cblxuICAgIGdldF92YXJpYWJsZV9uYW1lZCh2YXJfbmFtZTpzdHJpbmcpOkluZGVwZW5kZW50X1ZhcmlhYmxlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFyaWFibGVzLmdldF92YXJpYWJsZV9uYW1lZCh2YXJfbmFtZSk7XG4gICAgfVxuXG4vKlxuICAgICAgICBmb3IobGV0IHYgb2YgdGhpcy52YXJpYWJsZXMpIHtcbiAgICAgICAgICAgIGlmKHYubmFtZSA9PT0gdmFyX25hbWUpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHY7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgXCJVbmtub3duIGluZGVwZW5kZW50IHZhcmlhYmxlIG5hbWVkOiBcIiArIHZhcl9uYW1lO1xuICovXG5cbn1cbiIsImltcG9ydCB7SW5kZXBlbmRlbnRfVmFyaWFibGV9IGZyb20gXCIuL3RyZWF0bWVudHMvSW5kZXBlbmRlbnRfVmFyaWFibGVcIjtcbmltcG9ydCB7VGFza30gZnJvbSBcIi4vVGFza1wiO1xuaW1wb3J0IHtNZWFzdXJlbWVudF9UeXBlfSBmcm9tIFwiLi9FeHBlcmltZW50YXRpb25cIjtcbmltcG9ydCB7UXVlc3Rpb25uYWlyZV9Gb3J3YXJkZXJ9IGZyb20gXCIuLi9BdXRvbWF0YV9Gb3J3YXJkZXJzL1F1ZXN0aW9ubmFpcmVfRm9yd2FyZGVyXCI7XG5pbXBvcnQge1RyZWF0bWVudHNfQ29tYmluYXRvcn0gZnJvbSBcIi4vdHJlYXRtZW50cy9UcmVhdG1lbnRzX0NvbWJpbmF0b3JcIjtcbmltcG9ydCB7SW5kZXBlbmRlbnRfVmFyaWFibGVzfSBmcm9tIFwiLi90cmVhdG1lbnRzL0luZGVwZW5kZW50X1ZhcmlhYmxlc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gaW5pdCgpe31cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEV4cGVyaW1lbnRfRGVmaW5pdGlvbiB7XG5cbiAgICBleHBlcmltZW50X25hbWU6IHN0cmluZztcbiAgICBpc190cmFpbmluZzogYm9vbGVhbjtcblxuICAgIHZhcmlhYmxlczogSW5kZXBlbmRlbnRfVmFyaWFibGVzO1xuICAgIHF1ZXN0aW9ubmFpcmVzOlF1ZXN0aW9ubmFpcmVfRm9yd2FyZGVyW10gPSBbXTtcbiAgICBtZWFzdXJlbWVudDpNZWFzdXJlbWVudF9UeXBlO1xuICAgIHRyZWF0bWVudHNfY29tYmluYXRvcjogVHJlYXRtZW50c19Db21iaW5hdG9yO1xuXG4gICAgdGFza3M6IFRhc2tbXSA9IFtdO1xuXG4gICAgZXhwZXJpbWVudF9kZWZpbml0aW9uX3Rhc2tfY3JlYXRvcjogKFRhc2s6IFRhc2spID0+IHZvaWQ7XG5cbiAgICBjb25zdHJ1Y3RvcihleHBlcmltZW50X25hbWU6IHN0cmluZyxcbiAgICAgICAgICAgICAgICBpc190cmFpbmluZzogYm9vbGVhbixcbiAgICAgICAgICAgICAgICB0cmVhdG1lbnRzX2NvbWJpbmF0b3I6IFRyZWF0bWVudHNfQ29tYmluYXRvcixcbiAgICAgICAgICAgICAgICB2YXJpYWJsZXM6IEluZGVwZW5kZW50X1ZhcmlhYmxlcyxcbiAgICAgICAgICAgICAgICByZXBldGl0aW9uczogbnVtYmVyLFxuICAgICAgICAgICAgICAgIG1lYXN1cmVtZW50Ok1lYXN1cmVtZW50X1R5cGUsXG4gICAgICAgICAgICAgICAgdGFza19jcmVhdG9yOiAodGFzazogVGFzaykgPT4gdm9pZClcbiAgICB7XG4gICAgICAgIHRoaXMuZXhwZXJpbWVudF9uYW1lID0gZXhwZXJpbWVudF9uYW1lO1xuICAgICAgICB0aGlzLmlzX3RyYWluaW5nID0gaXNfdHJhaW5pbmc7XG4gICAgICAgIHRoaXMudGVtcGxhdGUgPSB7ZXhwZXJpbWVudF9uYW1lOiBleHBlcmltZW50X25hbWUsIHZhcmlhYmxlczogdmFyaWFibGVzLCByZXBldGl0aW9uczogcmVwZXRpdGlvbnMsIHRhc2tfY3JlYXRvcjogdGFza19jcmVhdG9yfTtcbiAgICAgICAgdGhpcy50cmVhdG1lbnRzX2NvbWJpbmF0b3IgPSB0cmVhdG1lbnRzX2NvbWJpbmF0b3I7XG4gICAgICAgIHRoaXMudmFyaWFibGVzID0gdmFyaWFibGVzO1xuICAgICAgICB0aGlzLm1lYXN1cmVtZW50ID0gbWVhc3VyZW1lbnQ7XG4gICAgICAgIHRoaXMuZXhwZXJpbWVudF9kZWZpbml0aW9uX3Rhc2tfY3JlYXRvciA9IHRhc2tfY3JlYXRvcjtcbiAgICB9XG5cbiAgICB0ZW1wbGF0ZTogeyAgZXhwZXJpbWVudF9uYW1lOiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgIHZhcmlhYmxlczogIEluZGVwZW5kZW50X1ZhcmlhYmxlcyxcbiAgICAgICAgICAgICAgICAgcmVwZXRpdGlvbnM6IG51bWJlcixcbiAgICAgICAgICAgICAgICAgdGFza19jcmVhdG9yOiAodGFzazogVGFzaykgPT4gdm9pZCB9O1xuXG5cblxuICAgIGluaXRfZXhwZXJpbWVudChpc190cmFpbmluZykge1xuICAgICAgICB0aGlzLnRhc2tzID0gdGhpcy50cmVhdG1lbnRzX2NvbWJpbmF0b3IuY3JlYXRlX3Rhc2tzKHRoaXMpO1xuICAgIH1cblxuICAgIGFsbF9pbmRlcGVuZGVudF92YXJpYWJsZXMoKTpJbmRlcGVuZGVudF9WYXJpYWJsZVtdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFyaWFibGVzLmluZGVwZW5kZW50X3ZhcmlhYmxlcztcbiAgICB9XG5cbiAgICBnZW5lcmF0ZV9jc3ZfZGF0YSgpOnN0cmluZ1tdIHtcbiAgICAgICAgbGV0IHJlc3VsdDpzdHJpbmdbXSA9IFtdO1xuICAgICAgICAvLyBsZXQgcXVlc3Rpb25uYWlyZV92YXJpYWJsZXMgPSB0aGlzLnF1ZXN0aW9ubmFpcmVfcmVzcG9uc2VzID0gY2ZnLnF1ZXN0aW9ubmFpcmUuZmlsdGVyKChlOiBJbnB1dF9PYmplY3QpPT4gIShlIGluc3RhbmNlb2YgSW5mb3JtYXRpb24pKS5tYXAoKGU6IElucHV0X09iamVjdCk9PmUudmFyaWFibGUpO1xuICAgICAgICBmb3IobGV0IHF1ZXN0aW9ubmFpcmUgb2YgdGhpcy5xdWVzdGlvbm5haXJlcykge1xuICAgICAgICAgICAgZm9yKGxldCBxdWVzdGlvbiBvZiBxdWVzdGlvbm5haXJlLnF1ZXN0aW9ucykge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKFwiXFxcIlwiICsgcXVlc3Rpb24udmFyaWFibGVfbmFtZSArIFwiXFxcIlwiICsgXCI7XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMudmFyaWFibGVzLnByaW50X3RvX2FycmF5KHJlc3VsdCk7XG4gICAgICAgIHJlc3VsdC5wdXNoKFwibnVtYmVyX29mX2dpdmVuX2Fuc3dlcnM7ZXhwZWN0ZWRfYW5zd2VyO2dpdmVuX2Fuc3dlcjtpc19jb3JyZWN0O3RpbWVfaW5fbWlsbGlzZWNvbmRzO1xcblwiKTtcbiAgICAgICAgZm9yKGxldCB0YXNrIG9mIHRoaXMudGFza3MpIHtcbiAgICAgICAgICAgIGZvcihsZXQgcXVlc3Rpb25uYWlyZSBvZiB0aGlzLnF1ZXN0aW9ubmFpcmVzKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgcXVlc3Rpb24gb2YgcXVlc3Rpb25uYWlyZS5xdWVzdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goXCJcXFwiXCIgKyBxdWVzdGlvbi5hbnN3ZXIgKyBcIlxcXCJcIiArIFwiO1wiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IobGV0IHRyZWF0bWVudF9jb21iaW5hdGlvbiBvZiB0YXNrLnRyZWF0bWVudF9jb21iaW5hdGlvbi50cmVhdG1lbnRfY29tYmluYXRpb24pIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh0cmVhdG1lbnRfY29tYmluYXRpb24udmFsdWUgKyBcIjtcIilcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKCh0YXNrLmludmFsaWRfYW5zd2Vycy5sZW5ndGggKyAxKSArIFwiO1wiKTtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHRhc2suZXhwZWN0ZWRfYW5zd2VyICsgXCI7XCIpO1xuICAgICAgICAgICAgcmVzdWx0LnB1c2godGFzay5naXZlbl9hbnN3ZXIgKyBcIjtcIik7XG4gICAgICAgICAgICByZXN1bHQucHVzaChcIlwiICsgKHRhc2suZ2l2ZW5fYW5zd2VyPT10YXNrLmV4cGVjdGVkX2Fuc3dlcikgKyBcIjtcIik7XG4gICAgICAgICAgICByZXN1bHQucHVzaCh0YXNrLnJlcXVpcmVkX21pbGxpc2Vjb25kcyArIFwiO1wiKTtcblxuICAgICAgICAgICAgdGFzay5pbnZhbGlkX2Fuc3dlcnMuZm9yRWFjaCggKGEpID0+IHJlc3VsdC5wdXNoKGFbMF0gKyBcIjtcIiArIGFbMV0gKyBcIjtcIikpO1xuXG4gICAgICAgICAgICByZXN1bHQucHVzaChcIlxcblwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cbiIsImltcG9ydCB7ZnJvbX0gZnJvbSBcIi4uL0F1dG9tYXRhL1RyYW5zaXRpb25zXCI7XG5pbXBvcnQge0F1dG9tYXRhX0NvbmZpZ3VyYXRvciwgY3JlYXRlX2F1dG9tYXRhfSBmcm9tIFwiLi4vQXV0b21hdGEvQXV0b21hdGFfQ29uZmlndXJhdG9yXCI7XG5pbXBvcnQge0F1dG9tYXRhX1dpdGhfT3V0cHV0X0ZvcndhcmRlcn0gZnJvbSBcIi4vQXV0b21hdGFfV2l0aF9PdXRwdXRfRm9yd2FyZGVyXCI7XG5pbXBvcnQge01lYXN1cmVtZW50X1R5cGUsIE91dHB1dF9Db21tYW5kfSBmcm9tIFwiLi4vRXhwZXJpbWVudGF0aW9uL0V4cGVyaW1lbnRhdGlvblwiO1xuXG5leHBvcnQgZnVuY3Rpb24gaW5pdCgpe31cblxubGV0IFNIT1dfUEFHRT0wO1xubGV0IEZJTklTSEVEX0JPT0s9MTtcbmxldCBFVkVSWVRISU5HX0RPTkUgPSAxO1xuXG5leHBvcnQgY2xhc3MgQm9va19Gb3J3YXJkZXIgZXh0ZW5kcyBBdXRvbWF0YV9XaXRoX091dHB1dF9Gb3J3YXJkZXIge1xuXG4gICAgcGFnZXM6T3V0cHV0X0NvbW1hbmRbXTtcbiAgICBjdXJyZW50X3BhZ2VfbnVtYmVyOm51bWJlciA9IC0xO1xuXG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgYm9va19uYW1lOiBzdHJpbmcsXG4gICAgICAgIHRleHQ6IE91dHB1dF9Db21tYW5kW10sXG4gICAgICAgIG1lYXN1cmVtZW50OiBNZWFzdXJlbWVudF9UeXBlLFxuICAgICkge1xuICAgICAgICBzdXBlcihib29rX25hbWUsIG1lYXN1cmVtZW50LCB0ZXh0WzBdLCB0ZXh0W3RleHQubGVuZ3RoLTFdKTtcblxuICAgICAgICB0aGlzLnBhZ2VzID0gdGV4dDtcbiAgICAgICAgdGhpcy5jcmVhdGVfYXV0b21hdGEoKTtcblxuICAgIH1cblxuICAgIHNldF9wYWdlX2luZGV4KGluZGV4Om51bWJlcikge1xuICAgICAgICB0aGlzLmN1cnJlbnRfcGFnZV9udW1iZXIgPSBpbmRleDtcbiAgICAgICAgdGhpcy5lbXB0eV9zY3JlZW5fYW5kX3Nob3dfaW5zdHJ1Y3Rpb25zKHRoaXMucGFnZXNbdGhpcy5jdXJyZW50X3BhZ2VfbnVtYmVyXSk7XG4gICAgICAgIHRoaXMub3V0cHV0X3dyaXRlcigpLnByaW50X3N0cmluZ190b19zdGF0ZSh0aGlzLmZvcndhcmRlcl9uYW1lKTtcbiAgICAgICAgdGhpcy5vdXRwdXRfd3JpdGVyKCkucHJpbnRfc3RyaW5nX3RvX3BhZ2VfbnVtYmVyKFwiUGFnZSBcIiArICh0aGlzLmN1cnJlbnRfcGFnZV9udW1iZXIgKyAxKSArIFwiIC8gXCIgKyB0aGlzLnBhZ2VzLmxlbmd0aCk7XG5cbiAgICAgICAgbGV0IG5hdmlnYXRpb25fc3RyaW5nID1cIjxocj5cIjtcbiAgICAgICAgaWYoaW5kZXg+MClcbiAgICAgICAgICAgIG5hdmlnYXRpb25fc3RyaW5nICs9IFwiWyYjODU5Ml0gPSBwcmV2aW91cyBwYWdlXCI7XG4gICAgICAgIGlmKGluZGV4PHRoaXMucGFnZXMubGVuZ3RoLTEpXG4gICAgICAgICAgICBuYXZpZ2F0aW9uX3N0cmluZyArPSAobmF2aWdhdGlvbl9zdHJpbmchPVwiPGhyPlwiP1wiPGJyPlwiOlwiXCIpICsgXCJbJiM4NTk0XSA9IG5leHQgcGFnZVwiO1xuXG4gICAgICAgIGlmKGluZGV4PT10aGlzLnBhZ2VzLmxlbmd0aC0xKVxuICAgICAgICAgICAgbmF2aWdhdGlvbl9zdHJpbmcgKz0gKG5hdmlnYXRpb25fc3RyaW5nIT1cIjxocj5cIj9cIjxicj5cIjpcIlwiKSArIFwiW0VudGVyXSA9IEZpbmlzaFwiO1xuXG4gICAgICAgIHRoaXMub3V0cHV0X3dyaXRlcigpLnByaW50X2h0bWxfb25fc3RhZ2UobmF2aWdhdGlvbl9zdHJpbmcpO1xuICAgIH1cblxuICAgIHNldF9hY3RpdmUoKSB7XG4gICAgICAgIHN1cGVyLnNldF9hY3RpdmUoKTtcbiAgICB9XG5cbiAgICBzaG93X2ludHJvKCkge1xuICAgICAgICB0aGlzLnNldF9wYWdlX2luZGV4KDApO1xuICAgIH1cblxuICAgIHNob3dfb3V0cm8oKSB7fVxuXG4gICAgYXV0b21hdGFfY29uZmlndXJhdG9yKCkgIHtcbiAgICAgICAgcmV0dXJuIG5ldyBBdXRvbWF0YV9Db25maWd1cmF0b3IoXG4gICAgICAgICAgICBbU0hPV19QQUdFLCBFVkVSWVRISU5HX0RPTkVdLFxuICAgICAgICAgICAgU0hPV19QQUdFLFxuICAgICAgICAgICAgKCk9Pnt9LFxuICAgICAgICAgICAgdGhpcy50cmFuc2l0aW9ucygpLFxuICAgICAgICAgICAgW0VWRVJZVEhJTkdfRE9ORV1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICB0cmFuc2l0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIGZyb20oU0hPV19QQUdFKS50byhTSE9XX1BBR0UpXG4gICAgICAgICAgICAgICAgLm9uKFwiQXJyb3dSaWdodFwiKVxuICAgICAgICAgICAgICAgIC5pZigoaTpzdHJpbmcpID0+IHRoaXMuY3VycmVudF9wYWdlX251bWJlciA8IHRoaXMucGFnZXMubGVuZ3RoLTEpXG4gICAgICAgICAgICAgICAgLmRvKChpOnN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldF9wYWdlX2luZGV4KCsrdGhpcy5jdXJyZW50X3BhZ2VfbnVtYmVyKTtcbiAgICAgICAgICAgICAgICB9KSxcblxuICAgICAgICAgICAgZnJvbShTSE9XX1BBR0UpLnRvKFNIT1dfUEFHRSlcbiAgICAgICAgICAgICAgICAub24oXCJBcnJvd0xlZnRcIilcbiAgICAgICAgICAgICAgICAuaWYoKGk6c3RyaW5nKSA9PiB0aGlzLmN1cnJlbnRfcGFnZV9udW1iZXIgPiAwKVxuICAgICAgICAgICAgICAgIC5kbygoaTpzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRfcGFnZV9pbmRleCgtLXRoaXMuY3VycmVudF9wYWdlX251bWJlcik7XG4gICAgICAgICAgICAgICAgfSksXG5cbiAgICAgICAgICAgIGZyb20oU0hPV19QQUdFKS50byhFVkVSWVRISU5HX0RPTkUpXG4gICAgICAgICAgICAgICAgLm9uKFwiRW50ZXJcIilcbiAgICAgICAgICAgICAgICAuaWYoKGk6c3RyaW5nKSA9PiB0aGlzLmN1cnJlbnRfcGFnZV9udW1iZXIgPj0gdGhpcy5wYWdlcy5sZW5ndGgtMSlcbiAgICAgICAgICAgICAgICAuZG8oKGk6c3RyaW5nKSA9PiB7fSlcbiAgICAgICAgXTtcbiAgICB9XG5cblxufVxuIiwiaW1wb3J0IHtBdXRvbWF0YV9Gb3J3YXJkZXJ9IGZyb20gXCIuLi9BdXRvbWF0YS9BdXRvbWF0YV9Gb3J3YXJkZXJcIjtcbmltcG9ydCB7Y3JlYXRlX2F1dG9tYXRhfSBmcm9tIFwiLi4vQXV0b21hdGEvQXV0b21hdGFfQ29uZmlndXJhdG9yXCI7XG5pbXBvcnQge2Zyb219IGZyb20gXCIuLi9BdXRvbWF0YS9UcmFuc2l0aW9uc1wiO1xuXG5leHBvcnQgY2xhc3MgU2VxdWVudGlhbF9Gb3J3YXJkZXJfRm9yd2FyZGVyIGV4dGVuZHMgQXV0b21hdGFfRm9yd2FyZGVye1xuXG4gICAgZm9yd2FyZGVyczogQXV0b21hdGFfRm9yd2FyZGVyW107XG4gICAgY3VycmVudF9mb3J3YXJkZXJfaW5kZXggPSAwO1xuXG4gICAgY29uc3RydWN0b3IoZm9yd2FyZGVyczogQXV0b21hdGFfRm9yd2FyZGVyW10pIHtcbiAgICAgICAgc3VwZXIoXCJEZWZhdWx0IFNlcXVlbnRpYWwgRm9yd2FyZGVyIEZvcndhZGVyXCIpO1xuICAgICAgICB0aGlzLmZvcndhcmRlcnMgPSBmb3J3YXJkZXJzO1xuICAgICAgICBmb3IobGV0IGZvcndhcmRlciBvZiBmb3J3YXJkZXJzKSB7XG4gICAgICAgICAgICBmb3J3YXJkZXIuYXV0b21hdGEuYWRkX2ZpbmlzaF9hY3Rpb24oKCk9PnRoaXMuYXV0b21hdGEuaW5wdXQoXCJzd2l0Y2ggdG8gbmV4dCBzdGF0ZVwiKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hdXRvbWF0YSA9IGNyZWF0ZV9hdXRvbWF0YShcbiAgICAgICAgICAgIFswLCAxXSxcbiAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAoKSA9PiB7fSxcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICBmcm9tKDApLnRvKDApXG4gICAgICAgICAgICAgICAgICAgIC5vbihcInN3aXRjaCB0byBuZXh0IHN0YXRlXCIpXG4gICAgICAgICAgICAgICAgICAgIC5pZigoKSA9PiB0aGlzLmN1cnJlbnRfZm9yd2FyZGVyX2luZGV4IDwgdGhpcy5mb3J3YXJkZXJzLmxlbmd0aC0xKVxuICAgICAgICAgICAgICAgICAgICAuZG8oKCkgPT4ge3RoaXMuY3VycmVudF9mb3J3YXJkZXJfaW5kZXgrKzsgdGhpcy5jdXJyZW50X2ZvcndhcmRlcigpLnNldF9hY3RpdmUoKX0pLFxuXG4gICAgICAgICAgICAgICAgZnJvbSgwKS50bygxKVxuICAgICAgICAgICAgICAgICAgICAub24oXCJzd2l0Y2ggdG8gbmV4dCBzdGF0ZVwiKVxuICAgICAgICAgICAgICAgICAgICAuaWYoKCkgPT4gdGhpcy5jdXJyZW50X2ZvcndhcmRlcl9pbmRleD09dGhpcy5mb3J3YXJkZXJzLmxlbmd0aC0xKVxuICAgICAgICAgICAgICAgICAgICAuZG8oKCkgPT4ge30pXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgWzFdXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuYXV0b21hdGEuaW5pdGlhbGl6ZSgpO1xuICAgICAgICAvLyB0aGlzLnNldF9hY3RpdmUoKTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJhY3RpdmUgZm9yd2FyZDogXCIgKyB0aGlzLmN1cnJlbnRfZm9yd2FyZGVyKCkuZm9yd2FyZGVyX25hbWUpO1xuICAgIH1cblxuICAgIGlucHV0KGlucHV0OnN0cmluZykge1xuICAgICAgICB0aGlzLmZvcndhcmRlcnNbdGhpcy5jdXJyZW50X2ZvcndhcmRlcl9pbmRleF0uaW5wdXQoaW5wdXQpO1xuICAgIH1cblxuICAgIGlucHV0X3NlcXVlbmNlKGlucHV0X3NlcXVlbmNlOnN0cmluZ1tdKSB7XG4gICAgICAgIGZvcihsZXQgcyBvZiBpbnB1dF9zZXF1ZW5jZSlcbiAgICAgICAgICAgIHRoaXMuaW5wdXQocyk7XG4gICAgfVxuXG4gICAgY3VycmVudF9mb3J3YXJkZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZvcndhcmRlcnNbdGhpcy5jdXJyZW50X2ZvcndhcmRlcl9pbmRleF07XG4gICAgfVxuXG4gICAgc2V0X2FjdGl2ZSgpIHtcbiAgICAgICAgc3VwZXIuc2V0X2FjdGl2ZSgpO1xuICAgICAgICB0aGlzLmN1cnJlbnRfZm9yd2FyZGVyKCkuc2V0X2FjdGl2ZSgpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7VGFza30gZnJvbSBcIi4uL0V4cGVyaW1lbnRhdGlvbi9UYXNrXCI7XG5pbXBvcnQge0F1dG9tYXRhX0NvbmZpZ3VyYXRvcn0gZnJvbSBcIi4uL0F1dG9tYXRhL0F1dG9tYXRhX0NvbmZpZ3VyYXRvclwiO1xuaW1wb3J0IHtmcm9tfSBmcm9tIFwiLi4vQXV0b21hdGEvVHJhbnNpdGlvbnNcIjtcbmltcG9ydCB7RXhwZXJpbWVudF9EZWZpbml0aW9ufSBmcm9tIFwiLi4vRXhwZXJpbWVudGF0aW9uL0V4cGVyaW1lbnRfRGVmaW5pdGlvblwiO1xuaW1wb3J0IHsgQXV0b21hdGFfV2l0aF9PdXRwdXRfRm9yd2FyZGVyIH0gZnJvbSBcIi4vQXV0b21hdGFfV2l0aF9PdXRwdXRfRm9yd2FyZGVyXCI7XG5pbXBvcnQge01lYXN1cmVtZW50X1R5cGUsIE91dHB1dF9Db21tYW5kfSBmcm9tIFwiLi4vRXhwZXJpbWVudGF0aW9uL0V4cGVyaW1lbnRhdGlvblwiO1xuXG5cbmxldCBTSE9XX0lOVFJPPTA7XG5sZXQgU0hPV19QUkVfVEFTS19JTkZPID0gMTtcbmxldCBTSE9XX1RBU0s9MjtcbmxldCBTSE9XX1BFTkFMVFkgPSAzO1xubGV0IFRBU0tfRklOSVNIRUQ9NDtcbmxldCBTSE9XX09VVFJPID0gNTtcbmxldCBFVkVSWVRISU5HX0RPTkUgPSA2O1xuXG5leHBvcnQgY2xhc3MgRXhwZXJpbWVudGF0aW9uX0ZvcndhcmRlciBleHRlbmRzICBBdXRvbWF0YV9XaXRoX091dHB1dF9Gb3J3YXJkZXJ7XG5cbiAgICBjdXJyZW50X3BhZ2VfaW5kZXggPSAtMTtcbiAgICBleHBlcmltZW50X2RlZmluaXRpb246IEV4cGVyaW1lbnRfRGVmaW5pdGlvbjtcblxuICAgIHNob3dfaW50cm8oKSB7XG4gICAgICAgIHRoaXMuZW1wdHlfc2NyZWVuX2FuZF9zaG93X2luc3RydWN0aW9ucyh0aGlzLnByZV9ydW5faW5zdHJ1Y3Rpb25zKTtcbiAgICAgICAgdGhpcy5vdXRwdXRfd3JpdGVyKCkucHJpbnRfZXhwZXJpbWVudF9uYW1lKHRoaXMuZm9yd2FyZGVyX25hbWUpO1xuICAgIH1cblxuICAgIHNob3dfb3V0cm8oKSB7XG4gICAgICAgIHRoaXMuZW1wdHlfc2NyZWVuX2FuZF9zaG93X2luc3RydWN0aW9ucyh0aGlzLnBvc3RfcnVuX2luc3RydWN0aW9ucyk7XG4gICAgfVxuXG4gICAgYXV0b21hdGFfY29uZmlndXJhdG9yKCkgIHtcbiAgICAgICAgcmV0dXJuIG5ldyBBdXRvbWF0YV9Db25maWd1cmF0b3IoXG4gICAgICAgICAgICBbU0hPV19JTlRSTywgU0hPV19QUkVfVEFTS19JTkZPLCBTSE9XX1RBU0ssIFRBU0tfRklOSVNIRUQsIFNIT1dfT1VUUk8sIEVWRVJZVEhJTkdfRE9ORV0sXG4gICAgICAgICAgICBTSE9XX0lOVFJPLFxuICAgICAgICAgICAgKCk9Pnt9LFxuICAgICAgICAgICAgdGhpcy50cmFuc2l0aW9ucygpLFxuICAgICAgICAgICAgW0VWRVJZVEhJTkdfRE9ORV1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBjdXJyZW50X3Rhc2soKTpUYXNrIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXhwZXJpbWVudF9kZWZpbml0aW9uLnRhc2tzW3RoaXMuY3VycmVudF9wYWdlX2luZGV4XSA7XG4gICAgfTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICAgICAgICAgIGV4cGVyaW1lbnRfYXV0b21hdGFfbmFtZTpzdHJpbmcsXG4gICAgICAgICAgICAgICAgcHJlX3J1bl9pbnN0cnVjdGlvbnM6IE91dHB1dF9Db21tYW5kLFxuICAgICAgICAgICAgICAgIHBvc3RfcnVuX2luc3RydWN0aW9uczogT3V0cHV0X0NvbW1hbmQsXG4gICAgICAgICAgICAgICAgZXhwZXJpbWVudF9kZWZpbml0aW9uOiBFeHBlcmltZW50X0RlZmluaXRpb24sXG4gICAgICAgICAgICAgICAgbWVhc3VyZW1lbnQ6IE1lYXN1cmVtZW50X1R5cGVcbiAgICApIHtcblxuICAgICAgICBzdXBlciggIGV4cGVyaW1lbnRfYXV0b21hdGFfbmFtZSxcbiAgICAgICAgICAgICAgICBtZWFzdXJlbWVudCwgcHJlX3J1bl9pbnN0cnVjdGlvbnMsIHBvc3RfcnVuX2luc3RydWN0aW9ucyk7XG5cbiAgICAgICAgdGhpcy5leHBlcmltZW50X2RlZmluaXRpb24gPSBleHBlcmltZW50X2RlZmluaXRpb247XG4gICAgfVxuXG5cblxuICAgIGF1dG9tYXRhX2NvbmZpZ3VyYXRpb24oKSB7XG4gICAgICAgIHJldHVybiBuZXcgQXV0b21hdGFfQ29uZmlndXJhdG9yKFxuICAgICAgICAgICAgW1NIT1dfSU5UUk8sIFNIT1dfUFJFX1RBU0tfSU5GTywgU0hPV19UQVNLLCBUQVNLX0ZJTklTSEVELCBTSE9XX09VVFJPLCBFVkVSWVRISU5HX0RPTkVdLFxuICAgICAgICAgICAgU0hPV19JTlRSTyxcbiAgICAgICAgICAgICgpID0+IHt9LFxuICAgICAgICAgICAgdGhpcy50cmFuc2l0aW9ucygpLFxuICAgICAgICAgICAgW0VWRVJZVEhJTkdfRE9ORV1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICB0cmFuc2l0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIGZyb20oU0hPV19JTlRSTykudG8oU0hPV19UQVNLKVxuICAgICAgICAgICAgICAgIC5vbihcIkVudGVyXCIpXG4gICAgICAgICAgICAgICAgLmlmKChpOnN0cmluZykgPT4gIXRoaXMuZmlyc3RfdGFzaygpLmhhc19wcmVfdGFza19kZXNjcmlwdGlvbilcbiAgICAgICAgICAgICAgICAuZG8oKGk6c3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0X2V4cGVyaW1lbnRfaW5kZXgoMCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWVhc3VyZW1lbnQuc3RhcnRfbWVhc3VyZW1lbnQodGhpcy5jdXJyZW50X3Rhc2soKSk7XG4gICAgICAgICAgICAgICAgfSksXG5cbiAgICAgICAgICAgIGZyb20oU0hPV19JTlRSTykudG8oU0hPV19QUkVfVEFTS19JTkZPKVxuICAgICAgICAgICAgICAgIC5vbihcIkVudGVyXCIpXG4gICAgICAgICAgICAgICAgLmlmKChpOnN0cmluZykgPT4gdGhpcy5maXJzdF90YXNrKCkuaGFzX3ByZV90YXNrX2Rlc2NyaXB0aW9uKVxuICAgICAgICAgICAgICAgIC5kbygoaTpzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRfZXhwZXJpbWVudF9pbmRleCgwKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93X3ByZV90YXNrX2luZm8oKTtcbiAgICAgICAgICAgICAgICB9KSxcblxuICAgICAgICAgICAgZnJvbShTSE9XX0lOVFJPKS50byhTSE9XX09VVFJPKSAvLyBTdGF0ZT0zOiBFeHBlcmltZW50IGRvbmUgLSBqdXN0IHRoZSBtZXNzYWdlIGFmdGVyd2FyZHMgc2hvd25cbiAgICAgICAgICAgICAgICAub24oXCJEZWxldGVcIilcbiAgICAgICAgICAgICAgICAuZG8oKGk6c3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvd19vdXRybygpO1xuICAgICAgICAgICAgICAgIH0pLFxuXG4gICAgICAgICAgICBmcm9tKFNIT1dfUFJFX1RBU0tfSU5GTykudG8oU0hPV19UQVNLKVxuICAgICAgICAgICAgICAgIC5vbihcIkVudGVyXCIpXG4gICAgICAgICAgICAgICAgLmRvKChpOnN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1lYXN1cmVtZW50LnN0YXJ0X21lYXN1cmVtZW50KHRoaXMuY3VycmVudF90YXNrKCkpO1xuICAgICAgICAgICAgICAgIH0pLFxuXG4gICAgICAgICAgICAvLyBUYXNrIFNob3duIC0gSW5jb3JyZWN0IGlucHV0ID0+IFJlbWFpbiBpbiBUYXNrXG4gICAgICAgICAgICBmcm9tKFNIT1dfVEFTSykudG8oU0hPV19UQVNLKVxuICAgICAgICAgICAgICAgIC5vbl9hbnkodGhpcy5tZWFzdXJlbWVudC5hY2NlcHRlZF9yZXNwb25zZXMoKSlcbiAgICAgICAgICAgICAgICAuaWYoKGk6c3RyaW5nKSA9PlxuICAgICAgICAgICAgICAgICAgICAhdGhpcy5jdXJyZW50X3Rhc2soKS5hY2NlcHRzX2Fuc3dlcihpKSAmJiAgIXRoaXMubWVhc3VyZW1lbnQuZGVtYW5kc19wZW5hbHR5KClcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgLmRvKChpOnN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1lYXN1cmVtZW50LmluY29ycmVjdF9yZXNwb25zZShpLCB0aGlzLmN1cnJlbnRfdGFzaygpKTtcbiAgICAgICAgICAgICAgICB9KSxcblxuICAgICAgICAgICAgZnJvbShTSE9XX1RBU0spLnRvKFNIT1dfT1VUUk8pXG4gICAgICAgICAgICAgICAgLm9uKFwiPytDb250cm9sXCIpXG4gICAgICAgICAgICAgICAgLmlmKChpOnN0cmluZykgPT4gdHJ1ZSlcbiAgICAgICAgICAgICAgICAuZG8oKGk6c3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWVhc3VyZW1lbnQuc3RvcF9tZWFzdXJlbWVudChpLCB0aGlzLmN1cnJlbnRfdGFzaygpKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93X291dHJvKCk7XG4gICAgICAgICAgICAgICAgfSksXG5cbiAgICAgICAgICAgIC8vIFNUQVRFIDE9VGFzayBpcyBzaG93biwgMj1JbnB1dCBjb3JyZWN0XG4gICAgICAgICAgICBmcm9tKFNIT1dfVEFTSykudG8oVEFTS19GSU5JU0hFRClcbiAgICAgICAgICAgICAgICAub25fYW55KHRoaXMubWVhc3VyZW1lbnQuYWNjZXB0ZWRfcmVzcG9uc2VzKCkpXG4gICAgICAgICAgICAgICAgLmlmKChpOnN0cmluZykgPT4gICB0aGlzLmN1cnJlbnRfdGFzaygpLmFjY2VwdHNfYW5zd2VyKGkpICYmXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudF9wYWdlX2luZGV4IDwgdGhpcy5leHBlcmltZW50X2RlZmluaXRpb24udGFza3MubGVuZ3RoLTEpXG4gICAgICAgICAgICAgICAgLmRvKChpOnN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1lYXN1cmVtZW50LnN0b3BfbWVhc3VyZW1lbnQoaSwgdGhpcy5jdXJyZW50X3Rhc2soKSk7XG4gICAgICAgICAgICAgICAgfSksXG5cbiAgICAgICAgICAgIGZyb20oU0hPV19UQVNLKS50byhTSE9XX1BFTkFMVFkpXG4gICAgICAgICAgICAgICAgLm9uX2FueSh0aGlzLm1lYXN1cmVtZW50LmFjY2VwdGVkX3Jlc3BvbnNlcygpKVxuICAgICAgICAgICAgICAgIC5pZigoaTpzdHJpbmcpID0+XG4gICAgICAgICAgICAgICAgICAgICF0aGlzLmN1cnJlbnRfdGFzaygpLmFjY2VwdHNfYW5zd2VyKGkpICYmIHRoaXMubWVhc3VyZW1lbnQuZGVtYW5kc19wZW5hbHR5KClcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgLmRvKChpOnN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1lYXN1cmVtZW50LmluY29ycmVjdF9yZXNwb25zZShpLCB0aGlzLmN1cnJlbnRfdGFzaygpKTtcbiAgICAgICAgICAgICAgICB9KSxcblxuICAgICAgICAgICAgZnJvbShTSE9XX1BFTkFMVFkpLnRvKFNIT1dfVEFTSylcbiAgICAgICAgICAgICAgICAub24oXCJFbnRlclwiKVxuICAgICAgICAgICAgICAgIC5pZigoaTpzdHJpbmcpID0+XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWVhc3VyZW1lbnQucGVuYWx0eV9pc19vdmVyKCkpXG4gICAgICAgICAgICAgICAgLmRvKChpOnN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1lYXN1cmVtZW50LnN0YXJ0X21lYXN1cmVtZW50KHRoaXMuY3VycmVudF90YXNrKCkpO1xuICAgICAgICAgICAgICAgIH0pLFxuXG4gICAgICAgICAgICAvLyBCZXR3ZWVuIFRhc2tzIHRvIG5leHQgdGFza1xuICAgICAgICAgICAgZnJvbShUQVNLX0ZJTklTSEVEKS50byhTSE9XX1BSRV9UQVNLX0lORk8pXG4gICAgICAgICAgICAgICAgLm9uKFwiRW50ZXJcIilcbiAgICAgICAgICAgICAgICAuaWYoKGk6c3RyaW5nKSA9PiB0aGlzLmN1cnJlbnRfcGFnZV9pbmRleCA8IHRoaXMuZXhwZXJpbWVudF9kZWZpbml0aW9uLnRhc2tzLmxlbmd0aC0xICYmIHRoaXMubmV4dF90YXNrKCkuaGFzX3ByZV90YXNrX2Rlc2NyaXB0aW9uKVxuICAgICAgICAgICAgICAgIC5kbygoaTpzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmNfY3VycmVudF9leHBlcmltZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvd19wcmVfdGFza19pbmZvKCk7XG4gICAgICAgICAgICAgICAgfSksXG5cbiAgICAgICAgICAgIGZyb20oVEFTS19GSU5JU0hFRCkudG8oU0hPV19UQVNLKVxuICAgICAgICAgICAgICAgIC5vbihcIkVudGVyXCIpXG4gICAgICAgICAgICAgICAgLmlmKChpOnN0cmluZykgPT4gdGhpcy5jdXJyZW50X3BhZ2VfaW5kZXggPCB0aGlzLmV4cGVyaW1lbnRfZGVmaW5pdGlvbi50YXNrcy5sZW5ndGgtMSAmJiAhdGhpcy5uZXh0X3Rhc2soKS5oYXNfcHJlX3Rhc2tfZGVzY3JpcHRpb24pXG4gICAgICAgICAgICAgICAgLmRvKChpOnN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmluY19jdXJyZW50X2V4cGVyaW1lbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tZWFzdXJlbWVudC5zdGFydF9tZWFzdXJlbWVudCh0aGlzLmN1cnJlbnRfdGFzaygpKTtcbiAgICAgICAgICAgICAgICB9KSxcblxuICAgICAgICAgICAgZnJvbShTSE9XX1RBU0spLnRvKFNIT1dfT1VUUk8pIC8vIFN0YXRlPTM6IEV4cGVyaW1lbnQgZG9uZSAtIGp1c3QgdGhlIG1lc3NhZ2UgYWZ0ZXJ3YXJkcyBzaG93blxuICAgICAgICAgICAgICAgIC5vbl9hbnkodGhpcy5tZWFzdXJlbWVudC5hY2NlcHRlZF9yZXNwb25zZXMoKSlcbiAgICAgICAgICAgICAgICAuaWYoKGk6c3RyaW5nKSA9PiB0aGlzLmN1cnJlbnRfdGFzaygpLmFjY2VwdHNfYW5zd2VyKGkpICYmXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudF9wYWdlX2luZGV4ID09IHRoaXMuZXhwZXJpbWVudF9kZWZpbml0aW9uLnRhc2tzLmxlbmd0aC0xKVxuICAgICAgICAgICAgICAgIC5kbygoaTpzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tZWFzdXJlbWVudC5zdG9wX21lYXN1cmVtZW50KGksIHRoaXMuY3VycmVudF90YXNrKCkpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3dfb3V0cm8oKTtcbiAgICAgICAgICAgICAgICB9KSxcblxuICAgICAgICAgICAgZnJvbShTSE9XX09VVFJPKS50byhFVkVSWVRISU5HX0RPTkUpXG4gICAgICAgICAgICAgICAgLm9uKFwiRW50ZXJcIilcbiAgICAgICAgICAgICAgICAuZG8oKGk6c3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBhID0gMTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICBdO1xuICAgIH1cblxuXG4gICAgc2V0X2V4cGVyaW1lbnRfaW5kZXgoaW5kZXg6bnVtYmVyKSB7XG4gICAgICAgIHRoaXMuY3VycmVudF9wYWdlX2luZGV4ID0gaW5kZXg7XG4gICAgICAgIHRoaXMub3V0cHV0X3dyaXRlcigpLnByaW50X3N0cmluZ190b19wYWdlX251bWJlcihcIlRhc2sgXCIgKyAodGhpcy5jdXJyZW50X3BhZ2VfaW5kZXggKyAxKSArIFwiIC8gXCIgKyB0aGlzLmV4cGVyaW1lbnRfZGVmaW5pdGlvbi50YXNrcy5sZW5ndGgpO1xuICAgIH1cblxuICAgIGluY19jdXJyZW50X2V4cGVyaW1lbnQoKSB7XG4gICAgICAgIHRoaXMuc2V0X2V4cGVyaW1lbnRfaW5kZXgoKyt0aGlzLmN1cnJlbnRfcGFnZV9pbmRleCk7XG4gICAgfVxuXG4gICAgaW5pdF9leHBlcmltZW50KCkge1xuICAgICAgICB0aGlzLmV4cGVyaW1lbnRfZGVmaW5pdGlvbi5pbml0X2V4cGVyaW1lbnQoZmFsc2UpO1xuICAgIH1cblxuICAgIHByaXZhdGUgc2hvd19wcmVfdGFza19pbmZvKCkge1xuICAgICAgICB0aGlzLm91dHB1dF93cml0ZXIoKS5jbGVhcl9zdGFnZSgpO1xuICAgICAgICB0aGlzLm91dHB1dF93cml0ZXIoKS5jbGVhcl9lcnJvcigpO1xuICAgICAgICB0aGlzLmN1cnJlbnRfdGFzaygpLnByaW50X3ByZV90YXNrX2luZm8oKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG5leHRfdGFzaygpOlRhc2sge1xuICAgICAgICByZXR1cm4gdGhpcy5leHBlcmltZW50X2RlZmluaXRpb24udGFza3NbdGhpcy5jdXJyZW50X3BhZ2VfaW5kZXggKyAxXSA7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBmaXJzdF90YXNrKCk6VGFzayB7XG4gICAgICAgIHJldHVybiB0aGlzLmV4cGVyaW1lbnRfZGVmaW5pdGlvbi50YXNrc1swXSA7XG4gICAgfVxufVxuIiwiaW1wb3J0IHtBdXRvbWF0YV9Db25maWd1cmF0b3IsIGNyZWF0ZV9hdXRvbWF0YX0gZnJvbSBcIi4uL0F1dG9tYXRhL0F1dG9tYXRhX0NvbmZpZ3VyYXRvclwiO1xuaW1wb3J0IHtmcm9tfSBmcm9tIFwiLi4vQXV0b21hdGEvVHJhbnNpdGlvbnNcIjtcbmltcG9ydCB7RXhwZXJpbWVudGF0aW9uX0ZvcndhcmRlcn0gZnJvbSBcIi4vRXhwZXJpbWVudGF0aW9uX0ZvcndhcmRlclwiO1xuaW1wb3J0IHtNZWFzdXJlbWVudF9UeXBlLCBPdXRwdXRfQ29tbWFuZH0gZnJvbSBcIi4uL0V4cGVyaW1lbnRhdGlvbi9FeHBlcmltZW50YXRpb25cIjtcbmltcG9ydCB7RXhwZXJpbWVudF9EZWZpbml0aW9ufSBmcm9tIFwiLi4vRXhwZXJpbWVudGF0aW9uL0V4cGVyaW1lbnRfRGVmaW5pdGlvblwiO1xuaW1wb3J0IHtUcmFpbmluZ19Db25maWd1cmF0aW9ufSBmcm9tIFwiLi4vRXhwZXJpbWVudGF0aW9uL1RyYWluaW5nX0NvbmZpZ3VyYXRpb25cIjtcblxubGV0IFNIT1dfSU5UUk89MDtcbmxldCBTSE9XX1BSRV9UQVNLX0lORk8gPSAxO1xubGV0IFNIT1dfVEFTSz0yO1xubGV0IFNIT1dfUEVOQUxUWSA9IDM7XG5sZXQgVEFTS19GSU5JU0hFRD00O1xubGV0IFNIT1dfT1VUUk8gPSA1O1xubGV0IEVWRVJZVEhJTkdfRE9ORSA9IDY7XG5cbmxldCBFU0NBUEVEID0gNztcblxuXG5cbmV4cG9ydCBjbGFzcyBUcmFpbmluZ19FeGVjdXRpb25fRm9yd2FyZGVyIGV4dGVuZHMgIEV4cGVyaW1lbnRhdGlvbl9Gb3J3YXJkZXJ7XG5cbiAgICB0cmFpbmluZ19jb25maWd1cmF0aW9uOiBUcmFpbmluZ19Db25maWd1cmF0aW9uO1xuXG4gICAgY29uc3RydWN0b3IocHJlX3J1bl9pbnN0cnVjdGlvbnM6IE91dHB1dF9Db21tYW5kLFxuICAgICAgICAgICAgICAgIHRyYWluaW5nX2NvbmZpZ3VyYXRpb246IFRyYWluaW5nX0NvbmZpZ3VyYXRpb24sXG4gICAgICAgICAgICAgICAgZXhwZXJpbWVudF9kZWZpbml0aW9uOiBFeHBlcmltZW50X0RlZmluaXRpb24sXG4gICAgICAgICAgICAgICAgbWVhc3VyZW1lbnQ6IE1lYXN1cmVtZW50X1R5cGUpXG4gICAge1xuICAgICAgICBzdXBlcihcbiAgICAgICAgICAgIFwiVHJhaW5pbmdcIixcbiAgICAgICAgICAgICgpPT4ge1xuICAgICAgICAgICAgICAgIHByZV9ydW5faW5zdHJ1Y3Rpb25zKCk7XG4gICAgICAgICAgICAgICAgbWVhc3VyZW1lbnQub3V0cHV0X3dyaXRlcigpLnByaW50X2h0bWxfb25fc3RhZ2UoXCI8aHI+XCIgK1xuICAgICAgICAgICAgICAgICAgICBcIlByZXNzIFtFbnRlcl0gdG8gc3RhcnQgdHJhaW5pbmcuXCIpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICgpPT4ge1xuICAgICAgICAgICAgICAgIG1lYXN1cmVtZW50Lm91dHB1dF93cml0ZXIoKS5wcmludF9odG1sX29uX3N0YWdlKFxuICAgICAgICAgICAgICAgICAgICBcIllvdSBmaW5pc2hlZCB0aGUgdHJhaW5pbmcgcGhhc2UuPGhyPlwiICtcbiAgICAgICAgICAgICAgICAgICAgKHRyYWluaW5nX2NvbmZpZ3VyYXRpb24uY2FuX2JlX3JlcGVhdGVkP1wiUGxlYXNlLCBwcmVzcyBbRW50ZXJdIHRvIHJ1biBhZ2FpbiBhIHRyYWluaW5nIHNlc3Npb24uPGJyPlwiOlwiXCIpICtcbiAgICAgICAgICAgICAgICAgICAgXCJQbGVhc2UsIHByZXNzIFtFXSAoY2FwaXRhbCBFLCBpLmUuLCBbc2hpZnRdICsgW2VdKSB0byBlbnRlciB0aGUgZXhwZXJpbWVudCBwaGFzZS5cIlxuICAgICAgICAgICAgICAgICl9LFxuICAgICAgICAgICAgZXhwZXJpbWVudF9kZWZpbml0aW9uLFxuICAgICAgICAgICAgbWVhc3VyZW1lbnQpO1xuXG4gICAgICAgIHRoaXMudHJhaW5pbmdfY29uZmlndXJhdGlvbiA9IHRyYWluaW5nX2NvbmZpZ3VyYXRpb247XG4gICAgfVxuXG4gICAgcHJpbnRfY2FuY2VsX3RleHQoKSB7XG4gICAgICAgIHRoaXMub3V0cHV0X3dyaXRlcigpLmNsZWFyX3N0YWdlKCk7XG4gICAgICAgIHRoaXMub3V0cHV0X3dyaXRlcigpLnByaW50X3N0cmluZ190b19wYWdlX251bWJlcihcIkNhbmNlbGxlZFwiKTtcblxuICAgICAgICBsZXQgbmF2aWdhdGlvbl9zdHJpbmcgPVxuICAgICAgICAgICAgXCJZb3UgY2FuY2VsbGVkIHRoaXMgdHJhaW5pbmcgc2Vzc2lvbi48aHI+XCIgK1xuICAgICAgICAgICAgXCJQcmVzcyBbRW50ZXJdIGlmIHlvdSB3YW50IHRvIHN0YXJ0IGFub3RoZXIgdHJhaW5pbmcgc2Vzc2lvbi48YnI+XCIgK1xuICAgICAgICAgICAgXCJQcmVzcyBbRV0gKGNhcGl0YWwgRSEpIGlmIHlvdSB3YW50IHRvIHN0YXJ0IHdpdGggdGhlIGV4cGVyaW1lbnQuXCJcblxuICAgICAgICB0aGlzLm91dHB1dF93cml0ZXIoKS5wcmludF9odG1sX29uX3N0YWdlKG5hdmlnYXRpb25fc3RyaW5nKTtcbiAgICB9XG5cbiAgICBhdXRvbWF0YV9jb25maWd1cmF0b3IoKSB7XG4gICAgICAgIHJldHVybiBuZXcgQXV0b21hdGFfQ29uZmlndXJhdG9yKFxuICAgICAgICAgICAgW1NIT1dfSU5UUk8sIFNIT1dfUFJFX1RBU0tfSU5GTywgU0hPV19UQVNLLCBTSE9XX1BFTkFMVFksIFRBU0tfRklOSVNIRUQsIFNIT1dfT1VUUk8sIEVWRVJZVEhJTkdfRE9ORSwgRVNDQVBFRF0sXG4gICAgICAgICAgICBTSE9XX0lOVFJPLFxuICAgICAgICAgICAgKCkgPT4ge30sXG4gICAgICAgICAgICB0aGlzLnRyYW5zaXRpb25zKCksXG4gICAgICAgICAgICBbRVZFUllUSElOR19ET05FXVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHRyYW5zaXRpb25zKCkge1xuICAgICAgICBsZXQgZXhwZXJpbWVudF90cmFuc2l0aW9ucyA9IHN1cGVyLnRyYW5zaXRpb25zKCk7XG4gICAgICAgIGxldCB0aGlzX3RyYW5zaXRpb25zID0gW1xuICAgICAgICAgICAgICAgIGZyb20oU0hPV19JTlRSTykudG8oRVNDQVBFRClcbiAgICAgICAgICAgICAgICAgICAgLm9uKFwiRXNjYXBlXCIpXG4gICAgICAgICAgICAgICAgICAgIC5pZigoKSA9PiB0aGlzLnRyYWluaW5nX2NvbmZpZ3VyYXRpb24uY2FuX2JlX2NhbmNlbGxlZClcbiAgICAgICAgICAgICAgICAgICAgLmRvKChpOnN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmludF9jYW5jZWxfdGV4dCgpO1xuICAgICAgICAgICAgICAgICAgICB9KSxcblxuICAgICAgICAgICAgICAgIGZyb20oU0hPV19UQVNLKS50byhFU0NBUEVEKVxuICAgICAgICAgICAgICAgICAgICAub24oXCJFc2NhcGVcIilcbiAgICAgICAgICAgICAgICAgICAgLmlmKCgpID0+IHRoaXMudHJhaW5pbmdfY29uZmlndXJhdGlvbi5jYW5fYmVfY2FuY2VsbGVkKVxuICAgICAgICAgICAgICAgICAgICAuZG8oKGk6c3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByaW50X2NhbmNlbF90ZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuXG4gICAgICAgICAgICAgICAgZnJvbShUQVNLX0ZJTklTSEVEKS50byhFU0NBUEVEKVxuICAgICAgICAgICAgICAgICAgICAub24oXCJFc2NhcGVcIilcbiAgICAgICAgICAgICAgICAgICAgLmlmKCgpID0+IHRoaXMuY3VycmVudF9wYWdlX2luZGV4IDwgdGhpcy5leHBlcmltZW50X2RlZmluaXRpb24udGFza3MubGVuZ3RoLTEgJiYgdGhpcy50cmFpbmluZ19jb25maWd1cmF0aW9uLmNhbl9iZV9jYW5jZWxsZWQpXG4gICAgICAgICAgICAgICAgICAgIC5kbygoaTpzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJpbnRfY2FuY2VsX3RleHQoKTtcbiAgICAgICAgICAgICAgICAgICAgfSksXG5cbiAgICAgICAgICAgICAgICBmcm9tKEVTQ0FQRUQpLnRvKEVWRVJZVEhJTkdfRE9ORSlcbiAgICAgICAgICAgICAgICAgICAgLm9uKFwiRVwiKS5kbygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZHVtbXkgPSAxO1xuICAgICAgICAgICAgICAgICAgICB9KSxcblxuICAgICAgICAgICAgICAgIGZyb20oRVNDQVBFRCkudG8oU0hPV19JTlRSTylcbiAgICAgICAgICAgICAgICAgICAgLm9uKFwiRW50ZXJcIikuZG8oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5leHBlcmltZW50X2RlZmluaXRpb24uaW5pdF9leHBlcmltZW50KHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93X2ludHJvKCk7XG4gICAgICAgICAgICAgICAgfSksXG5cblxuICAgICAgICAgICAgICAgIGZyb20oU0hPV19PVVRSTykudG8oU0hPV19JTlRSTylcbiAgICAgICAgICAgICAgICAgICAgLm9uKFwiRW50ZXJcIilcbiAgICAgICAgICAgICAgICAgICAgLmlmKCgpPT4gdGhpcy50cmFpbmluZ19jb25maWd1cmF0aW9uLmNhbl9iZV9yZXBlYXRlZClcbiAgICAgICAgICAgICAgICAgICAgLmRvKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZXhwZXJpbWVudF9kZWZpbml0aW9uLmluaXRfZXhwZXJpbWVudCh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvd19pbnRybygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKSxcblxuICAgICAgICAgICAgICAgIGZyb20oU0hPV19PVVRSTykudG8oRVZFUllUSElOR19ET05FKVxuICAgICAgICAgICAgICAgICAgICAub24oXCJFXCIpXG4gICAgICAgICAgICAgICAgICAgIC5kbygoaTpzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkdW1teSA9IDE7XG4gICAgICAgICAgICAgICAgICAgIH0pXG5cblxuICAgICAgICAgICAgXTtcbiAgICAgICAgZXhwZXJpbWVudF90cmFuc2l0aW9ucy5zcGxpY2UoZXhwZXJpbWVudF90cmFuc2l0aW9ucy5sZW5ndGgtMSk7XG4gICAgICAgIHRoaXNfdHJhbnNpdGlvbnMuZm9yRWFjaCgoZSk9PmV4cGVyaW1lbnRfdHJhbnNpdGlvbnMucHVzaChlKSk7XG4gICAgICAgIHJldHVybiBleHBlcmltZW50X3RyYW5zaXRpb25zO1xuICAgIH1cblxuICAgIGlucHV0KHM6IHN0cmluZykge1xuICAgICAgICBpZiAoIVtcImFcIiwgXCJiXCIsIFwiY1wiXS5pbmNsdWRlcyhzKSAmJiB0aGlzLmF1dG9tYXRhLmN1cnJlbnRfc3RhdGUgIT0gMClcbiAgICAgICAgICAgIHJldHVybiBzdXBlci5pbnB1dChzKTtcbiAgICAgICAgc3VwZXIuaW5wdXQocyk7XG4gICAgfVxuXG4gICAgaW5pdF9leHBlcmltZW50KCkge1xuICAgICAgICB0aGlzLnRyYWluaW5nX2NvbmZpZ3VyYXRpb24uaW5pdF9leHBlcmltZW50KHRoaXMuZXhwZXJpbWVudF9kZWZpbml0aW9uKTtcbiAgICB9XG5cbn1cbiIsImltcG9ydCB7RXhwZXJpbWVudGF0aW9uX0ZvcndhcmRlcn0gZnJvbSBcIi4vRXhwZXJpbWVudGF0aW9uX0ZvcndhcmRlclwiO1xuaW1wb3J0IHtNZWFzdXJlbWVudF9UeXBlLCBPdXRwdXRfQ29tbWFuZH0gZnJvbSBcIi4uL0V4cGVyaW1lbnRhdGlvbi9FeHBlcmltZW50YXRpb25cIjtcbmltcG9ydCB7RXhwZXJpbWVudF9EZWZpbml0aW9ufSBmcm9tIFwiLi4vRXhwZXJpbWVudGF0aW9uL0V4cGVyaW1lbnRfRGVmaW5pdGlvblwiO1xuXG5leHBvcnQgY2xhc3MgRXhwZXJpbWVudF9Gb3J3YXJkZXIgZXh0ZW5kcyAgRXhwZXJpbWVudGF0aW9uX0ZvcndhcmRlcntcbiAgICBjb25zdHJ1Y3RvcihwcmVfcnVuX2luc3RydWN0aW9uczogT3V0cHV0X0NvbW1hbmQsXG4gICAgICAgICAgICAgICAgZXhwZXJpbWVudF9kZWZpbml0aW9uOiBFeHBlcmltZW50X0RlZmluaXRpb24sXG4gICAgICAgICAgICAgICAgbWVhc3VyZW1lbnQ6IE1lYXN1cmVtZW50X1R5cGUpXG4gICAge1xuICAgICAgICBzdXBlcihcbiAgICAgICAgICAgIFwiTWFpbiBFeHBlcmltZW50XCIsXG4gICAgICAgICAgICAoKT0+IHtcbiAgICAgICAgICAgICAgICBwcmVfcnVuX2luc3RydWN0aW9ucygpO1xuICAgICAgICAgICAgICAgIG1lYXN1cmVtZW50Lm91dHB1dF93cml0ZXIoKS5wcmludF9odG1sX29uX3N0YWdlKFwiPGhyPlwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJQcmVzcyBbRW50ZXJdIHRvIHN0YXJ0IHRoZSBleHBlcmltZW50LlwiKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAoKT0+IHtcbiAgICAgICAgICAgICAgICBtZWFzdXJlbWVudC5vdXRwdXRfd3JpdGVyKCkucHJpbnRfaHRtbF9vbl9zdGFnZShcbiAgICAgICAgICAgICAgICAgICAgXCJZb3UgZmluaXNoZWQgdGhlIGV4cGVyaW1lbnQgcGhhc2UuPGhyPlwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJQbGVhc2UsIHByZXNzIFtFbnRlcl0gdG8gZ28gdG8gdGhlIG5leHQgcGhhc2UuPGJyPlwiXG4gICAgICAgICAgICAgICAgKX0sXG4gICAgICAgICAgICBleHBlcmltZW50X2RlZmluaXRpb24sXG4gICAgICAgICAgICBtZWFzdXJlbWVudCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHtFeHBlcmltZW50X0RlZmluaXRpb259IGZyb20gXCIuL0V4cGVyaW1lbnRfRGVmaW5pdGlvblwiO1xuaW1wb3J0IHtCb29rX0ZvcndhcmRlcn0gZnJvbSBcIi4uL0F1dG9tYXRhX0ZvcndhcmRlcnMvQm9va19Gb3J3YXJkZXJcIjtcbmltcG9ydCB7U2VxdWVudGlhbF9Gb3J3YXJkZXJfRm9yd2FyZGVyfSBmcm9tIFwiLi4vQm9va3MvU2VxdWVudGlhbF9Gb3J3YXJkZXJfRm9yd2FyZGVyXCI7XG5pbXBvcnQge1RyYWluaW5nX0V4ZWN1dGlvbl9Gb3J3YXJkZXJ9IGZyb20gXCIuLi9BdXRvbWF0YV9Gb3J3YXJkZXJzL1RyYWluaW5nX0V4ZWN1dGlvbl9Gb3J3YXJkZXJcIjtcbmltcG9ydCB7TWVhc3VyZW1lbnRfVHlwZSwgcmFuZG9tX2ludGVnZXJfdXBfdG9fZXhjbHVkaW5nLCBPdXRwdXRfQ29tbWFuZCwgU0VUX1NFRUR9IGZyb20gXCIuL0V4cGVyaW1lbnRhdGlvblwiO1xuaW1wb3J0IHtFeHBlcmltZW50X0ZvcndhcmRlcn0gZnJvbSBcIi4uL0F1dG9tYXRhX0ZvcndhcmRlcnMvRXhwZXJpbWVudF9Gb3J3YXJkZXJcIjtcbmltcG9ydCB7UXVlc3Rpb24sIFF1ZXN0aW9ubmFpcmVfRm9yd2FyZGVyfSBmcm9tIFwiLi4vQXV0b21hdGFfRm9yd2FyZGVycy9RdWVzdGlvbm5haXJlX0ZvcndhcmRlclwiO1xuaW1wb3J0IHtUcmFpbmluZ19Db25maWd1cmF0aW9ufSBmcm9tIFwiLi9UcmFpbmluZ19Db25maWd1cmF0aW9uXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0KCl7fVxuLy8gVE9ETzogQm90aCBjbGFzc2VzIHNob3VsZCBiZSBvbmUhISFcbi8vIEFTQVAhISEhXG5leHBvcnQgY2xhc3MgQ29kZV9FeHBlcmltZW50X0RlZmluaXRpb24gZXh0ZW5kcyBFeHBlcmltZW50X0RlZmluaXRpb24ge1xuXG5cbiAgICBjcmVhdGVfY29kZV9hbGxfZXhwZXJpbWVudF9hdXRvbWF0YXMoY2ZnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWVkOiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRyb2R1Y3Rpb25fdGV4dHM6T3V0cHV0X0NvbW1hbmRbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc3RfcXVlc3Rpb25uYWlyZT86IFF1ZXN0aW9uW10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVfcnVuX3RyYWluaW5nX291dHB1dDogT3V0cHV0X0NvbW1hbmQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFpbmluZ19jb25maWd1cmF0aW9uOiBUcmFpbmluZ19Db25maWd1cmF0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJlX3J1bl9leHBlcmltZW50X291dHB1dDogT3V0cHV0X0NvbW1hbmQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5pc2hfdGV4dHM6IE91dHB1dF9Db21tYW5kW10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZWFzdXJlbWVudDogTWVhc3VyZW1lbnRfVHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmlzaF9mdW5jdGlvbjogKGV4cGVyaW1lbnQ6RXhwZXJpbWVudF9EZWZpbml0aW9uKSA9PiB2b2lkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICApIDogU2VxdWVudGlhbF9Gb3J3YXJkZXJfRm9yd2FyZGVyXG4gICAge1xuXG4gICAgICAgIGxldCBvdXRwdXRfd3JpdGVyID0gY2ZnLm1lYXN1cmVtZW50Lm91dHB1dF93cml0ZXIoKTtcblxuICAgICAgICBsZXQgaW50cm9kdWN0aW9uX2Jvb2sgPSBuZXcgQm9va19Gb3J3YXJkZXIoXCJJbnRyb2R1Y3Rpb25cIiwgY2ZnLmludHJvZHVjdGlvbl90ZXh0cywgY2ZnLm1lYXN1cmVtZW50KTtcbiAgICAgICAgbGV0IGVuZGluZ19ib29rID0gbmV3IEJvb2tfRm9yd2FyZGVyKFwiRmluaXNoXCIsIGNmZy5maW5pc2hfdGV4dHMsIGNmZy5tZWFzdXJlbWVudCk7XG4gICAgICAgIGVuZGluZ19ib29rLmF1dG9tYXRhLmFkZF9maW5pc2hfYWN0aW9uKCgpPT5jZmcuZmluaXNoX2Z1bmN0aW9uKGV4cGVyaW1lbnRfZXhlY3V0aW9uX2ZvcndhcmRlci5leHBlcmltZW50X2RlZmluaXRpb24pKTtcblxuICAgICAgICBsZXQgZXhwZXJpbWVudF9leGVjdXRpb25fZm9yd2FyZGVyID0gbmV3IEV4cGVyaW1lbnRfRm9yd2FyZGVyKFxuICAgICAgICAgICAgY2ZnLnByZV9ydW5fZXhwZXJpbWVudF9vdXRwdXQsXG4gICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgY2ZnLm1lYXN1cmVtZW50XG4gICAgICAgICk7XG5cbiAgICAgICAgZXhwZXJpbWVudF9leGVjdXRpb25fZm9yd2FyZGVyLmluaXRfZXhwZXJpbWVudCgpO1xuXG5cbiAgICAgICAgbGV0IGNsb25lZF9leHBlcmltZW50X2RlZmluaXRpb24gPSB0aGlzLmNsb25lKCk7XG5cbiAgICAgICAgbGV0IHRyYWluaW5nX2ZvcndhcmRlciA9IG5ldyBUcmFpbmluZ19FeGVjdXRpb25fRm9yd2FyZGVyKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZmcucHJlX3J1bl90cmFpbmluZ19vdXRwdXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNmZy50cmFpbmluZ19jb25maWd1cmF0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbG9uZWRfZXhwZXJpbWVudF9kZWZpbml0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZmcubWVhc3VyZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICB0cmFpbmluZ19mb3J3YXJkZXIuaW5pdF9leHBlcmltZW50KCk7XG5cbiAgICAgICAgbGV0IHBvc3RfcXVlc3Rpb25uYWlyZSA9IG51bGw7XG4gICAgICAgIGlmIChjZmcucG9zdF9xdWVzdGlvbm5haXJlIT11bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHBvc3RfcXVlc3Rpb25uYWlyZSA9IG5ldyBRdWVzdGlvbm5haXJlX0ZvcndhcmRlcihjZmcucG9zdF9xdWVzdGlvbm5haXJlLCBjZmcubWVhc3VyZW1lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGZvcndhcmRlcnMgPSBbXTtcbiAgICAgICAgaWYgKGludHJvZHVjdGlvbl9ib29rICE9IG51bGwpIHtcbiAgICAgICAgICAgIGZvcndhcmRlcnMucHVzaChpbnRyb2R1Y3Rpb25fYm9vayk7XG4gICAgICAgIH1cblxuICAgICAgICBpZih0cmFpbmluZ19mb3J3YXJkZXIuZXhwZXJpbWVudF9kZWZpbml0aW9uLnRhc2tzLmxlbmd0aCE9MClcbiAgICAgICAgICAgIGZvcndhcmRlcnMucHVzaCh0cmFpbmluZ19mb3J3YXJkZXIpO1xuXG4gICAgICAgIGZvcndhcmRlcnMucHVzaChleHBlcmltZW50X2V4ZWN1dGlvbl9mb3J3YXJkZXIpO1xuXG4gICAgICAgIGlmIChwb3N0X3F1ZXN0aW9ubmFpcmUgIT0gbnVsbCkge1xuICAgICAgICAgICAgZm9yd2FyZGVycy5wdXNoKHBvc3RfcXVlc3Rpb25uYWlyZSk7XG4gICAgICAgICAgICBleHBlcmltZW50X2V4ZWN1dGlvbl9mb3J3YXJkZXIuZXhwZXJpbWVudF9kZWZpbml0aW9uLnF1ZXN0aW9ubmFpcmVzLnB1c2gocG9zdF9xdWVzdGlvbm5haXJlKTtcbiAgICAgICAgfVxuICAgICAgICBmb3J3YXJkZXJzLnB1c2goZW5kaW5nX2Jvb2spO1xuXG4gICAgICAgIGxldCBmb3J3YXJkZXIgPSBuZXcgU2VxdWVudGlhbF9Gb3J3YXJkZXJfRm9yd2FyZGVyKGZvcndhcmRlcnMpO1xuICAgICAgICByZXR1cm4gZm9yd2FyZGVyO1xuXG4gICAgfVxuXG4gICAgLy8gV0hBVEVWRVIgSEFQUEVOUyBPTiBFQVJUSCAtIFRISVMgU0hPVUxEIE9OTFkgQkUgVVNFRCBGT1IgVFJBSU5JTkchXG4gICAgcHJpdmF0ZSBjbG9uZSgpOkNvZGVfRXhwZXJpbWVudF9EZWZpbml0aW9uIHtcblxuICAgICAgICBsZXQgY2xvbmUgPSBuZXcgQ29kZV9FeHBlcmltZW50X0RlZmluaXRpb24gIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50ZW1wbGF0ZS5leHBlcmltZW50X25hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNfdHJhaW5pbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJlYXRtZW50c19jb21iaW5hdG9yLmNsb25lKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGVtcGxhdGUudmFyaWFibGVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRlbXBsYXRlLnJlcGV0aXRpb25zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1lYXN1cmVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRlbXBsYXRlLnRhc2tfY3JlYXRvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuIGNsb25lO1xuXG4gICAgfVxuXG59XG4iLCJpbXBvcnQge0luZGVwZW5kZW50X1ZhcmlhYmxlfSBmcm9tIFwiLi9JbmRlcGVuZGVudF9WYXJpYWJsZVwiO1xuXG5leHBvcnQgY2xhc3MgVHJlYXRtZW50IHtcblxuICAgIHZhcmlhYmxlOiBJbmRlcGVuZGVudF9WYXJpYWJsZTtcbiAgICB2YWx1ZTogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IodmFyaWFibGU6IEluZGVwZW5kZW50X1ZhcmlhYmxlLCB2YWx1ZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMudmFyaWFibGUgPSB2YXJpYWJsZTtcbiAgICAgICAgdGhpcy52YWx1ZSA9IFwiXCIrdmFsdWU7XG4gICAgfVxuXG4gICAgY2xvbmUoKTpUcmVhdG1lbnQge1xuICAgICAgICBsZXQgcmV0ID0gbmV3IFRyZWF0bWVudCh0aGlzLiB2YXJpYWJsZSwgdGhpcy52YWx1ZSk7XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfVxufVxuIiwiZXhwb3J0ICBmdW5jdGlvbiAgaXRlcmF0ZV93aXRoX2NvdW50ZXI8VD4oYXJyYXk6VFtdLCBmOigoZWxlbWVudDpULCBjb3VudGVyOiBudW1iZXIpID0+IHZvaWQpKSB7XG4gICAgbGV0IGNvdW50ZXIgPSAwO1xuICAgIGZvcihsZXQgZSBvZiBhcnJheSkge1xuICAgICAgICBmKGUsIGNvdW50ZXIrKyk7XG4gICAgfVxufVxuXG5leHBvcnQgIGZ1bmN0aW9uICBpdGVyYXRlX2JvdGg8VDEsIFQyPihhMTpUMVtdLCBhMjpUMltdLCBmOihmaXJzdDpUMSwgc2Vjb25kOlQyKT0+dm9pZCkge1xuICAgIGlmKGExLmxlbmd0aD5hMi5sZW5ndGgpXG4gICAgICAgIHRocm93IFwiQ2Fubm90IGxvb3AgYm90aDogZmlyc3QgYXJyYXkgaGFzIGxlbmd0aDogXCIgKyBhMS5sZW5ndGggKyBcIiwgYnV0IHNlY29uZCBoYXMgbGVuZ3RoIFwiICsgYTIubGVuZ3RoO1xuXG4gICAgbGV0IGNvdW50ZXIgPSAwO1xuICAgIGZvcihsZXQgZSBvZiBhMSkge1xuICAgICAgICBmKGUsIGEyW2NvdW50ZXIrK10pO1xuICAgIH1cbn1cblxuZXhwb3J0ICBmdW5jdGlvbiAgaXRlcmF0ZTxFbGVtZW50VHlwZT4oYXJyYXk6RWxlbWVudFR5cGVbXSkge1xuICAgIHJldHVybiBuZXcgSXRlcmF0b3IoYXJyYXkpO1xufVxuXG5leHBvcnQgY2xhc3MgSXRlcmF0b3I8VD4ge1xuICAgIGFycmF5OiBUW107XG5cbiAgICBjb25zdHJ1Y3RvcihhcnJheTogVFtdKSB7XG4gICAgICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbiAgICB9XG5cbiAgICBkbyhmOiAoKGVsZW1lbnQ6VCkgPT4gdm9pZCkpIHtcbiAgICAgICAgZm9yKGxldCBlbGVtZW50IG9mIHRoaXMuYXJyYXkpXG4gICAgICAgICAgICBmKGVsZW1lbnQpO1xuICAgIH1cblxuICAgIGRvX3dpdGhfY291bnRlcihmOiAoKGVsZW1lbnQ6VCwgY291bnRlcjpOdW1iZXIpID0+IHZvaWQpKSB7XG4gICAgICAgIGZvcihsZXQgYyA9IDA7IGMgPCB0aGlzLmFycmF5Lmxlbmd0aDtjKyspIHtcbiAgICAgICAgICAgIGYodGhpcy5hcnJheVtjXSwgYyk7XG4gICAgICAgIH1cbiAgICB9XG5cbn1cblxuXG5cbmV4cG9ydCBmdW5jdGlvbiByZXBlYXQobjpudW1iZXIsIGY6KChjOm51bWJlcik9PnZvaWQpKSB7XG4gICAgZm9yKGxldCBjPTA7IGMgPCBuOyBjKyspIHtcbiAgICAgICAgZihjKTtcbiAgICB9XG5cbiAgICAvLyByZXR1cm4gbmV3IFJlcGVhdCgwKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVwZWF0X25fdGltZXMobjpudW1iZXIpOlJlcGVhdCB7XG4gICAgcmV0dXJuIG5ldyBSZXBlYXQobik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXBlYXRfKG46bnVtYmVyKSB7XG4gICAgcmV0dXJuIG5ldyBSZXBlYXQobik7XG59XG5cblxuZXhwb3J0IGNsYXNzIFJlcGVhdCB7XG4gICAgY291bnRlcjpudW1iZXI7XG5cblxuICAgIGNvbnN0cnVjdG9yKGNvdW50ZXI6IG51bWJlcikge1xuICAgICAgICB0aGlzLmNvdW50ZXIgPSBjb3VudGVyO1xuICAgIH1cblxuICAgIGFuZF9jb2xsZWN0KGYpIHtcbiAgICAgICAgbGV0IGFyciA9IFtdO1xuICAgICAgICBmb3IobGV0IGMgPSAxOyBjIDw9IHRoaXMuY291bnRlcjtjKyspIHtcbiAgICAgICAgICAgIGFyci5wdXNoKGYoYykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnI7XG4gICAgfVxuXG4gICAgX3RpbWVzKGYpIHtcbiAgICAgICAgZm9yKGxldCBjID0gMTsgYyA8PSB0aGlzLmNvdW50ZXI7YysrKSB7XG4gICAgICAgICAgICBmKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0aW1lcyhmKSB7XG4gICAgICAgIGZvcihsZXQgYyA9IDE7IGMgPD0gdGhpcy5jb3VudGVyO2MrKykge1xuICAgICAgICAgICAgZihjKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG4iLCJpbXBvcnQgdHlwZSB7VHJlYXRtZW50fSBmcm9tIFwiLi9UcmVhdG1lbnRcIjtcblxuZXhwb3J0IGNsYXNzIFRyZWF0bWVudF9Db21iaW5hdGlvbiB7XG5cbiAgICB0cmVhdG1lbnRfY29tYmluYXRpb246VHJlYXRtZW50W10gPSBbXTtcblxuICAgIGNvbnN0cnVjdG9yKHRyZWF0bWVudF9jb21iaW5hdGlvbjpUcmVhdG1lbnRbXSkge1xuICAgICAgICB0aGlzLnRyZWF0bWVudF9jb21iaW5hdGlvbiA9IHRyZWF0bWVudF9jb21iaW5hdGlvbjtcbiAgICB9XG5cbiAgICBjbG9uZSgpOiBUcmVhdG1lbnRfQ29tYmluYXRpb24ge1xuICAgICAgICBsZXQgcmV0ID0gbmV3IFRyZWF0bWVudF9Db21iaW5hdGlvbihbXSk7XG4gICAgICAgIGZvcihsZXQgdHJlYXRtZW50IG9mIHRoaXMudHJlYXRtZW50X2NvbWJpbmF0aW9uKSB7XG4gICAgICAgICAgICByZXQudHJlYXRtZW50X2NvbWJpbmF0aW9uLnB1c2godHJlYXRtZW50LmNsb25lKCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuXG5cbn1cbiIsImltcG9ydCB7RXhwZXJpbWVudF9EZWZpbml0aW9ufSBmcm9tIFwiLi9FeHBlcmltZW50X0RlZmluaXRpb25cIjtcbmltcG9ydCB7SW5kZXBlbmRlbnRfVmFyaWFibGV9IGZyb20gXCIuL3RyZWF0bWVudHMvSW5kZXBlbmRlbnRfVmFyaWFibGVcIjtcbmltcG9ydCB7VHJlYXRtZW50fSBmcm9tIFwiLi90cmVhdG1lbnRzL1RyZWF0bWVudFwiO1xuaW1wb3J0IHtpdGVyYXRlX2JvdGgsIGl0ZXJhdGVfd2l0aF9jb3VudGVyfSBmcm9tIFwiLi4vdXRpbHMvbG9vcHMvbG9vcFwiO1xuaW1wb3J0IHtUYXNrfSBmcm9tIFwiLi9UYXNrXCI7XG5pbXBvcnQge1RyZWF0bWVudF9Db21iaW5hdGlvbn0gZnJvbSBcIi4vdHJlYXRtZW50cy9UcmVhdG1lbnRfQ29tYmluYXRpb25cIjtcblxuZXhwb3J0IGNsYXNzIFRyYWluaW5nX0NvbmZpZ3VyYXRpb24ge1xuXG4gICAgZml4ZWRfdHJlYXRtZW50czogYW55W107XG4gICAgY2FuX2JlX2NhbmNlbGxlZDogYm9vbGVhbiA9IHRydWU7XG4gICAgY2FuX2JlX3JlcGVhdGVkOmJvb2xlYW4gPSB0cnVlO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgICAgICAgICAgICAgIHRyYWluaW5nX2NvbmZpZ3VyYXRpb246IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpeGVkX3RyZWF0bWVudHM/OiBzdHJpbmdbXVtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FuX2JlX2NhbmNlbGxlZDogYm9vbGVhbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbl9iZV9yZXBlYXRlZDogYm9vbGVhblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZih0cmFpbmluZ19jb25maWd1cmF0aW9uID09PSB1bmRlZmluZWQpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHRyYWluaW5nX2NvbmZpZ3VyYXRpb24uZml4ZWRfdHJlYXRtZW50cyE9dW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZml4ZWRfdHJlYXRtZW50cyA9IHRyYWluaW5nX2NvbmZpZ3VyYXRpb24uZml4ZWRfdHJlYXRtZW50cztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYW5fYmVfY2FuY2VsbGVkID0gdHJhaW5pbmdfY29uZmlndXJhdGlvbi5jYW5fYmVfY2FuY2VsbGVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYW5fYmVfcmVwZWF0ZWQgPSB0cmFpbmluZ19jb25maWd1cmF0aW9uLmNhbl9iZV9yZXBlYXRlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG5cbiAgICBpbml0X2V4cGVyaW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICBleHBlcmltZW50X2RlZmluaXRpb246IEV4cGVyaW1lbnRfRGVmaW5pdGlvblxuICAgICAgICAgICAgICAgICAgICkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVyaW1lbnRfZGVmaW5pdGlvbi50YXNrcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHRoaXMuZml4ZWRfdHJlYXRtZW50cyAhPSB1bmRlZmluZWQpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IobGV0IGFfdHJlYXRtZW50X2NvbWJpbmF0aW9uIG9mIHRoaXMuZml4ZWRfdHJlYXRtZW50cykge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdHJlYXRtZW50X2NvbWJpbmF0aW9uID0gbmV3IFRyZWF0bWVudF9Db21iaW5hdGlvbihbXSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZXJhdGVfYm90aChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVyaW1lbnRfZGVmaW5pdGlvbi5hbGxfaW5kZXBlbmRlbnRfdmFyaWFibGVzKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhX3RyZWF0bWVudF9jb21iaW5hdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh2YXJpYWJsZTpJbmRlcGVuZGVudF9WYXJpYWJsZSwgdmFsdWU6c3RyaW5nKT0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmVhdG1lbnRfY29tYmluYXRpb24udHJlYXRtZW50X2NvbWJpbmF0aW9uLnB1c2gobmV3IFRyZWF0bWVudCh2YXJpYWJsZSwgdmFsdWUpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdGFzayA9IG5ldyBUYXNrKHRyZWF0bWVudF9jb21iaW5hdGlvbiwgZXhwZXJpbWVudF9kZWZpbml0aW9uLCBcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhc2suaXNfdHJhaW5pbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZXJpbWVudF9kZWZpbml0aW9uLmV4cGVyaW1lbnRfZGVmaW5pdGlvbl90YXNrX2NyZWF0b3IodGFzayk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBlcmltZW50X2RlZmluaXRpb24udGFza3MucHVzaCh0YXNrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVyaW1lbnRfZGVmaW5pdGlvbi5pbml0X2V4cGVyaW1lbnQodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG5cbn1cbiIsImltcG9ydCB7VHJlYXRtZW50fSBmcm9tIFwiLi9UcmVhdG1lbnRcIjtcblxuZXhwb3J0IGNsYXNzIEluZGVwZW5kZW50X1ZhcmlhYmxlIHtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgdHJlYXRtZW50czogVHJlYXRtZW50W10gPSBbXTtcblxuICAgIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZywgdHJlYXRtZW50czogc3RyaW5nW10pIHtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgZm9yIChsZXQgYVN0cmluZyBvZiB0cmVhdG1lbnRzKSB7XG4gICAgICAgICAgICB0aGlzLnRyZWF0bWVudHMucHVzaChuZXcgVHJlYXRtZW50KHRoaXMsIGFTdHJpbmcpKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImZ1bmN0aW9uIGFsbF9hcnJheV9jb21iaW5hdGlvbnNfaW50ZXJuYWwoYXJyOiBhbnlbXSwgY29tYmluYXRpb24sIGYpIHtcbiAgICAgICAgaWYoYXJyLmxlbmd0aD09MCkge1xuICAgICAgICAgICAgZihjb21iaW5hdGlvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgbGFzdDpbXSA9IGFyci5zaGlmdCgpO1xuICAgICAgICAgICAgZm9yIChsZXQgZSBvZiBsYXN0KSB7XG4gICAgICAgICAgICAgICAgY29tYmluYXRpb24ucHVzaChlKTtcbiAgICAgICAgICAgICAgICBhbGxfYXJyYXlfY29tYmluYXRpb25zX2ludGVybmFsKGFyciwgY29tYmluYXRpb24sIGYpO1xuICAgICAgICAgICAgICAgIGNvbWJpbmF0aW9uLnBvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXJyLnVuc2hpZnQobGFzdCk7XG4gICAgICAgIH1cbn1cblxuLyoqXG4gKiAgQHBhcmFtIGFycjogQW4gYXJyYXkgb2YgYXJyYXlzXG4gKiAgZXhlY3V0ZXMgZm9yIGFsbCBjb21iaW5hdGlvbnMgb2YgYXJyYXlzIHRoZSBmdW5jdGlvbiBmXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhbGxfYXJyYXlfY29tYmluYXRpb25zPFQ+KGFycjogVFtdW10sIGY6KChUKT0+YW55KSkge1xuICAgIGFsbF9hcnJheV9jb21iaW5hdGlvbnNfaW50ZXJuYWwoYXJyLCBbXSwgZik7XG59XG5cbi8qKlxuICogRXhhbXBsZXM6XG4gKiAgIGFsbF94X3R1cGVsKDEsIFsxLCAyLCAzXSkgPSBbMSwgMiwgM11cbiAqICAgYWxsX3hfdHVwZWwoMiwgWzEsIDIsIDNdKSA9IFtbMSwgMV0sIFsxLDJdXSwgWzEsM10sIFsyLDFdLi4uLlszLDNdXVxuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhbGxfeF90dXBlbDxUPih0dXBlbF9sZW5ndGg6IG51bWJlciwgYXJyOiBUW10pOlRbXVtdIHtcblxuICAgIGxldCByZXN1bHQ6VFtdW10gPSBbXTtcblxuICAgIGlmKHR1cGVsX2xlbmd0aD09MSkge1xuICAgICAgICBmb3IobGV0IGUgb2YgYXJyKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChbZV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG5cbiAgICBsZXQgeF9taW51c19vbmVfdHVwZWw6VFtdW10gPSBhbGxfeF90dXBlbCh0dXBlbF9sZW5ndGggLSAxLCBhcnIpO1xuICAgIGZvcihsZXQgZSBvZiBhcnIpIHtcbiAgICAgICAgZm9yKGxldCBhX3hfbWludXhfb25lX3R1cGVsIG9mIHhfbWludXNfb25lX3R1cGVsKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChbZSwgLi4uYV94X21pbnV4X29uZV90dXBlbF0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRXhhbXBsZXM6XG4gKiAgIGFsbF9kaWZmZXJlbnRfeF90dXBlbCgzLCBbMSwgMiwgM10pID0gW1sxLCAyLCAzXSwgWzEsMywyXSwgWzIsMSwzXSwgWzIsMywxXS4gWzMsMSwyXSwgWzMsMiwxXV1cbiAqXG4qL1xuZXhwb3J0IGZ1bmN0aW9uIGFsbF9kaWZmZXJlbnRfeF90dXBlbDxUPih0dXBlbF9sZW5ndGg6IG51bWJlciwgYXJyOiBUW10pOlRbXVtdIHtcblxuICAgIGxldCByZXN1bHQ6VFtdW10gPSBbXTtcblxuICAgIGlmKHR1cGVsX2xlbmd0aD09MSkge1xuICAgICAgICBmb3IobGV0IGUgb2YgYXJyKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChbZV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG5cbiAgICBmb3IobGV0IGUgPSAwOyBlIDwgYXJyLmxlbmd0aDsgZSsrKSB7XG4gICAgICAgIGxldCBhcnJfd2l0aG91dF9jdXJyZW50X2VsZW1lbnQgPSBhcnIuc2xpY2UoKTtcbiAgICAgICAgYXJyX3dpdGhvdXRfY3VycmVudF9lbGVtZW50LnNwbGljZShlLCAxKTtcbiAgICAgICAgbGV0IHhfbWludXNfb25lX3R1cGVsOlRbXVtdID0gYWxsX2RpZmZlcmVudF94X3R1cGVsKHR1cGVsX2xlbmd0aCAtIDEsIGFycl93aXRob3V0X2N1cnJlbnRfZWxlbWVudCk7XG4gICAgICAgIGZvcihsZXQgYV94X21pbnV4X29uZV90dXBlbCBvZiB4X21pbnVzX29uZV90dXBlbCkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goW2FycltlXSwgLi4uYV94X21pbnV4X29uZV90dXBlbF0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59IiwiaW1wb3J0IHtJbmRlcGVuZGVudF9WYXJpYWJsZX0gZnJvbSBcIi4vSW5kZXBlbmRlbnRfVmFyaWFibGVcIjtcbmltcG9ydCB7YWxsX2FycmF5X2NvbWJpbmF0aW9uc30gZnJvbSBcIi4uLy4uL3V0aWxzL2FycmF5cy9hbGxfYXJyYXlfY29tYmluYXRpb25zXCI7XG5pbXBvcnQge1RyZWF0bWVudF9Db21iaW5hdGlvbn0gZnJvbSBcIi4vVHJlYXRtZW50X0NvbWJpbmF0aW9uXCI7XG5cbmV4cG9ydCBjbGFzcyBJbmRlcGVuZGVudF9WYXJpYWJsZXMge1xuICAgIGluZGVwZW5kZW50X3ZhcmlhYmxlczogSW5kZXBlbmRlbnRfVmFyaWFibGVbXSA9IFtdO1xuXG5cbiAgICBwdXNoX3ZhcmlhYmxlKG46IHN0cmluZywgdHJlYXRtZW50czogc3RyaW5nW10pIHtcbiAgICAgICAgdGhpcy5pbmRlcGVuZGVudF92YXJpYWJsZXMucHVzaChuZXcgSW5kZXBlbmRlbnRfVmFyaWFibGUobiwgdHJlYXRtZW50cykpO1xuICAgIH1cblxuICAgIHByaW50X3RvX2FycmF5KHJlc3VsdDogc3RyaW5nW10pIHtcbiAgICAgICAgZm9yKGxldCB2YXJpYWJsZSBvZiB0aGlzLmluZGVwZW5kZW50X3ZhcmlhYmxlcykge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2godmFyaWFibGUubmFtZSArIFwiO1wiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNyZWF0ZV90cmVhdG1lbnRfY29tYmluYXRpb25zKCk6IFRyZWF0bWVudF9Db21iaW5hdGlvbltdIHtcbiAgICAgICAgbGV0IHRyZWF0bWVudF9jb21iaW5hdGlvbnMgPSBbXTtcbiAgICAgICAgYWxsX2FycmF5X2NvbWJpbmF0aW9ucyhcbiAgICAgICAgICAgIHRoaXMuaW5kZXBlbmRlbnRfdmFyaWFibGVzLm1hcCh0ID0+IHQudHJlYXRtZW50cyksXG4gICAgICAgICAgICAodHJlYXRtZW50cykgPT4ge1xuICAgICAgICAgICAgICAgIHRyZWF0bWVudF9jb21iaW5hdGlvbnMucHVzaChuZXcgVHJlYXRtZW50X0NvbWJpbmF0aW9uKFsuLi50cmVhdG1lbnRzXSkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0cmVhdG1lbnRfY29tYmluYXRpb25zO1xuICAgIH1cblxuICAgIGdldF92YXJpYWJsZV9uYW1lZCh2YXJfbmFtZTogc3RyaW5nKSB7XG4gICAgICAgIGZvcihsZXQgdiBvZiB0aGlzLmluZGVwZW5kZW50X3ZhcmlhYmxlcykge1xuICAgICAgICAgICAgaWYodi5uYW1lID09PSB2YXJfbmFtZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gdjtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBcIlVua25vd24gaW5kZXBlbmRlbnQgdmFyaWFibGUgbmFtZWQ6IFwiICsgdmFyX25hbWU7XG4gICAgfVxuXG4gICAgc3RhdGljIGZyb21fbGF5b3V0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheW91dDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFibGU6IHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyZWF0bWVudHM6IHN0cmluZ1tdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVtdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgIHtcbiAgICAgICAgbGV0IHZhcmlhYmxlczogSW5kZXBlbmRlbnRfVmFyaWFibGVzID0gbmV3IEluZGVwZW5kZW50X1ZhcmlhYmxlcygpO1xuICAgICAgICBmb3IobGV0IGFWYXIgb2YgbGF5b3V0KSB7XG4gICAgICAgICAgICB2YXJpYWJsZXMucHVzaF92YXJpYWJsZShhVmFyLnZhcmlhYmxlLCBhVmFyLnRyZWF0bWVudHMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YXJpYWJsZXM7XG4gICAgfVxufVxuIiwiaW1wb3J0IHtFeHBlcmltZW50X091dHB1dF9Xcml0ZXIsIE1lYXN1cmVtZW50X1R5cGUsIE91dHB1dF9Db21tYW5kLCBTRVRfU0VFRH0gZnJvbSBcIi4vRXhwZXJpbWVudGF0aW9uXCI7XG5pbXBvcnQge1Rhc2t9IGZyb20gXCIuL1Rhc2tcIjtcbmltcG9ydCB7a2V5X2V2ZW50X3N0cmluZywgc2F2ZV9maWxlX2luX2h0bWx9IGZyb20gXCIuLi91dGlscy9VdGlsc1wiO1xuaW1wb3J0IHtDb2RlX0V4cGVyaW1lbnRfRGVmaW5pdGlvbn0gZnJvbSBcIi4vQ29kZV9FeHBlcmltZW50X0RlZmluaXRpb25cIjtcbmltcG9ydCB7UXVlc3Rpb259IGZyb20gXCIuLi9BdXRvbWF0YV9Gb3J3YXJkZXJzL1F1ZXN0aW9ubmFpcmVfRm9yd2FyZGVyXCI7XG5pbXBvcnQge2NyZWF0ZV9jb2RlX2V4cGVyaW1lbnRfZXhlY3V0aW9ufSBmcm9tIFwiLi9mdW5jdGlvbnMvY3JlYXRlX2NvZGVfZXhwZXJpbWVudF9leGVjdXRpb25cIjtcblxuZXhwb3J0IGNsYXNzIEJyb3dzZXJfT3V0cHV0X1dyaXRlciBleHRlbmRzIEV4cGVyaW1lbnRfT3V0cHV0X1dyaXRlciB7XG4gICAgcHJpbnRfZXhwZXJpbWVudF9uYW1lKHM6c3RyaW5nKSB7XG4gICAgICAgIHRoaXMuZ2V0X2h0bWxfZWxlbWVudF9ieV9pZChcIlNUQVRFXCIpLmlubmVySFRNTCAgPSBzO1xuICAgIH1cblxuICAgIGNsZWFyX2Vycm9yKCkge1xuICAgICAgICBsZXQgZWxlbWVudF9pZCA9IFtcbiAgICAgICAgICAgIFwiU1RBR0VfRVJST1JcIlxuICAgICAgICBdO1xuICAgICAgICBmb3IobGV0IGUgb2YgZWxlbWVudF9pZCkge1xuICAgICAgICAgICAgbGV0IHBhcmVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGUpO1xuICAgICAgICAgICAgd2hpbGUgKHBhcmVudC5maXJzdENoaWxkKSB7XG4gICAgICAgICAgICAgICAgcGFyZW50LnJlbW92ZUNoaWxkKHBhcmVudC5maXJzdENoaWxkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgY2xlYXJfc3RhZ2UoKSB7XG4gICAgICAgIGxldCBlbGVtZW50X2lkID0gW1xuICAgICAgICAgICAgXCJTVEFHRVwiLFxuICAgICAgICAgICAgXCJTVEFHRV9NU0dcIixcbiAgICAgICAgICAgIFwiU1RBR0VfRVJST1JcIlxuICAgICAgICBdO1xuICAgICAgICBmb3IobGV0IGUgb2YgZWxlbWVudF9pZCkge1xuICAgICAgICAgICAgbGV0IHBhcmVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGUpO1xuICAgICAgICAgICAgd2hpbGUgKHBhcmVudC5maXJzdENoaWxkKSB7XG4gICAgICAgICAgICAgICAgcGFyZW50LnJlbW92ZUNoaWxkKHBhcmVudC5maXJzdENoaWxkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNsZWFyX3N0YXRlKCkge1xuICAgICAgICBsZXQgZWxlbWVudF9pZCA9IFtcbiAgICAgICAgICAgIFwiU1RBVEVcIixcbiAgICAgICAgICAgIFwiVEFTS1wiXG4gICAgICAgIF07XG4gICAgICAgIGZvcihsZXQgZSBvZiBlbGVtZW50X2lkKSB7XG4gICAgICAgICAgICBsZXQgcGFyZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZSk7XG4gICAgICAgICAgICB3aGlsZSAocGFyZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICAgICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQocGFyZW50LmZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpbnRfZXJyb3Jfc3RyaW5nX29uX3N0YWdlKHM6IHN0cmluZykge1xuICAgICAgICBsZXQgZSA9IHRoaXMuZ2V0X2h0bWxfZWxlbWVudF9ieV9pZChcIlNUQUdFX0VSUk9SXCIpO1xuICAgICAgICBlLmlubmVySFRNTCAgPSBzO1xuICAgIH1cblxuICAgIGdldF9odG1sX2VsZW1lbnRfYnlfaWQoczogc3RyaW5nKTpIVE1MRWxlbWVudCB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHMpO1xuICAgIH1cbiAgICBwcmludF9zdHJpbmdfdG9fc3RhdGUoczogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuZ2V0X2h0bWxfZWxlbWVudF9ieV9pZChcIlNUQVRFXCIpLmlubmVySFRNTCAgPSBzO1xuICAgIH1cblxuICAgIHByaW50X3N0cmluZ19vbl9zdGFnZShzOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5wcmludF9odG1sX29uX3N0YWdlKFwiPHA+XCIgKyBzICsgXCI8L3A+XCIpXG4gICAgfVxuXG4gICAgYXNrX2Zvcl9pbnB1dCgpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBsZXQgcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpIGFzIEhUTUxQYXJhZ3JhcGhFbGVtZW50O1xuICAgICAgICBsZXQgbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcbiAgICAgICAgbC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAndGV4dCcpO1xuICAgICAgICBwLnRleHRDb250ZW50ID0gXCJBbnN3ZXI6IFwiXG4gICAgICAgIHAuYXBwZW5kQ2hpbGQobCk7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgbGV0IGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgICAgIGkuc2V0QXR0cmlidXRlKCd0eXBlJywgJ3RleHQnKTtcbiAgICAgICAgaS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2lucHV0Jyk7XG4gICAgICAgIHAuYXBwZW5kQ2hpbGQoaSk7XG4gICAgICAgIGkuaWQgPSBcIklOUFVUXCI7XG4gICAgICAgIHRoaXMuZ2V0X2h0bWxfZWxlbWVudF9ieV9pZChcIlNUQUdFXCIpLmFwcGVuZENoaWxkKHApO1xuICAgICAgICBpLmZvY3VzKCk7XG4gICAgfVxuXG4gICAgc2V0X2ZvY3VzX29uX2lucHV0KCkge1xuICAgICAgICBsZXQgaSA9IHRoaXMuZ2V0X2h0bWxfZWxlbWVudF9ieV9pZChcIklOUFVUXCIpXG4gICAgICAgIGkuZm9jdXMoKTtcbiAgICB9XG5cbiAgICBwcmludF9zdHJpbmdfdG9fcGFnZV9udW1iZXIoczpzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5nZXRfaHRtbF9lbGVtZW50X2J5X2lkKFwiVEFTS1wiKS5pbm5lckhUTUwgID0gcztcbiAgICB9XG5cbiAgICBnZXRfZ2l2ZW5fYW5zd2VyKCkge1xuICAgICAgICByZXR1cm4gKHRoaXMuZ2V0X2h0bWxfZWxlbWVudF9ieV9pZChcIklOUFVUXCIpIGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlO1xuICAgIH1cblxuICAgIHByaW50X29uX2lucHV0X3Jlc3BvbnNlKGdpdmVuX2Fuc3dlcjogc3RyaW5nKSB7XG4gICAgICAgICh0aGlzLmdldF9odG1sX2VsZW1lbnRfYnlfaWQoXCJJTlBVVFwiKSBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZSA9IGdpdmVuX2Fuc3dlcjtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNyZWF0ZV9odG1sX2VsZW1lbnRfZnJvbV9zdHJpbmcoczpzdHJpbmcpIHtcbiAgICAgICAgbGV0IHBhcnNlciA9IG5ldyBET01QYXJzZXIoKTtcbiAgICAgICAgbGV0IGVsZW1lbnRzID0gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyhzLCBcInRleHQvaHRtbFwiKS5ib2R5O1xuICAgICAgICByZXR1cm4gZWxlbWVudHM7XG4gICAgfVxuXG4gICAgcHJpbnRfaHRtbF9vbl9zdGFnZShzOiBzdHJpbmcpIHtcbiAgICAgICAgLy8gZm9yKGxldCBlIG9mIHRoaXMuY3JlYXRlX2h0bWxfZWxlbWVudF9mcm9tX3N0cmluZyhzKSkge1xuICAgICAgICAgICAgdGhpcy5nZXRfaHRtbF9lbGVtZW50X2J5X2lkKFwiU1RBR0VcIilcbiAgICAgICAgICAgICAgICAuYXBwZW5kQ2hpbGQodGhpcy5jcmVhdGVfaHRtbF9lbGVtZW50X2Zyb21fc3RyaW5nKHMpKTtcbiAgICAgICAgLy8gfVxuICAgIH1cblxuICAgIHByaW50X2h0bWxfb25fZXJyb3Ioczogc3RyaW5nKSB7XG4gICAgICAgIC8vIGZvcihsZXQgZSBvZiB0aGlzLmNyZWF0ZV9odG1sX2VsZW1lbnRfZnJvbV9zdHJpbmcocykpIHtcbiAgICAgICAgLy8gICAgIHRoaXMuZ2V0X2h0bWxfZWxlbWVudF9ieV9pZChcIlNUQUdFX0VSUk9SXCIpXG4gICAgICAgIC8vICAgICAgICAgLmFwcGVuZENoaWxkKGUpO1xuICAgICAgICAvLyB9XG5cbiAgICAgICAgdGhpcy5nZXRfaHRtbF9lbGVtZW50X2J5X2lkKFwiU1RBR0VfRVJST1JcIilcbiAgICAgICAgICAgIC5hcHBlbmRDaGlsZCh0aGlzLmNyZWF0ZV9odG1sX2VsZW1lbnRfZnJvbV9zdHJpbmcocykpO1xuICAgIH1cblxufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBCUk9XU0VSX0VYUEVSSU1FTlQoY3JlYXRvcjogKHdyaXRlcjpFeHBlcmltZW50X091dHB1dF9Xcml0ZXIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVyaW1lbnRfbmFtZSAgICAgICAgICAgICAgICAgOnN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlZWQgICAgICAgICAgICAgICAgICAgICAgICAgICAgOnN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGludHJvZHVjdGlvbl9wYWdlcyAgICAgICAgICAgICAgOigoKT0+dm9pZClbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc3RfcXVlc3Rpb25uYWlyZT8gICAgICAgICAgICAgOlF1ZXN0aW9uW10sXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmVfcnVuX3RyYWluaW5nX2luc3RydWN0aW9ucyAgIDpPdXRwdXRfQ29tbWFuZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYWluaW5nX2NvbmZpZ3VyYXRpb24/ICAgICAgICAgOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZml4ZWRfdHJlYXRtZW50cz86IHN0cmluZ1tdW10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FuX2JlX2NhbmNlbGxlZDogYm9vbGVhbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW5fYmVfcmVwZWF0ZWQ6IGJvb2xlYW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJlX3J1bl9leHBlcmltZW50X2luc3RydWN0aW9ucyA6T3V0cHV0X0NvbW1hbmQsXG4gICAgICAgICAgICAgICAgICAgICAgICBmaW5pc2hfcGFnZXMgICAgICAgICAgICAgICAgICAgIDpPdXRwdXRfQ29tbWFuZFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGF5b3V0ICAgICAgICAgICAgICAgICAgICAgICAgICA6e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFibGU6IHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyZWF0bWVudHM6IHN0cmluZ1tdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1bXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcGV0aXRpb25zICAgICAgICAgICAgICAgICAgICAgOm51bWJlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lYXN1cmVtZW50ICAgICAgICAgICAgICAgICAgICAgOiAoRXhwZXJpbWVudF9PdXRwdXRfV3JpdGVyKT0+TWVhc3VyZW1lbnRfVHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhc2tfY29uZmlndXJhdGlvbiAgICAgICAgICAgICAgOih0YXNrOlRhc2spID0+dm9pZCxcbiAgICAgICAgICAgICAgICAgIH1cblxuKSB7XG4gICAgbGV0IGJyb3dzZXJfb3V0cHV0ID0gbmV3IEJyb3dzZXJfT3V0cHV0X1dyaXRlcigpO1xuICAgIGxldCBjZmcgPSBjcmVhdG9yKGJyb3dzZXJfb3V0cHV0KTtcbiAgICBTRVRfU0VFRChjZmcuc2VlZCk7XG4gICAgbGV0IHRoaXNfbWVhc3VyZW1lbnQ6TWVhc3VyZW1lbnRfVHlwZSA9IGNmZy5tZWFzdXJlbWVudChicm93c2VyX291dHB1dCk7XG5cbiAgICBsZXQgZXhwZXJpbWVudF9hdXRvbWF0YSA9IGNyZWF0ZV9jb2RlX2V4cGVyaW1lbnRfZXhlY3V0aW9uKFxuICAgICAgICB7XG4gICAgICAgICAgICBleHBlcmltZW50X25hbWU6IGNmZy5leHBlcmltZW50X25hbWUsXG4gICAgICAgICAgICBzZWVkOiBjZmcuc2VlZCxcbiAgICAgICAgICAgIGludHJvZHVjdGlvbl9wYWdlczogY2ZnLmludHJvZHVjdGlvbl9wYWdlcyxcbiAgICAgICAgICAgIHBvc3RfcXVlc3Rpb25uYWlyZTogY2ZnLnBvc3RfcXVlc3Rpb25uYWlyZSxcbiAgICAgICAgICAgIHByZV9ydW5fdHJhaW5pbmdfb3V0cHV0OiBjZmcucHJlX3J1bl90cmFpbmluZ19pbnN0cnVjdGlvbnMsXG4gICAgICAgICAgICB0cmFpbmluZ19jb25maWd1cmF0aW9uOiBjZmcudHJhaW5pbmdfY29uZmlndXJhdGlvbixcblxuICAgICAgICAgICAgcHJlX3J1bl9leHBlcmltZW50X291dHB1dDogY2ZnLnByZV9ydW5fZXhwZXJpbWVudF9pbnN0cnVjdGlvbnMsXG4gICAgICAgICAgICBmaW5pc2hfcGFnZXM6IGNmZy5maW5pc2hfcGFnZXMsXG4gICAgICAgICAgICBsYXlvdXQ6IGNmZy5sYXlvdXQsXG4gICAgICAgICAgICByZXBldGl0aW9uczogY2ZnLnJlcGV0aXRpb25zLFxuICAgICAgICAgICAgdGFza19jb25maWd1cmF0aW9uOiBjZmcudGFza19jb25maWd1cmF0aW9uLFxuICAgICAgICAgICAgbWVhc3VyZW1lbnQ6IHRoaXNfbWVhc3VyZW1lbnQsXG4gICAgICAgICAgICBmaW5pc2hfZnVuY3Rpb246ICAoZXhwOiBDb2RlX0V4cGVyaW1lbnRfRGVmaW5pdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBrZXlfZm9yd2FyZGVyKTtcbiAgICAgICAgICAgICAgICBzYXZlX2ZpbGVfaW5faHRtbChcImV4cGVyaW1lbnRkYXRhLmNzdlwiLCBleHAuZ2VuZXJhdGVfY3N2X2RhdGEoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICApO1xuXG4gICAgbGV0IGtleV9mb3J3YXJkZXIgPSAoZSk9PiB7XG4gICAgICAgIGxldCBrZXlfc3RyaW5nID0ga2V5X2V2ZW50X3N0cmluZyhlKTtcbiAgICAgICAgZXhwZXJpbWVudF9hdXRvbWF0YS5pbnB1dChrZXlfc3RyaW5nKTtcbiAgICB9XG5cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwga2V5X2ZvcndhcmRlciwgZmFsc2UpO1xuXG4gICAgZXhwZXJpbWVudF9hdXRvbWF0YS5zZXRfYWN0aXZlKCk7XG5cbn1cbiIsImltcG9ydCB7XHJcbiAgICBhbHRlcm5hdGl2ZXMsXHJcbiAgICBFeHBlcmltZW50X091dHB1dF9Xcml0ZXIsIGtleXMsIFJlYWN0aW9uX1RpbWUsXHJcbiAgICBTRVRfU0VFRFxyXG59IGZyb20gXCJFeHBlcmltZW50YXRpb24vc3JjL0V4cGVyaW1lbnRhdGlvbi9FeHBlcmltZW50YXRpb25cIjtcclxuaW1wb3J0IHtUYXNrfSBmcm9tIFwiRXhwZXJpbWVudGF0aW9uL3NyYy9FeHBlcmltZW50YXRpb24vVGFza1wiO1xyXG5pbXBvcnQge30gZnJvbSBcIi4vQm9vbF9FeHByZXNzaW9uX0dlbmVyYXRvclwiO1xyXG5pbXBvcnQge2dlbmVyYXRlX2Jvb2xlYW5fZXhwcmVzc2lvbl9hc19zdHJpbmd9IGZyb20gXCIuL0Jvb2xfRXhwcmVzc2lvbl9HZW5lcmF0b3JcIjtcclxuaW1wb3J0IHtCUk9XU0VSX0VYUEVSSU1FTlR9IGZyb20gXCJFeHBlcmltZW50YXRpb24vc3JjL0V4cGVyaW1lbnRhdGlvbi9Ccm93c2VyX091dHB1dF9Xcml0ZXJcIjtcclxuXHJcbmxldCBTRUVEID0gXCI0MlwiO1xyXG5cclxuU0VUX1NFRUQoU0VFRCk7XHJcblxyXG5sZXQgZXhwZXJpbWVudF9jb25maWd1cmF0aW9uX2Z1bmN0aW9uID0gKHdyaXRlcjogRXhwZXJpbWVudF9PdXRwdXRfV3JpdGVyKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG5cclxuICAgICAgICBleHBlcmltZW50X25hbWU6IFwiU1FMLVdpdGhWZXJzdXNTdWJxdWVyeVwiLFxyXG4gICAgICAgIHNlZWQ6IFNFRUQsXHJcblxyXG4gICAgICAgIGludHJvZHVjdGlvbl9wYWdlczogW1xyXG4gICAgICAgICAgICAoKSA9PiB3cml0ZXIucHJpbnRfc3RyaW5nX29uX3N0YWdlKFwiVGhpcyBpcyB5b3VyIGhlbGxvIHdvcmxkIGV4cGVyaW1lbnQuXCIpXHJcbiAgICAgICAgXSxcclxuXHJcbiAgICAgICAgcHJlX3J1bl90cmFpbmluZ19pbnN0cnVjdGlvbnM6IHdyaXRlci5zdHJpbmdfcGFnZV9jb21tYW5kKFxyXG4gICAgICAgICAgICBcIllvdSBlbnRlcmVkIHRoZSB0cmFpbmluZyBwaGFzZS4gWW91IGNhbiBza2lwIHRoZSB0cmFpbmluZyBieSBwcmVzc2luZyBbRXNjXS5cIlxyXG4gICAgICAgICksXHJcblxyXG4gICAgICAgIHByZV9ydW5fZXhwZXJpbWVudF9pbnN0cnVjdGlvbnM6IHdyaXRlci5zdHJpbmdfcGFnZV9jb21tYW5kKFxyXG4gICAgICAgICAgICBcIllvdSBlbnRlcmVkIHRoZSBleHBlcmltZW50IHBoYXNlLlwiXHJcbiAgICAgICAgKSxcclxuXHJcbiAgICAgICAgcG9zdF9xdWVzdGlvbm5haXJlOiBbXHJcbiAgICAgICAgICAgIGFsdGVybmF0aXZlcyhcclxuICAgICAgICAgICAgICAgIFwiQWdlXCIsXHJcbiAgICAgICAgICAgICAgICBcIldoYXQncyB5b3VyIGFnZT8/XCIsXHJcbiAgICAgICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ5b3VuZ2VyIHRoYW4gMThcIiwgXCJiZXR3ZWVuIDE4IGFuZCAoZXhjbHVkaW5nKSAyNVwiLCBcImJldHdlZW4gMjUgYW5kIChleGNsdWRpbmcpIDMwXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJiZXR3ZWVuIDMwIGFuZCAoZXhjbHVkaW5nKSAzNVwiLCBcImJldHdlZW4gMzUgYW5kIChleGNsdWRpbmcpIDQwXCIsIFwiNDAgb3Igb2xkZXJcIlxyXG4gICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICApLFxyXG5cclxuICAgICAgICAgICAgYWx0ZXJuYXRpdmVzKFxyXG4gICAgICAgICAgICAgICAgXCJTdGF0dXNcIixcclxuICAgICAgICAgICAgICAgIFwiV2hhdCBpcyB5b3VyIGN1cnJlbnQgd29ya2luZyBzdGF0dXM/XCIsXHJcbiAgICAgICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAgICAgXCJVbmRlcmdyYWR1YXRlIHN0dWRlbnQgKEJTYyBub3QgeWV0IGZpbmlzaGVkKVwiLCBcIkdyYWR1YXRlIHN0dWRlbnQgKGF0IGxlYXN0IEJTYyBmaW5pc2hlZClcIiwgXCJQaEQgc3R1ZGVudFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiUHJvZmVzc2lvbmFsIHNvZnR3YXJlIGRldmVsb3BlclwiLCBcIlRlYWNoZXJcIiwgXCJPdGhlclwiXHJcbiAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICksXHJcblxyXG4gICAgICAgICAgICBhbHRlcm5hdGl2ZXMoXHJcbiAgICAgICAgICAgICAgICBcIlN0dWRpZXNcIixcclxuICAgICAgICAgICAgICAgIFwiSW4gY2FzZSB5b3Ugc3R1ZHksIHdoYXQncyB5b3VyIHN1YmplY3Q/XCIsXHJcbiAgICAgICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAgICAgXCJJIGRvIG5vdCBzdHVkeVwiLCBcIkNvbXB1dGVyIHNjaWVuY2VcIiwgXCJjb21wdXRlciBzY2llbmNlIHJlbGF0ZWQgKHN1Y2ggYXMgaW5mb3JtYXRpb24gc3lzdGVtcywgYWthIFdpSW5mKVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwic29tZXRoaW5nIGVsc2UgaW4gbmF0dXJhbCBzY2llbmNlc1wiLCBcInNvbWV0aGluZyBlbHNlXCJcclxuICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgKSxcclxuXHJcbiAgICAgICAgICAgIGFsdGVybmF0aXZlcyhcclxuICAgICAgICAgICAgICAgIFwiWWVhcnNPZkV4cGVyaWVuY2VcIixcclxuICAgICAgICAgICAgICAgIFwiSG93IG1hbnkgeWVhcnMgb2YgZXhwZXJpZW5jZSBkbyB5b3UgaGF2ZSBpbiBzb2Z0d2FyZSBpbmR1c3RyeT9cIixcclxuICAgICAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgICAgICBcIm5vbmVcIiwgXCJsZXNzIHRoYW4gb3IgZXF1YWwgMSB5ZWFyXCIsIFwibW9yZSB0aGFuIDEgeWVhciwgYnV0IGxlc3MgdGhhbiBvciBlcXVhbCAzIHllYXJzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJtb3JlIHRoYW4gMyB5ZWFycywgYnV0IGxlc3MgdGhhbiBvciBlcXVhbCA1IHllYXJcIiwgXCJtb3JlIHRoYW4gNSB5ZWFyc1wiXHJcbiAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICksXHJcblxyXG4gICAgICAgICAgICBhbHRlcm5hdGl2ZXMoXHJcbiAgICAgICAgICAgICAgICBcImltcHJlc3Npb25cIixcclxuICAgICAgICAgICAgICAgIFwiV2hhdCBzdGF0ZW1lbnQgZGVzY3JpYmVzIGJlc3QgeW91ciBpbXByZXNzaW9uIFxcblxcIG9mIHRoZSBleHBlcmltZW50P1wiLFxyXG4gICAgICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgICAgIFwiSSBkbyBub3QgdGhpbmsgdGhhdCB0aGVyZSB3YXMgYSBkaWZmZXJlbmNlIGJldHdlZW4gdGhlIG5vdGF0aW9uc1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiVGhlIGluZmVyZW5jZSBub3RhdGlvbiBtYWRlIGl0IHNsaWdodGx5IGVhc2llciBmb3IgbWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIkphdmEgbWFkZSBpdCBzbGlnaHRseSBlYXNpZXIgZm9yIG1lXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJUaGUgaW5mZXJlbmNlIG5vdGF0aW9uIG1hZGUgaXQgbXVjaCBlYXNpZXIgZm9yIG1lXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJKYXZhIG1hZGUgaXQgbXVjaCBlYXNpZXIgZm9yIG1lXCIsXHJcbiAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICBdLFxyXG5cclxuICAgICAgICB0cmFpbmluZ19jb25maWd1cmF0aW9uOiB7XHJcbiAgICAgICAgICAgIGNhbl9iZV9jYW5jZWxsZWQ6IHRydWUsXHJcbiAgICAgICAgICAgIGNhbl9iZV9yZXBlYXRlZDogdHJ1ZVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGZpbmlzaF9wYWdlczogW1xyXG4gICAgICAgICAgICB3cml0ZXIuc3RyaW5nX3BhZ2VfY29tbWFuZChcclxuICAgICAgICAgICAgICAgIFwiPHA+QWxtb3N0IGRvbmUuIE5leHQsIHRoZSBleHBlcmltZW50IGRhdGEgd2lsbCBiZSBkb3dubG9hZGVkIChhZnRlciBwcmVzc2luZyBbRW50ZXJdKS48YnI+PGJyPlwiICtcclxuICAgICAgICAgICAgICAgIFwiUGxlYXNlLCBzZW5kIHRoZSBcIiArXHJcbiAgICAgICAgICAgICAgICBcImRvd25sb2FkZWQgZmlsZSB0byB0aGUgZXhwZXJpbWVudGVyOiBcIiArIFwiPGEgaHJlZj0nbWFpbHRvOnN0ZWZhbi5oYW5lbmJlcmdAdW5pLWR1ZS5kZSc+c3RlZmFuLmhhbmVuYmVyZ0B1bmktZHVlLmRlPC9hPjwvcD5cIiArXHJcbiAgICAgICAgICAgICAgICBcIjxwPkJ5IHNlbmRpbmcgdGhhdCBtYWlsLCB5b3UgYWdyZWUgdGhhdCBcIiArXHJcbiAgICAgICAgICAgICAgICBcInlvdXIgKGFub255bWl6ZWQpIGRhdGEgd2lsbCBiZSB1c2VkIGZvciBzY2llbnRpZmljIGFuYWx5c2VzIHdoZXJlIHlvdXIgZGF0YSAodG9nZXRoZXIgd2l0aCBvdGhlcnMgaW4gYW4gXCIgK1xyXG4gICAgICAgICAgICAgICAgXCJhbm9ueW1pemVkIHdheSkgd2lsbCBiZSBwdWJsaXNoZWQuPGJyPjxicj5JLmUuLCB5b3UgYWdyZWUgd2l0aCB0aGUgaW5mb3JtYXRpb24gc2hlZXQsIHNlZSBcIiArXHJcbiAgICAgICAgICAgICAgICBcIjxhIGhyZWY9J2h0dHBzOi8vZ2l0aHViLmNvbS9zaGFuZW5iZS9FeHBlcmltZW50cy9ibG9iL21haW4vMjAyNF9UeXBlU3lzdGVtc19Db25zdHJ1Y3RvckNhbGxfRmxhdC9BZ3JlZW1lbnQucGRmJyB0YXJnZXQ9J19ibGFuayc+aGVyZTwvYT4uIFwiICtcclxuICAgICAgICAgICAgICAgIFwiTm90ZSwgdGhhdCBpdCBpdCBubyBsb25nZXIgbmVjZXNzYXJ5IHRvIHNlbmQgYSBzaWduZWQgdmVyc2lvbiBvZiB0aGUgYWdyZWVtZW50IHRvIHRoZSBleHBlcmltZW50ZXIuPGJyPjxicj5cIiArXHJcbiAgICAgICAgICAgICAgICBcIkFmdGVyIHNlbmRpbmcgeW91ciBlbWFpbCwgeW91IGNhbiBjbG9zZSB0aGlzIHdpbmRvdy48L3A+XCIgK1xyXG4gICAgICAgICAgICAgICAgXCI8cD5NYW55IHRoYW5rcyBmb3IgeW91ciBwYXJ0aWNpcGF0aW9uLjxicj5cIiArXHJcbiAgICAgICAgICAgICAgICBcIi1TdGVmYW4gSGFuZW5iZXJnPC9wPlwiXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICBdLFxyXG5cclxuICAgICAgICBsYXlvdXQ6IFtcclxuICAgICAgICAgICAge3ZhcmlhYmxlOiBcIkZvcm1hdFwiLCB0cmVhdG1lbnRzOiBbXCJPbmVMaW5lXCIsIFwiTXVsdGlMaW5lXCJdfVxyXG4gICAgICAgIF0sXHJcblxyXG4gICAgICAgIHJlcGV0aXRpb25zOiAxMCxcclxuXHJcbiAgICAgICAgbWVhc3VyZW1lbnQ6IFJlYWN0aW9uX1RpbWUoa2V5cyhbXCIwXCIsIFwiMVwiLCBcIjNcIl0pKSxcclxuXHJcbiAgICAgICAgdGFza19jb25maWd1cmF0aW9uOiAodDogVGFzaykgPT4ge1xyXG5cclxuICAgICAgICAgICAgbGV0IHN0cmluZ190b19zaG93O1xyXG5cclxuICAgICAgICAgICAgc3RyaW5nX3RvX3Nob3cgPSBnZW5lcmF0ZV9ib29sZWFuX2V4cHJlc3Npb25fYXNfc3RyaW5nKHQudHJlYXRtZW50X3ZhbHVlKFwiRm9ybWF0XCIpKTtcclxuXHJcbiAgICAgICAgICAgIHQuZXhwZWN0ZWRfYW5zd2VyID0gXCIxXCI7XHJcblxyXG4gICAgICAgICAgICB0LmRvX3ByaW50X3Rhc2sgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB3cml0ZXIuY2xlYXJfc3RhZ2UoKTtcclxuICAgICAgICAgICAgICAgIHdyaXRlci5wcmludF9odG1sX29uX3N0YWdlKFxyXG4gICAgICAgICAgICAgICAgICAgIFwiPGRpdiBjbGFzcz0nc291cmNlY29kZSc+XCJcclxuICAgICAgICAgICAgICAgICAgICArIHdyaXRlci5jb252ZXJ0X3N0cmluZ190b19odG1sX3N0cmluZyhzdHJpbmdfdG9fc2hvdylcclxuICAgICAgICAgICAgICAgICAgICArIFwiPC9kaXY+XCJcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0LmFjY2VwdHNfYW5zd2VyID0gKHMpID0+IHRydWU7XHJcblxyXG4gICAgICAgICAgICB0LmRvX3ByaW50X2FmdGVyX3Rhc2tfaW5mb3JtYXRpb24gPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB3cml0ZXIucHJpbnRfZXJyb3Jfc3RyaW5nX29uX3N0YWdlKHdyaXRlci5jb252ZXJ0X3N0cmluZ190b19odG1sX3N0cmluZyhcclxuICAgICAgICAgICAgICAgICAgICBcIlRoZSBjb3JyZWN0IGFuc3dlciB3YXM6IFwiICsgdC5leHBlY3RlZF9hbnN3ZXIgKyBcIlxcblxcblwiICtcclxuICAgICAgICAgICAgICAgICAgICBcIkluIGNhc2UsIHlvdSBmZWVsIG5vdCBjb25jZW50cmF0ZWQgZW5vdWdoLCBtYWtlIGEgc2hvcnQgYnJlYWsuXFxuXFxuXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgIFwiUHJlc3MgW0VudGVyXSB0byBnbyBvbi4gXCIpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxuXHJcbkJST1dTRVJfRVhQRVJJTUVOVChleHBlcmltZW50X2NvbmZpZ3VyYXRpb25fZnVuY3Rpb24pO1xyXG4iLCJpbXBvcnQge1xyXG4gICAgcmFuZG9tX2ludGVnZXJfdXBfdG9fZXhjbHVkaW5nLFxyXG4gICAgcmFuZG9tX2xvd2VyX2Nhc2VfbGV0dGVyX2V4Y2VwdFxyXG59IGZyb20gXCJFeHBlcmltZW50YXRpb24vc3JjL0V4cGVyaW1lbnRhdGlvbi9FeHBlcmltZW50YXRpb25cIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZV9ib29sZWFuX2V4cHJlc3Npb25fYXNfc3RyaW5nKHRyZWF0X3Zhcl9mb3JtYXQ6c3RyaW5nKTpzdHJpbmcge1xyXG5cclxuICAgIGxldCBsaXRlcmFsczpzdHJpbmdbXSA9IFtdO1xyXG4gICAgbGV0IHJldHVybl9zdHJpbmcgPSBbXTtcclxuXHJcbiAgICBmb3IgKGxldCBjPTA7IGMgPCA4OyBjKyspIHtcclxuICAgICAgICBsZXQgbmV4dF9ib29sID0gcmFuZG9tX2ludGVnZXJfdXBfdG9fZXhjbHVkaW5nKDIpPT0xP1widHJ1ZVwiOlwiZmFsc2VcIjtcclxuICAgICAgICBsaXRlcmFscy5wdXNoKG5leHRfYm9vbCk7XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChsZXQgYz0wOyBjIDwgNjsgYysrKSB7XHJcblxyXG4gICAgICAgIGxldCBuZXh0X29wZXJhdG9yO1xyXG5cclxuICAgICAgICBpZih0cmVhdF92YXJfZm9ybWF0ID09IFwiT25lTGluZVwiKVxyXG4gICAgICAgICAgICBuZXh0X29wZXJhdG9yPSByYW5kb21faW50ZWdlcl91cF90b19leGNsdWRpbmcoMik9PTE/XCIgJiYgXCI6XCIgfHwgXCI7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICBuZXh0X29wZXJhdG9yPSByYW5kb21faW50ZWdlcl91cF90b19leGNsdWRpbmcoMik9PTE/XCIgJiYgXCI6XCJcXG4gfHwgXCI7XHJcblxyXG4gICAgICAgIHJldHVybl9zdHJpbmcucHVzaChsaXRlcmFsc1tjXSArIG5leHRfb3BlcmF0b3IpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybl9zdHJpbmcucHVzaChsaXRlcmFsc1s3XSk7XHJcblxyXG4gICAgcmV0dXJuIHJldHVybl9zdHJpbmcuam9pbihcIlwiKTtcclxufVxyXG5cclxuLy8gbGV0IGR1bW15ID0gZ2VuZXJhdGVfYm9vbGVhbl9leHByZXNzaW9uX2FzX3N0cmluZyhcIk11bHRpTGluZVwiKTtcclxuLy8gY29uc29sZS5sb2coZHVtbXkpO1xyXG4iLCJpbXBvcnQge01lYXN1cmVtZW50X1R5cGUsIE91dHB1dF9Db21tYW5kfSBmcm9tIFwiLi4vRXhwZXJpbWVudGF0aW9uXCI7XG5pbXBvcnQge1F1ZXN0aW9ufSBmcm9tIFwiLi4vLi4vQXV0b21hdGFfRm9yd2FyZGVycy9RdWVzdGlvbm5haXJlX0ZvcndhcmRlclwiO1xuaW1wb3J0IHtUYXNrfSBmcm9tIFwiLi4vVGFza1wiO1xuaW1wb3J0IHtFeHBlcmltZW50X0RlZmluaXRpb259IGZyb20gXCIuLi9FeHBlcmltZW50X0RlZmluaXRpb25cIjtcbmltcG9ydCB7U2VxdWVudGlhbF9Gb3J3YXJkZXJfRm9yd2FyZGVyfSBmcm9tIFwiLi4vLi4vQm9va3MvU2VxdWVudGlhbF9Gb3J3YXJkZXJfRm9yd2FyZGVyXCI7XG5pbXBvcnQge1RyZWF0bWVudHNfQ29tYmluYXRvcn0gZnJvbSBcIi4uL3RyZWF0bWVudHMvVHJlYXRtZW50c19Db21iaW5hdG9yXCI7XG5pbXBvcnQge0NvZGVfRXhwZXJpbWVudF9EZWZpbml0aW9ufSBmcm9tIFwiLi4vQ29kZV9FeHBlcmltZW50X0RlZmluaXRpb25cIjtcbmltcG9ydCB7VHJhaW5pbmdfQ29uZmlndXJhdGlvbn0gZnJvbSBcIi4uL1RyYWluaW5nX0NvbmZpZ3VyYXRpb25cIjtcbmltcG9ydCB7SW5kZXBlbmRlbnRfVmFyaWFibGVzfSBmcm9tIFwiLi4vdHJlYXRtZW50cy9JbmRlcGVuZGVudF9WYXJpYWJsZXNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZV9jb2RlX2V4cGVyaW1lbnRfZXhlY3V0aW9uKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNmZzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBlcmltZW50X25hbWUgICAgIDpzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VlZCAgICAgICAgICAgICAgICA6c3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludHJvZHVjdGlvbl9wYWdlcyAgOk91dHB1dF9Db21tYW5kW10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zdF9xdWVzdGlvbm5haXJlPzogUXVlc3Rpb25bXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVfcnVuX3RyYWluaW5nX291dHB1dDogT3V0cHV0X0NvbW1hbmQsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFpbmluZ19jb25maWd1cmF0aW9uPyAgICAgICAgIDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaXhlZF90cmVhdG1lbnRzPzogc3RyaW5nW11bXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FuX2JlX2NhbmNlbGxlZDogYm9vbGVhbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FuX2JlX3JlcGVhdGVkOiBib29sZWFuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZV9ydW5fZXhwZXJpbWVudF9vdXRwdXQ6IE91dHB1dF9Db21tYW5kLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmlzaF9wYWdlcyAgICAgICAgOk91dHB1dF9Db21tYW5kW10sXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXlvdXQgICAgICAgICAgICAgIDp7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhYmxlOiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyZWF0bWVudHM6IHN0cmluZ1tdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVtdLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwZXRpdGlvbnMgICAgICAgICA6bnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhc2tfY29uZmlndXJhdGlvbiAgOih0YXNrOlRhc2spID0+dm9pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZWFzdXJlbWVudCAgICAgICAgIDpNZWFzdXJlbWVudF9UeXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmlzaF9mdW5jdGlvbiAgICAgOihleHBlcmltZW50OkV4cGVyaW1lbnRfRGVmaW5pdGlvbik9PnZvaWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbilcbiAgICA6U2VxdWVudGlhbF9Gb3J3YXJkZXJfRm9yd2FyZGVyXG57XG4gICAgbGV0IHZhcmlhYmxlczogSW5kZXBlbmRlbnRfVmFyaWFibGVzID0gSW5kZXBlbmRlbnRfVmFyaWFibGVzLmZyb21fbGF5b3V0KGNmZy5sYXlvdXQpO1xuXG4gICAgbGV0IGFsbF90cmVhdG1lbnRfY29tYmluYXRpb25zOiBUcmVhdG1lbnRzX0NvbWJpbmF0b3IgPSBuZXcgVHJlYXRtZW50c19Db21iaW5hdG9yKHZhcmlhYmxlcywgY2ZnLnJlcGV0aXRpb25zKTtcblxuICAgIGxldCBleHBlcmltZW50X2RlZmluaXRpb24gPSBuZXcgQ29kZV9FeHBlcmltZW50X0RlZmluaXRpb24oXG4gICAgICAgIGNmZy5leHBlcmltZW50X25hbWUsXG4gICAgICAgIGZhbHNlLFxuICAgICAgICBhbGxfdHJlYXRtZW50X2NvbWJpbmF0aW9ucyxcbiAgICAgICAgdmFyaWFibGVzLFxuICAgICAgICBjZmcucmVwZXRpdGlvbnMsXG4gICAgICAgIGNmZy5tZWFzdXJlbWVudCxcbiAgICAgICAgY2ZnLnRhc2tfY29uZmlndXJhdGlvbixcblxuICAgICk7XG5cbiAgICBsZXQgdHJhaW5pbmdfY29uZmlndXJhdGlvbjogVHJhaW5pbmdfQ29uZmlndXJhdGlvbiA9IG5ldyBUcmFpbmluZ19Db25maWd1cmF0aW9uKGNmZy50cmFpbmluZ19jb25maWd1cmF0aW9uKTtcblxuICAgIGxldCBleHBlcmltZW50X2V4ZWN1dGlvbiA9IGV4cGVyaW1lbnRfZGVmaW5pdGlvbi5jcmVhdGVfY29kZV9hbGxfZXhwZXJpbWVudF9hdXRvbWF0YXMoXG4gICAgICAgIHtcbiAgICAgICAgICAgIHNlZWQ6IGNmZy5zZWVkLFxuICAgICAgICAgICAgaW50cm9kdWN0aW9uX3RleHRzOiBjZmcuaW50cm9kdWN0aW9uX3BhZ2VzLFxuICAgICAgICAgICAgcG9zdF9xdWVzdGlvbm5haXJlOiBjZmcucG9zdF9xdWVzdGlvbm5haXJlLFxuICAgICAgICAgICAgcHJlX3J1bl90cmFpbmluZ19vdXRwdXQ6IGNmZy5wcmVfcnVuX3RyYWluaW5nX291dHB1dCxcbiAgICAgICAgICAgIHRyYWluaW5nX2NvbmZpZ3VyYXRpb246IHRyYWluaW5nX2NvbmZpZ3VyYXRpb24sXG4gICAgICAgICAgICAvLyBwb3N0X3J1bl90cmFpbmluZ19vdXRwdXQ6IGNmZy5wb3N0X3J1bl90cmFpbmluZ19vdXRwdXQsXG4gICAgICAgICAgICBwcmVfcnVuX2V4cGVyaW1lbnRfb3V0cHV0OiBjZmcucHJlX3J1bl9leHBlcmltZW50X291dHB1dCxcbiAgICAgICAgICAgIC8vIHBvc3RfcnVuX2V4cGVyaW1lbnRfb3V0cHV0OiBjZmcucG9zdF9ydW5fZXhwZXJpbWVudF9vdXRwdXQsXG4gICAgICAgICAgICBmaW5pc2hfdGV4dHM6IGNmZy5maW5pc2hfcGFnZXMsXG4gICAgICAgICAgICBtZWFzdXJlbWVudDogY2ZnLm1lYXN1cmVtZW50LFxuICAgICAgICAgICAgZmluaXNoX2Z1bmN0aW9uOiBjZmcuZmluaXNoX2Z1bmN0aW9uXG4gICAgICAgIH1cbiAgICApO1xuXG4gICAgcmV0dXJuIGV4cGVyaW1lbnRfZXhlY3V0aW9uO1xufVxuIl0sIm5hbWVzIjpbImdsb2JhbCIsIm1vZHVsZSIsIlhvckdlbiIsInNlZWQiLCJtZSIsInRoaXMiLCJzdHJzZWVkIiwibmV4dCIsInQiLCJ4IiwieSIsInoiLCJ3IiwidiIsImQiLCJrIiwibGVuZ3RoIiwiY2hhckNvZGVBdCIsImNvcHkiLCJmIiwiaW1wbCIsIm9wdHMiLCJ4ZyIsInN0YXRlIiwicHJuZyIsImRvdWJsZSIsInJlc3VsdCIsImludDMyIiwicXVpY2siLCJleHBvcnRzIiwieG9yd293IiwiWCIsImkiLCJqIiwicHVzaCIsImluaXQiLCJzbGljZSIsIkRhdGUiLCJ4b3JzaGlmdDciLCJBbGVhIiwibiIsIm1hc2giLCJkYXRhIiwiU3RyaW5nIiwiaCIsInMwIiwiYyIsInMxIiwiczIiLCJhbGVhIiwieG9yMTI4IiwieG9yNDA5NiIsInR5Y2hlaSIsInNyIiwiYiIsImEiLCJNYXRoIiwiZmxvb3IiLCJwb29sIiwibWF0aCIsIm5vZGVjcnlwdG8iLCJ3aWR0aCIsInN0YXJ0ZGVub20iLCJwb3ciLCJzaWduaWZpY2FuY2UiLCJvdmVyZmxvdyIsIm1hc2siLCJzZWVkcmFuZG9tIiwib3B0aW9ucyIsImNhbGxiYWNrIiwia2V5Iiwic2hvcnRzZWVkIiwibWl4a2V5IiwiZmxhdHRlbiIsImVudHJvcHkiLCJ0b3N0cmluZyIsIm91dCIsInJhbmRvbUJ5dGVzIiwiVWludDhBcnJheSIsImNyeXB0byIsIm1zQ3J5cHRvIiwiZ2V0UmFuZG9tVmFsdWVzIiwiZSIsImJyb3dzZXIiLCJuYXZpZ2F0b3IiLCJwbHVnaW5zIiwic2NyZWVuIiwiYXV0b3NlZWQiLCJhcmM0IiwiQVJDNCIsImciLCJTIiwicGFzcyIsImlzX21hdGhfY2FsbCIsImtleWxlbiIsInMiLCJjb3VudCIsInIiLCJvYmoiLCJkZXB0aCIsInByb3AiLCJ0eXAiLCJzbWVhciIsInN0cmluZ3NlZWQiLCJmcm9tQ2hhckNvZGUiLCJhcHBseSIsInJhbmRvbSIsImV4Iiwic2VsZiIsImxpbWl0IiwibWF4IiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwidW5kZWZpbmVkIiwiaWQiLCJsb2FkZWQiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiY2FsbCIsImFtZEQiLCJFcnJvciIsImFtZE8iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZGVmaW5pdGlvbiIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsIm5tZCIsInBhdGhzIiwiY2hpbGRyZW4iLCJjb250YWlucyIsImNvbGxlY3Rpb24iLCJlbGVtZW50IiwiaW5kZXhPZiIsImZvcndhcmRlcl9uYW1lIiwic2V0X2FjdGl2ZV9mdW5jdGlvbiIsImlucHV0IiwiYXV0b21hdGEiLCJhZGRfYWN0aXZhdGlvbl9mdW5jdGlvbiIsInRvX2FkZCIsInNldF9hY3RpdmUiLCJjb25maWciLCJjdXJyZW50X3N0YXRlIiwidHJhbnNpdGlvbnMiLCJzdGF0ZXMiLCJzdGFydF9zdGF0ZSIsInN0YXJ0IiwiY29uc29sZSIsImxvZyIsImZyb20iLCJpbml0X2Z1bmN0aW9uIiwiZW5kX3N0YXRlcyIsIm1hdGNoaW5nX3RyYW5zaXRpb24iLCJmaXJzdF9tYXRjaCIsInN0YXRlX2JlZm9yZSIsIm5leHRfc3RhdGUiLCJhY3Rpb24iLCJhY2NlcHRzIiwiaW5pdGlhbGl6ZSIsImFkZF9maW5pc2hfYWN0aW9uIiwidHJhbnNpdGlvbiIsImlzX3RyYW5zaXRpb25fdG9fZW5kIiwiYWRkX2FjdGlvbl90b190cmFuc2l0aW9ucyIsImlzX3RhcmdldF90cmFuc2l0aW9uIiwibWVhc3VyZW1lbnQiLCJwcmVfcnVuX2luc3RydWN0aW9ucyIsInBvc3RfcnVuX2luc3RydWN0aW9ucyIsImNyZWF0ZV9hdXRvbWF0YSIsInNob3dfaW50cm8iLCJBdXRvbWF0YSIsImF1dG9tYXRhX2NvbmZpZ3VyYXRvciIsIm91dHB1dF93cml0ZXIiLCJjbGVhcl9hbGwiLCJwcmludF9zdHJpbmdfdG9fc3RhdGUiLCJlbXB0eV9zY3JlZW5fYW5kX3Nob3dfaW5zdHJ1Y3Rpb25zIiwiY29tbWFuZCIsImNsZWFyX3N0YXRlIiwiY2xlYXJfc3RhZ2UiLCJBdXRvbWF0YV9Gb3J3YXJkZXIiLCJzdHJpbmdzIiwiYWNjZXB0ZWRfc3RyaW5ncyIsIlRyYW5zaXRpb25fQWNjZXB0b3IiLCJhY2NlcHRvcl9mdW5jdGlvbiIsImFjY2VwdG9yIiwiaXNfdmFsaWRfaW5wdXQiLCJTaW1wbGVfVHJhbnNpdGlvbiIsImFjY2VwdF9pbnB1dF9mdW5jdGlvbiIsIlRyYW5zaXRpb24iLCJUcmFuc2l0aW9uX0FjY2VwdG9yX0Z1bmN0aW9uIiwidG8iLCJvbiIsImlmIiwiY2hlY2siLCJkbyIsIm9uX2FueSIsImtleXMiLCJ2YXJpYWJsZV9uYW1lIiwicXVlc3Rpb25fdGV4dCIsImFuc3dlciIsInN0b3JlX2Fuc3dlciIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJ2YWx1ZSIsImFsdGVybmF0aXZlcyIsImlucHV0X2h0bWwiLCJodG1sX3N0cmluZyIsImluZGV4IiwiZm9yRWFjaCIsIlF1ZXN0aW9uIiwicXVlc3Rpb25zIiwicHJpbnRfaHRtbF9vbl9zdGFnZSIsImN1cnJlbnRfcXVlc3Rpb25fbnVtYmVyIiwiQXV0b21hdGFfQ29uZmlndXJhdG9yIiwiYWRkX3Jlc3VsdF90b19xdWVzdGlvbiIsImNyZWF0ZV9xdWVzdGlvbm5haXJlX2h0bWxfc3RyaW5nIiwib25jbGljayIsInNob3dfb3V0cm8iLCJxIiwiQXV0b21hdGFfV2l0aF9PdXRwdXRfRm9yd2FyZGVyIiwidmFyX25hbWUiLCJxdWVzdGlvbiIsIkFsdGVybmF0aXZlcyIsImNvbnZlcnRfc3RyaW5nX3RvX2h0bWxfc3RyaW5nIiwicmVwbGFjZSIsInN0cmluZ19wYWdlX2NvbW1hbmQiLCJwcmludF9zdHJpbmdfb25fc3RhZ2UiLCJzdGFnZV9zdHJpbmdfcGFnZXNfY29tbWFuZHMiLCJwYWdlcyIsInJldCIsImdldF9naXZlbl9hbnN3ZXIiLCJwcmludF9vbl9pbnB1dF9yZXNwb25zZSIsImdpdmVuX2Fuc3dlciIsInNldF9mb2N1c19vbl9pbnB1dCIsImlucHV0X3R5cGUiLCJhY2NlcHRlZF9yZXNwb25zZXMiLCJzdGFydF9tZWFzdXJlbWVudCIsInRhc2siLCJzdGFydF90aW1lIiwiZ2V0VGltZSIsInZhbHVlT2YiLCJwcmludF90YXNrIiwic3RvcF9tZWFzdXJlbWVudCIsImVuZF90aW1lIiwicmVxdWlyZWRfbWlsbGlzZWNvbmRzIiwiZG9fcHJpbnRfYWZ0ZXJfdGFza19pbmZvcm1hdGlvbiIsImluY29ycmVjdF9yZXNwb25zZSIsImV4cGVyaW1lbnRfZGVmaW5pdGlvbiIsImludmFsaWRfYW5zd2VycyIsImRvX3ByaW50X2Vycm9yX21lc3NhZ2UiLCJkZW1hbmRzX3BlbmFsdHkiLCJwZW5hbHR5X2lzX292ZXIiLCJNZWFzdXJlbWVudF9UeXBlIiwicGVuYWx0eV9zZWNvbmRzIiwicGVuYWx0eV9zdGFydGVkIiwicGVuYWx0eV9zdGFydF9wb2ludCIsInBlbmFsdHlfbWlsaXNlY29uZHMiLCJkZWxldGVfcGVuYWx0eSIsImRpZmYiLCJwcmludF9pbnB1dF9yZXF1ZXN0IiwiYXNrX2Zvcl9pbnB1dCIsImlucHV0X3N0cmluZyIsImFjY2VwdGVkX2tleXMiLCJrZXlfcHJlc3NlZCIsIkV4cGVyaW1lbnRfSW5wdXRfVHlwZSIsIlJhbmRvbSIsInByZSIsInBvc3QiLCJuZXdfcmFuZG9tX2ludGVnZXIiLCJ1cHBlcl9saW1pdCIsInRydW5jIiwic2V0X3NlZWQiLCJTRVRfU0VFRCIsInJhbmRvbV9pbnRlZ2VyX3VwX3RvX2V4Y2x1ZGluZyIsImRvX3JhbmRvbV9hcnJheV9zb3J0IiwiYXJyYXkiLCJzcGxpY2UiLCJ0YyIsInRleHQiLCJleHBlY3RlZF9hbnN3ZXIiLCJ0YXNrX251bWJlcl9pbl9leGVjdXRpb24iLCJpc190cmFpbmluZyIsImhhc19wcmVfdGFza19kZXNjcmlwdGlvbiIsImRvX3ByaW50X3Rhc2siLCJkb19wcmludF9wcmVfdGFzayIsImFjY2VwdHNfYW5zd2VyX2Z1bmN0aW9uIiwidHJlYXRtZW50X2NvbWJpbmF0aW9uIiwiYWNjZXB0c19hbnN3ZXIiLCJuZXh0X3Rhc2siLCJ0YXNrcyIsImh0bWxfc3RyaW5nX3dpdGhfY21kIiwiY21kIiwiaHRtbF9ub2RlX3dpdGhfY21kIiwiYWZ0ZXJfdGFza19zdHJpbmdfY29uc3RydWN0b3IiLCJhX3N0cmluZ19jb25zdHJ1Y3RvciIsInByaW50X3ByZV90YXNrX2luZm8iLCJ0cmVhdG1lbnRfdmFsdWUiLCJ0cmVhdG1lbnRfbmFtZSIsInRyZWF0bWVudCIsInZhcmlhYmxlIiwibmFtZSIsInNldF9jb21wdXRlZF92YXJpYWJsZV92YWx1ZSIsInZhcmlhYmxlcyIsInJlcGV0aXRpb25zIiwiY2xvbmUiLCJUcmVhdG1lbnRzX0NvbWJpbmF0b3IiLCJjcmVhdGVfdHJlYXRtZW50X2NvbWJpbmF0aW9ucyIsInRyZWF0bWVudF9jb21iaW5hdGlvbnMiLCJjb25jYXQiLCJjcmVhdGVfdGFza3MiLCJUYXNrIiwiZXhwZXJpbWVudF9kZWZpbml0aW9uX3Rhc2tfY3JlYXRvciIsImdldF92YXJpYWJsZV9uYW1lZCIsImV4cGVyaW1lbnRfbmFtZSIsInRyZWF0bWVudHNfY29tYmluYXRvciIsInRhc2tfY3JlYXRvciIsInF1ZXN0aW9ubmFpcmVzIiwidGVtcGxhdGUiLCJpbml0X2V4cGVyaW1lbnQiLCJhbGxfaW5kZXBlbmRlbnRfdmFyaWFibGVzIiwiaW5kZXBlbmRlbnRfdmFyaWFibGVzIiwiZ2VuZXJhdGVfY3N2X2RhdGEiLCJwcmludF90b19hcnJheSIsImJvb2tfbmFtZSIsImN1cnJlbnRfcGFnZV9udW1iZXIiLCJzZXRfcGFnZV9pbmRleCIsInByaW50X3N0cmluZ190b19wYWdlX251bWJlciIsIm5hdmlnYXRpb25fc3RyaW5nIiwiZm9yd2FyZGVycyIsImN1cnJlbnRfZm9yd2FyZGVyX2luZGV4IiwiY3VycmVudF9mb3J3YXJkZXIiLCJpbnB1dF9zZXF1ZW5jZSIsImV4cGVyaW1lbnRfYXV0b21hdGFfbmFtZSIsImN1cnJlbnRfcGFnZV9pbmRleCIsInByaW50X2V4cGVyaW1lbnRfbmFtZSIsImN1cnJlbnRfdGFzayIsImF1dG9tYXRhX2NvbmZpZ3VyYXRpb24iLCJmaXJzdF90YXNrIiwic2V0X2V4cGVyaW1lbnRfaW5kZXgiLCJzaG93X3ByZV90YXNrX2luZm8iLCJpbmNfY3VycmVudF9leHBlcmltZW50IiwiY2xlYXJfZXJyb3IiLCJ0cmFpbmluZ19jb25maWd1cmF0aW9uIiwiY2FuX2JlX3JlcGVhdGVkIiwicHJpbnRfY2FuY2VsX3RleHQiLCJleHBlcmltZW50X3RyYW5zaXRpb25zIiwidGhpc190cmFuc2l0aW9ucyIsImNhbl9iZV9jYW5jZWxsZWQiLCJpbmNsdWRlcyIsIkV4cGVyaW1lbnRhdGlvbl9Gb3J3YXJkZXIiLCJjcmVhdGVfY29kZV9hbGxfZXhwZXJpbWVudF9hdXRvbWF0YXMiLCJjZmciLCJpbnRyb2R1Y3Rpb25fYm9vayIsIkJvb2tfRm9yd2FyZGVyIiwiaW50cm9kdWN0aW9uX3RleHRzIiwiZW5kaW5nX2Jvb2siLCJmaW5pc2hfdGV4dHMiLCJmaW5pc2hfZnVuY3Rpb24iLCJleHBlcmltZW50X2V4ZWN1dGlvbl9mb3J3YXJkZXIiLCJFeHBlcmltZW50X0ZvcndhcmRlciIsInByZV9ydW5fZXhwZXJpbWVudF9vdXRwdXQiLCJjbG9uZWRfZXhwZXJpbWVudF9kZWZpbml0aW9uIiwidHJhaW5pbmdfZm9yd2FyZGVyIiwiVHJhaW5pbmdfRXhlY3V0aW9uX0ZvcndhcmRlciIsInByZV9ydW5fdHJhaW5pbmdfb3V0cHV0IiwicG9zdF9xdWVzdGlvbm5haXJlIiwiUXVlc3Rpb25uYWlyZV9Gb3J3YXJkZXIiLCJTZXF1ZW50aWFsX0ZvcndhcmRlcl9Gb3J3YXJkZXIiLCJDb2RlX0V4cGVyaW1lbnRfRGVmaW5pdGlvbiIsIkV4cGVyaW1lbnRfRGVmaW5pdGlvbiIsIlRyZWF0bWVudCIsImRvX3dpdGhfY291bnRlciIsImNvdW50ZXIiLCJhbmRfY29sbGVjdCIsImFyciIsIl90aW1lcyIsInRpbWVzIiwiVHJlYXRtZW50X0NvbWJpbmF0aW9uIiwiZml4ZWRfdHJlYXRtZW50cyIsImFfdHJlYXRtZW50X2NvbWJpbmF0aW9uIiwiYTEiLCJhMiIsIml0ZXJhdGVfYm90aCIsInRyZWF0bWVudHMiLCJhU3RyaW5nIiwiYWxsX2FycmF5X2NvbWJpbmF0aW9uc19pbnRlcm5hbCIsImNvbWJpbmF0aW9uIiwibGFzdCIsInNoaWZ0IiwicG9wIiwidW5zaGlmdCIsImFsbF9hcnJheV9jb21iaW5hdGlvbnMiLCJwdXNoX3ZhcmlhYmxlIiwiSW5kZXBlbmRlbnRfVmFyaWFibGUiLCJtYXAiLCJmcm9tX2xheW91dCIsImxheW91dCIsIkluZGVwZW5kZW50X1ZhcmlhYmxlcyIsImFWYXIiLCJnZXRfaHRtbF9lbGVtZW50X2J5X2lkIiwiaW5uZXJIVE1MIiwiZmlyc3RDaGlsZCIsInJlbW92ZUNoaWxkIiwicHJpbnRfZXJyb3Jfc3RyaW5nX29uX3N0YWdlIiwicCIsImNyZWF0ZUVsZW1lbnQiLCJsIiwic2V0QXR0cmlidXRlIiwidGV4dENvbnRlbnQiLCJhcHBlbmRDaGlsZCIsImZvY3VzIiwiY3JlYXRlX2h0bWxfZWxlbWVudF9mcm9tX3N0cmluZyIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsImJvZHkiLCJwcmludF9odG1sX29uX2Vycm9yIiwiRXhwZXJpbWVudF9PdXRwdXRfV3JpdGVyIiwid3JpdGVyIiwia2V5X2xpc3QiLCJicm93c2VyX291dHB1dCIsIkJyb3dzZXJfT3V0cHV0X1dyaXRlciIsImludHJvZHVjdGlvbl9wYWdlcyIsInByZV9ydW5fdHJhaW5pbmdfaW5zdHJ1Y3Rpb25zIiwicHJlX3J1bl9leHBlcmltZW50X2luc3RydWN0aW9ucyIsImZpbmlzaF9wYWdlcyIsIktleV9QcmVzc2luZyIsIlJlYWN0aW9uX1RpbWVfTWVhc3VyZW1lbnQiLCJ0YXNrX2NvbmZpZ3VyYXRpb24iLCJzdHJpbmdfdG9fc2hvdyIsInRyZWF0X3Zhcl9mb3JtYXQiLCJsaXRlcmFscyIsInJldHVybl9zdHJpbmciLCJuZXh0X2Jvb2wiLCJuZXh0X29wZXJhdG9yIiwiam9pbiIsImdlbmVyYXRlX2Jvb2xlYW5fZXhwcmVzc2lvbl9hc19zdHJpbmciLCJ0aGlzX21lYXN1cmVtZW50IiwiZXhwZXJpbWVudF9hdXRvbWF0YSIsImFsbF90cmVhdG1lbnRfY29tYmluYXRpb25zIiwiVHJhaW5pbmdfQ29uZmlndXJhdGlvbiIsImNyZWF0ZV9jb2RlX2V4cGVyaW1lbnRfZXhlY3V0aW9uIiwiZXhwIiwiYmxvYiIsImVsZW0iLCJyZW1vdmVFdmVudExpc3RlbmVyIiwia2V5X2ZvcndhcmRlciIsIkJsb2IiLCJ0eXBlIiwid2luZG93IiwiaHJlZiIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsImRvd25sb2FkIiwiY2xpY2siLCJldmVudCIsInBvc3RmaXgiLCJrZXlfc3RyaW5nIiwiY3RybEtleSIsImFsdEtleSIsImFkZEV2ZW50TGlzdGVuZXIiLCJCUk9XU0VSX0VYUEVSSU1FTlQiXSwic291cmNlUm9vdCI6IiJ9