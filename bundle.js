(()=>{var t={31:function(t,e,n){var r;!function(t,i){function s(t){var e=this,n="";e.next=function(){var t=e.x^e.x>>>2;return e.x=e.y,e.y=e.z,e.z=e.w,e.w=e.v,(e.d=e.d+362437|0)+(e.v=e.v^e.v<<4^t^t<<1)|0},e.x=0,e.y=0,e.z=0,e.w=0,e.v=0,t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),r==n.length&&(e.d=e.x<<10^e.x>>>4),e.next()}function a(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e.v=t.v,e.d=t.d,e}function o(t,e){var n=new s(t),r=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,r&&("object"==typeof r&&a(r,n),i.state=function(){return a(n,{})}),i}i&&i.exports?i.exports=o:n.amdD&&n.amdO?void 0===(r=function(){return o}.call(e,n,e,i))||(i.exports=r):this.xorwow=o}(0,t=n.nmd(t),n.amdD)},67:function(t,e,n){var r;!function(t,i){function s(t){var e=this;e.next=function(){var t,n,r=e.x,i=e.i;return t=r[i],n=(t^=t>>>7)^t<<24,n^=(t=r[i+1&7])^t>>>10,n^=(t=r[i+3&7])^t>>>3,n^=(t=r[i+4&7])^t<<7,t=r[i+7&7],n^=(t^=t<<13)^t<<9,r[i]=n,e.i=i+1&7,n},function(t,e){var n,r=[];if(e===(0|e))r[0]=e;else for(e=""+e,n=0;n<e.length;++n)r[7&n]=r[7&n]<<15^e.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],t.x=r,t.i=0,n=256;n>0;--n)t.next()}(e,t)}function a(t,e){return e.x=t.x.slice(),e.i=t.i,e}function o(t,e){null==t&&(t=+new Date);var n=new s(t),r=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,r&&(r.x&&a(r,n),i.state=function(){return a(n,{})}),i}i&&i.exports?i.exports=o:n.amdD&&n.amdO?void 0===(r=function(){return o}.call(e,n,e,i))||(i.exports=r):this.xorshift7=o}(0,t=n.nmd(t),n.amdD)},180:function(t,e,n){var r;!function(t,i){function s(t){var e,n=this,r=(e=4022871197,function(t){t=String(t);for(var n=0;n<t.length;n++){var r=.02519603282416938*(e+=t.charCodeAt(n));r-=e=r>>>0,e=(r*=e)>>>0,e+=4294967296*(r-=e)}return 2.3283064365386963e-10*(e>>>0)});n.next=function(){var t=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=t-(n.c=0|t)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(t),n.s0<0&&(n.s0+=1),n.s1-=r(t),n.s1<0&&(n.s1+=1),n.s2-=r(t),n.s2<0&&(n.s2+=1),r=null}function a(t,e){return e.c=t.c,e.s0=t.s0,e.s1=t.s1,e.s2=t.s2,e}function o(t,e){var n=new s(t),r=e&&e.state,i=n.next;return i.int32=function(){return 4294967296*n.next()|0},i.double=function(){return i()+11102230246251565e-32*(2097152*i()|0)},i.quick=i,r&&("object"==typeof r&&a(r,n),i.state=function(){return a(n,{})}),i}i&&i.exports?i.exports=o:n.amdD&&n.amdO?void 0===(r=function(){return o}.call(e,n,e,i))||(i.exports=r):this.alea=o}(0,t=n.nmd(t),n.amdD)},181:function(t,e,n){var r;!function(t,i){function s(t){var e=this,n="";e.x=0,e.y=0,e.z=0,e.w=0,e.next=function(){var t=e.x^e.x<<11;return e.x=e.y,e.y=e.z,e.z=e.w,e.w^=e.w>>>19^t^t>>>8},t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),e.next()}function a(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e}function o(t,e){var n=new s(t),r=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,r&&("object"==typeof r&&a(r,n),i.state=function(){return a(n,{})}),i}i&&i.exports?i.exports=o:n.amdD&&n.amdO?void 0===(r=function(){return o}.call(e,n,e,i))||(i.exports=r):this.xor128=o}(0,t=n.nmd(t),n.amdD)},234:()=>{},391:(t,e,n)=>{var r=n(180),i=n(181),s=n(31),a=n(67),o=n(833),_=n(717),u=n(801);u.alea=r,u.xor128=i,u.xorwow=s,u.xorshift7=a,u.xor4096=o,u.tychei=_,t.exports=u},717:function(t,e,n){var r;!function(t,i){function s(t){var e=this,n="";e.next=function(){var t=e.b,n=e.c,r=e.d,i=e.a;return t=t<<25^t>>>7^n,n=n-r|0,r=r<<24^r>>>8^i,i=i-t|0,e.b=t=t<<20^t>>>12^n,e.c=n=n-r|0,e.d=r<<16^n>>>16^i,e.a=i-t|0},e.a=0,e.b=0,e.c=-1640531527,e.d=1367130551,t===Math.floor(t)?(e.a=t/4294967296|0,e.b=0|t):n+=t;for(var r=0;r<n.length+20;r++)e.b^=0|n.charCodeAt(r),e.next()}function a(t,e){return e.a=t.a,e.b=t.b,e.c=t.c,e.d=t.d,e}function o(t,e){var n=new s(t),r=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,r&&("object"==typeof r&&a(r,n),i.state=function(){return a(n,{})}),i}i&&i.exports?i.exports=o:n.amdD&&n.amdO?void 0===(r=function(){return o}.call(e,n,e,i))||(i.exports=r):this.tychei=o}(0,t=n.nmd(t),n.amdD)},801:function(t,e,n){var r;!function(i,s,a){var o,_=256,u=a.pow(_,6),c=a.pow(2,52),h=2*c,l=255;function p(t,e,n){var r=[],l=g(f((e=1==e?{entropy:!0}:e||{}).entropy?[t,w(s)]:null==t?function(){try{var t;return o&&(t=o.randomBytes)?t=t(_):(t=new Uint8Array(_),(i.crypto||i.msCrypto).getRandomValues(t)),w(t)}catch(t){var e=i.navigator,n=e&&e.plugins;return[+new Date,i,n,i.screen,w(s)]}}():t,3),r),p=new d(r),x=function(){for(var t=p.g(6),e=u,n=0;t<c;)t=(t+n)*_,e*=_,n=p.g(1);for(;t>=h;)t/=2,e/=2,n>>>=1;return(t+n)/e};return x.int32=function(){return 0|p.g(4)},x.quick=function(){return p.g(4)/4294967296},x.double=x,g(w(p.S),s),(e.pass||n||function(t,e,n,r){return r&&(r.S&&m(r,p),t.state=function(){return m(p,{})}),n?(a.random=t,e):t})(x,l,"global"in e?e.global:this==a,e.state)}function d(t){var e,n=t.length,r=this,i=0,s=r.i=r.j=0,a=r.S=[];for(n||(t=[n++]);i<_;)a[i]=i++;for(i=0;i<_;i++)a[i]=a[s=l&s+t[i%n]+(e=a[i])],a[s]=e;(r.g=function(t){for(var e,n=0,i=r.i,s=r.j,a=r.S;t--;)e=a[i=l&i+1],n=n*_+a[l&(a[i]=a[s=l&s+e])+(a[s]=e)];return r.i=i,r.j=s,n})(_)}function m(t,e){return e.i=t.i,e.j=t.j,e.S=t.S.slice(),e}function f(t,e){var n,r=[],i=typeof t;if(e&&"object"==i)for(n in t)try{r.push(f(t[n],e-1))}catch(t){}return r.length?r:"string"==i?t:t+"\0"}function g(t,e){for(var n,r=t+"",i=0;i<r.length;)e[l&i]=l&(n^=19*e[l&i])+r.charCodeAt(i++);return w(e)}function w(t){return String.fromCharCode.apply(0,t)}if(g(a.random(),s),t.exports){t.exports=p;try{o=n(234)}catch(t){}}else void 0===(r=function(){return p}.call(e,n,e,t))||(t.exports=r)}("undefined"!=typeof self?self:this,[],Math)},833:function(t,e,n){var r;!function(t,i){function s(t){var e=this;e.next=function(){var t,n,r=e.w,i=e.X,s=e.i;return e.w=r=r+1640531527|0,n=i[s+34&127],t=i[s=s+1&127],n^=n<<13,t^=t<<17,n^=n>>>15,t^=t>>>12,n=i[s]=n^t,e.i=s,n+(r^r>>>16)|0},function(t,e){var n,r,i,s,a,o=[],_=128;for(e===(0|e)?(r=e,e=null):(e+="\0",r=0,_=Math.max(_,e.length)),i=0,s=-32;s<_;++s)e&&(r^=e.charCodeAt((s+32)%e.length)),0===s&&(a=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,s>=0&&(a=a+1640531527|0,i=0==(n=o[127&s]^=r+a)?i+1:0);for(i>=128&&(o[127&(e&&e.length||0)]=-1),i=127,s=512;s>0;--s)r=o[i+34&127],n=o[i=i+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,o[i]=r^n;t.w=a,t.X=o,t.i=i}(e,t)}function a(t,e){return e.i=t.i,e.w=t.w,e.X=t.X.slice(),e}function o(t,e){null==t&&(t=+new Date);var n=new s(t),r=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,r&&(r.X&&a(r,n),i.state=function(){return a(n,{})}),i}i&&i.exports?i.exports=o:n.amdD&&n.amdO?void 0===(r=function(){return o}.call(e,n,e,i))||(i.exports=r):this.xor4096=o}(0,t=n.nmd(t),n.amdD)}},e={};function n(r){var i=e[r];if(void 0!==i)return i.exports;var s=e[r]={id:r,loaded:!1,exports:{}};return t[r].call(s.exports,s,s.exports,n),s.loaded=!0,s.exports}n.amdD=function(){throw new Error("define cannot be used indirect")},n.amdO={},n.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),(()=>{"use strict";function t(t,e){return-1!=t.indexOf(e)}class e{constructor(t){this.set_active_function=()=>{},this.forwarder_name=t}input(t){this.automata.input(t)}add_activation_function(t){}set_active(){}}class r{constructor(t){this.current_state=-1,this.transitions=[],this.states=[],this.start_state=t.start,this.states=t.states;for(let t=0;t<this.states.length;t++)this.transitions.push([]);for(let e of t.transitions){null==this.transitions&&console.log("Something is wrong here"),null!=this.transitions&&null!=e.from||console.log("Something is wrong here"),null==this.transitions[e.from]&&console.log("Something is wrong here");try{this.transitions[e.from].push(e)}catch(t){console.log("weird")}}this.init_function=t.init_function,this.end_states=t.end_states}input(t){let e=this.first_match(t),n=this.current_state;null!=e&&(this.current_state=e.next_state,e.action(n,t,this.current_state))}start(){this.current_state=this.start_state}first_match(t){for(let e=0;e<this.transitions[this.current_state].length;e++)if(this.transitions[this.current_state][e].accepts(t))return this.transitions[this.current_state][e];return null}initialize(){this.current_state=this.start_state,this.init_function()}add_finish_action(t){for(let e of this.transitions)for(let n of e)if(this.is_transition_to_end(n)){let e=n.action;n.action=(n,r,i)=>{e(n,r,i),t()}}}is_transition_to_end(e){return t(this.end_states,e.next_state)}add_action_to_transitions(t,e){for(let n of this.transitions)for(let r of n)if(t(r)){let t=r.action;r.action=(n,r,i)=>{t(n,r,i),e()}}}}class i extends e{constructor(t,e,n,r){super(t),this.pre_run_instructions=n,this.post_run_instructions=r,this.measurement=e,this.automata=this.create_automata(),this.automata.initialize()}set_active(){this.show_intro()}create_automata(){return new r(this.automata_configurator())}output_writer(){return this.measurement.output_writer()}show_intro(){this.output_writer().clear_all(),this.output_writer().print_string_to_state(this.forwarder_name),this.pre_run_instructions()}empty_screen_and_show_instructions(t){this.output_writer().clear_state(),this.output_writer().clear_stage(),null==t||null==t?console.log("something is strange"):t()}}class s{constructor(t,e,n,r,i){this.states=t,this.start=e,this.init_function=n,this.transitions=r,this.end_states=i}}class a{}class o extends a{constructor(t){super(),this.acceptor_function=t}accepts(t){return this.acceptor_function(t)}}class _{constructor(t,e,n,r){this.from=t,this.acceptor=e,this.next_state=n,this.action=r}is_valid_input(t){return this.acceptor.accepts(t)}accepts(t){return this.acceptor.accepts(t)}}function u(t,e,n,r){return new _(t,new o(e),n,((t,e,n)=>r(e)))}function c(e){return{to:n=>({on:t=>({if:r=>({do:i=>u(e,(e=>e==t&&r(e)),n,i)}),do:r=>u(e,(e=>e==t),n,r)}),on_any:r=>({if:i=>({do:s=>u(e,(e=>t(r,e)&&i(e)),n,s)}),do:i=>u(e,(e=>t(r,e)),n,i)})})}}class h{constructor(t,e){this.answer=null,this.variable_name=t,this.question_text=e}store_answer(){let t=document.getElementById(this.variable_name);this.answer=t.value}}class l extends h{constructor(t,e,n){super(t,e),this.alternatives=n}input_html(){let t='<select id="'+this.variable_name+'">';t+="<option disabled selected value> -- select an option -- </option>";let e=0;return this.alternatives.forEach((n=>t+="<option value="+e+++">"+n+"</option>")),t+="</select>",t}store_answer(){let t=document.getElementById(this.variable_name);this.answer=this.alternatives[t.value]}}class p extends i{constructor(t,e){super("Questionnaire",e,(()=>e.output_writer().print_html_on_stage("Please, answer the following questions.<br>")),(()=>e.output_writer().print_html_on_stage("Thank you for answering the questions."))),this.current_question_number=-1,this.questions=t}automata_configurator(){return new s([0,1,2,3,4],0,(()=>{}),this.transitions(),[4])}transitions(){return[c(0).to(4).on("DONE").if((t=>!0)).do((t=>{this.add_result_to_question(),console.log("dummy")}))]}show_intro(){super.show_intro();let t=this.create_questionnaire_html_string();this.output_writer().print_html_on_stage(t),document.getElementById("DONE").onclick=()=>this.input("DONE")}show_outro(){}create_questionnaire_html_string(){let t="<fieldset><legend>Questionnaire</legend><div display: inline-block;><table>";return this.questions.forEach((e=>t+="<tr><td>"+e.question_text+"</td><td>"+e.input_html()+"</td></tr>")),t+="</table></div></fieldset><br><button id='DONE'>Ok - all questions answered</button>",t}add_result_to_question(){for(let t of this.questions)t.store_answer()}}var d=n(391);function m(t,e,n){return new l(t,e,n)}class f{convert_string_to_html_string(t){return function(t){return t.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#39;").replace(/\n/g,"<br/>").replace(/ /g,"&nbsp;")}(t)}string_page_command(t){return()=>this.print_string_on_stage(t)}stage_string_pages_commands(t){let e=[];for(let n of t)e.push(this.string_page_command(n));return e}get_given_answer(t){return t}print_on_input_response(t){}set_focus_on_input(){}clear_all(){this.clear_state(),this.clear_stage()}}class g{constructor(t){this.input_type=t}accepted_responses(){return this.input_type.accepted_responses()}given_answer(t){return this.input_type.given_answer(t)}start_measurement(t){this.start_time=(new Date).getTime().valueOf(),t.print_task()}stop_measurement(t,e){let n=(new Date).getTime().valueOf();e.given_answer=this.input_type.get_given_answer(t),e.required_milliseconds=n-this.start_time,e.do_print_after_task_information()}incorrect_response(t,e){let n=(new Date).getTime().valueOf(),r=e.experiment_definition.measurement.get_given_answer(t);e.invalid_answers.push([r,n-this.start_time]),e.do_print_error_message(this.input_type.get_given_answer(t))}output_writer(){return this.input_type.output_writer}get_given_answer(t){return this.input_type.get_given_answer(t)}demands_penalty(){return!1}penalty_is_over(){return!0}}class w extends g{constructor(t){super(t)}}class x{constructor(t){this.output_writer=t}print_input_request(){this.output_writer.ask_for_input()}get_given_answer(t){return this.output_writer.get_given_answer(t)}}class v extends x{constructor(t,e){super(e),this.accepted_keys=t}accepted_responses(){return this.accepted_keys}given_answer(t){return t}print_input_request(){}get_given_answer(t){return t}}const b=new class{constructor(){d("1234567890",{global:!0})}new_random_integer(t){return Math.trunc(t*Math.random())}set_seed(t){d(t,{global:!0})}};function y(t){b.set_seed(t)}function k(t){return b.new_random_integer(t)}d();class E{constructor(t,e,n){this.expected_answer="",this.given_answer="",this.required_milliseconds=null,this.task_number_in_execution=-1,this.invalid_answers=[],this.is_training=!1,this.has_pre_task_description=!1,this.do_print_task=()=>{throw new Error("Method not implemented.")},this.do_print_pre_task=()=>{throw new Error("Method not implemented.")},this.do_print_error_message=()=>{throw new Error("Method not implemented.")},this.accepts_answer_function=t=>!0,this.do_print_after_task_information=()=>{throw new Error("Method not implemented.")},this.treatment_combination=t,this.experiment_definition=e}accepts_answer(t){let e=this.experiment_definition.measurement.get_given_answer(t);return this.accepts_answer_function(e)}next_task(){return this.task_number_in_execution<this.experiment_definition.tasks.length?this.experiment_definition.tasks[this.task_number_in_execution]:null}html_string_with_cmd(t,e){}html_node_with_cmd(t,e){}after_task_string_constructor(t){}print_task(){this.do_print_task(),this.print_input_request()}print_pre_task_info(){this.do_print_pre_task()}print_input_request(){this.experiment_definition.measurement.input_type.print_input_request()}treatment_value(t){for(let e of this.treatment_combination.treatment_combination)if(e.variable.name===t)return e.value;throw"Unknown treatment: "+t}set_computed_variable_value(t,e){for(let n of this.treatment_combination.treatment_combination)if(n.variable.name===t)return void(n.value=e);throw"Unknown treatment: "+t}}class q{constructor(t,e){this.variables=t,this.repetitions=e}clone(){return new q(this.variables,this.repetitions)}create_treatment_combinations(){let t=[];for(let e=0;e<this.repetitions;e++)t=t.concat(this.variables.create_treatment_combinations());return t}create_tasks(t){let e=[];for(let n of this.create_treatment_combinations()){let r=new E(n.clone(),t,"");try{t.experiment_definition_task_creator(r)}catch(e){console.log("halt"),t.experiment_definition_task_creator(r)}r.is_training=t.is_training,e.push(r)}return function(t){let e=[...t],n=[];for(;e.length>0;)n.push(e.splice(k(e.length),1)[0]);return n}(e)}get_variable_named(t){return this.variables.get_variable_named(t)}}class A{constructor(t,e,n,r,i,s,a){this.questionnaires=[],this.tasks=[],this.experiment_name=t,this.is_training=e,this.template={experiment_name:t,variables:r,repetitions:i,task_creator:a},this.treatments_combinator=n,this.variables=r,this.measurement=s,this.experiment_definition_task_creator=a}init_experiment(t){this.tasks=this.treatments_combinator.create_tasks(this)}all_independent_variables(){return this.variables.independent_variables}generate_csv_data(){let t=[];for(let e of this.questionnaires)for(let n of e.questions)t.push('"'+n.variable_name+'";');this.variables.print_to_array(t),t.push("number_of_given_answers;expected_answer;given_answer;is_correct;time_in_milliseconds;\n");for(let e of this.tasks){for(let e of this.questionnaires)for(let n of e.questions)t.push('"'+n.answer+'";');for(let n of e.treatment_combination.treatment_combination)t.push(n.value+";");t.push(e.invalid_answers.length+1+";"),t.push(e.expected_answer+";"),t.push(e.given_answer+";"),t.push((e.given_answer==e.expected_answer)+";"),t.push(e.required_milliseconds+";"),e.invalid_answers.forEach((e=>t.push(e[0]+";"+e[1]+";"))),t.push("\n")}return t}}class C extends i{constructor(t,e,n){super(t,n,e[0],e[e.length-1]),this.current_page_number=-1,this.pages=e,this.create_automata()}set_page_index(t){this.current_page_number=t,this.empty_screen_and_show_instructions(this.pages[this.current_page_number]),this.output_writer().print_string_to_state(this.forwarder_name),this.output_writer().print_string_to_page_number("Page "+(this.current_page_number+1)+" / "+this.pages.length);let e="<hr>";t>0&&(e+="[&#8592] = previous page"),t<this.pages.length-1&&(e+=("<hr>"!=e?"<br>":"")+"[&#8594] = next page"),t==this.pages.length-1&&(e+=("<hr>"!=e?"<br>":"")+"[Enter] = Finish"),this.output_writer().print_html_on_stage(e)}set_active(){super.set_active()}show_intro(){this.set_page_index(0)}show_outro(){}automata_configurator(){return new s([0,1],0,(()=>{}),this.transitions(),[1])}transitions(){return[c(0).to(0).on("ArrowRight").if((t=>this.current_page_number<this.pages.length-1)).do((t=>{this.set_page_index(++this.current_page_number)})),c(0).to(0).on("ArrowLeft").if((t=>this.current_page_number>0)).do((t=>{this.set_page_index(--this.current_page_number)})),c(0).to(1).on("Enter").if((t=>this.current_page_number>=this.pages.length-1)).do((t=>{}))]}}class T extends e{constructor(t){super("Default Sequential Forwarder Forwader"),this.current_forwarder_index=0,this.forwarders=t;for(let e of t)e.automata.add_finish_action((()=>this.automata.input("switch to next state")));var e,n,i;this.automata=(e=[0,1],n=()=>{},i=[c(0).to(0).on("switch to next state").if((()=>this.current_forwarder_index<this.forwarders.length-1)).do((()=>{this.current_forwarder_index++,this.current_forwarder().set_active()})),c(0).to(1).on("switch to next state").if((()=>this.current_forwarder_index==this.forwarders.length-1)).do((()=>{}))],new r(new s(e,0,n,i,[1]))),this.automata.initialize()}input(t){this.forwarders[this.current_forwarder_index].input(t)}input_sequence(t){for(let e of t)this.input(e)}current_forwarder(){return this.forwarders[this.current_forwarder_index]}set_active(){super.set_active(),this.current_forwarder().set_active()}}class S extends i{show_intro(){this.empty_screen_and_show_instructions(this.pre_run_instructions),this.output_writer().print_experiment_name(this.forwarder_name)}show_outro(){this.empty_screen_and_show_instructions(this.post_run_instructions)}automata_configurator(){return new s([0,1,2,4,5,6],0,(()=>{}),this.transitions(),[6])}current_task(){return this.experiment_definition.tasks[this.current_page_index]}constructor(t,e,n,r,i){super(t,i,e,n),this.current_page_index=-1,this.experiment_definition=r}automata_configuration(){return new s([0,1,2,4,5,6],0,(()=>{}),this.transitions(),[6])}transitions(){return[c(0).to(2).on("Enter").if((t=>!this.first_task().has_pre_task_description)).do((t=>{this.set_experiment_index(0),this.measurement.start_measurement(this.current_task())})),c(0).to(1).on("Enter").if((t=>this.first_task().has_pre_task_description)).do((t=>{this.set_experiment_index(0),this.show_pre_task_info()})),c(0).to(5).on("Delete").do((t=>{this.show_outro()})),c(1).to(2).on("Enter").do((t=>{this.measurement.start_measurement(this.current_task())})),c(2).to(2).on_any(this.measurement.accepted_responses()).if((t=>!this.current_task().accepts_answer(t)&&!this.measurement.demands_penalty())).do((t=>{this.measurement.incorrect_response(t,this.current_task())})),c(2).to(5).on("?+Control").if((t=>!0)).do((t=>{this.measurement.stop_measurement(t,this.current_task()),this.show_outro()})),c(2).to(4).on_any(this.measurement.accepted_responses()).if((t=>this.current_task().accepts_answer(t)&&this.current_page_index<this.experiment_definition.tasks.length-1)).do((t=>{this.measurement.stop_measurement(t,this.current_task())})),c(2).to(3).on_any(this.measurement.accepted_responses()).if((t=>!this.current_task().accepts_answer(t)&&this.measurement.demands_penalty())).do((t=>{this.measurement.incorrect_response(t,this.current_task())})),c(3).to(2).on("Enter").if((t=>this.measurement.penalty_is_over())).do((t=>{this.measurement.start_measurement(this.current_task())})),c(4).to(1).on("Enter").if((t=>this.current_page_index<this.experiment_definition.tasks.length-1&&this.next_task().has_pre_task_description)).do((t=>{this.inc_current_experiment(),this.show_pre_task_info()})),c(4).to(2).on("Enter").if((t=>this.current_page_index<this.experiment_definition.tasks.length-1&&!this.next_task().has_pre_task_description)).do((t=>{this.inc_current_experiment(),this.measurement.start_measurement(this.current_task())})),c(2).to(5).on_any(this.measurement.accepted_responses()).if((t=>this.current_task().accepts_answer(t)&&this.current_page_index==this.experiment_definition.tasks.length-1)).do((t=>{this.measurement.stop_measurement(t,this.current_task()),this.show_outro()})),c(5).to(6).on("Enter").do((t=>{}))]}set_experiment_index(t){this.current_page_index=t,this.output_writer().print_string_to_page_number("Task "+(this.current_page_index+1)+" / "+this.experiment_definition.tasks.length)}inc_current_experiment(){this.set_experiment_index(++this.current_page_index)}init_experiment(){this.experiment_definition.init_experiment(!1)}show_pre_task_info(){this.output_writer().clear_stage(),this.output_writer().clear_error(),this.current_task().print_pre_task_info()}next_task(){return this.experiment_definition.tasks[this.current_page_index+1]}first_task(){return this.experiment_definition.tasks[0]}}class D extends S{constructor(t,e,n,r){super("Training",(()=>{t(),r.output_writer().print_html_on_stage("<hr>Press [Enter] to start training.")}),(()=>{r.output_writer().print_html_on_stage("You finished the training phase.<hr>"+(e.can_be_repeated?"Please, press [Enter] to run again a training session.<br>":"")+"Please, press [E] (capital E, i.e., [shift] + [e]) to enter the experiment phase.")}),n,r),this.training_configuration=e}print_cancel_text(){this.output_writer().clear_stage(),this.output_writer().print_string_to_page_number("Cancelled"),this.output_writer().print_html_on_stage("You cancelled this training session.<hr>Press [Enter] if you want to start another training session.<br>Press [E] (capital E!) if you want to start with the experiment.")}automata_configurator(){return new s([0,1,2,3,4,5,6,7],0,(()=>{}),this.transitions(),[6])}transitions(){let t=super.transitions(),e=[c(0).to(7).on("Escape").if((()=>this.training_configuration.can_be_cancelled)).do((t=>{this.print_cancel_text()})),c(2).to(7).on("Escape").if((()=>this.training_configuration.can_be_cancelled)).do((t=>{this.print_cancel_text()})),c(4).to(7).on("Escape").if((()=>this.current_page_index<this.experiment_definition.tasks.length-1&&this.training_configuration.can_be_cancelled)).do((t=>{this.print_cancel_text()})),c(7).to(6).on("E").do((()=>{})),c(7).to(0).on("Enter").do((()=>{this.experiment_definition.init_experiment(!0),this.show_intro()})),c(5).to(0).on("Enter").if((()=>this.training_configuration.can_be_repeated)).do((()=>{this.experiment_definition.init_experiment(!0),this.show_intro()})),c(5).to(6).on("E").do((t=>{}))];return t.splice(t.length-1),e.forEach((e=>t.push(e))),t}input(t){if(!["a","b","c"].includes(t)&&0!=this.automata.current_state)return super.input(t);super.input(t)}init_experiment(){this.training_configuration.init_experiment(this.experiment_definition)}}class O extends S{constructor(t,e,n){super("Main Experiment",(()=>{t(),n.output_writer().print_html_on_stage("<hr>Press [Enter] to start the experiment.")}),(()=>{n.output_writer().print_html_on_stage("You finished the experiment phase.<hr>Please, press [Enter] to go to the next phase.<br>")}),e,n)}}class I extends A{create_code_all_experiment_automatas(t){t.measurement.output_writer();let e=new C("Introduction",t.introduction_texts,t.measurement),n=new C("Finish",t.finish_texts,t.measurement);n.automata.add_finish_action((()=>t.finish_function(r.experiment_definition)));let r=new O(t.pre_run_experiment_output,this,t.measurement);r.init_experiment();let i=this.clone(),s=new D(t.pre_run_training_output,t.training_configuration,i,t.measurement);s.init_experiment();let a=null;null!=t.post_questionnaire&&(a=new p(t.post_questionnaire,t.measurement));let o=[];return null!=e&&o.push(e),0!=s.experiment_definition.tasks.length&&o.push(s),o.push(r),null!=a&&(o.push(a),r.experiment_definition.questionnaires.push(a)),o.push(n),new T(o)}clone(){return new I(this.template.experiment_name,this.is_training,this.treatments_combinator.clone(),this.template.variables,this.template.repetitions,this.measurement,this.template.task_creator)}}class M{constructor(t,e){this.variable=t,this.value=""+e}clone(){return new M(this.variable,this.value)}}function P(t,e,n){if(t.length>e.length)throw"Cannot loop both: first array has length: "+t.length+", but second has length "+e.length;let r=0;for(let i of t)n(i,e[r++])}class R{constructor(t){this.treatment_combination=[],this.treatment_combination=t}clone(){let t=new R([]);for(let e of this.treatment_combination)t.treatment_combination.push(e.clone());return t}}class z{constructor(t){this.can_be_cancelled=!0,this.can_be_repeated=!0,void 0!==t&&(null!=t.fixed_treatments&&(this.fixed_treatments=t.fixed_treatments),this.can_be_cancelled=t.can_be_cancelled,this.can_be_repeated=t.can_be_repeated)}init_experiment(t){if(t.tasks=[],null!=this.fixed_treatments)for(let e of this.fixed_treatments){let n=new R([]);P(t.all_independent_variables(),e,((t,e)=>{n.treatment_combination.push(new M(t,e))}));let r=new E(n,t,"");r.is_training=!0,t.experiment_definition_task_creator(r),t.tasks.push(r)}else t.init_experiment(!0)}}class j{constructor(t,e){this.treatments=[],this.name=t;for(let t of e)this.treatments.push(new M(this,t))}}function L(t,e,n){if(0==t.length)n(e);else{let r=t.shift();for(let i of r)e.push(i),L(t,e,n),e.pop();t.unshift(r)}}function B(t,e){L(t,[],e)}class U{constructor(){this.independent_variables=[]}push_variable(t,e){this.independent_variables.push(new j(t,e))}print_to_array(t){for(let e of this.independent_variables)t.push(e.name+";")}create_treatment_combinations(){let t=[];return B(this.independent_variables.map((t=>t.treatments)),(e=>{t.push(new R([...e]))})),t}get_variable_named(t){for(let e of this.independent_variables)if(e.name===t)return e;throw"Unknown independent variable named: "+t}static from_layout(t){let e=new U;for(let n of t)e.push_variable(n.variable,n.treatments);return e}}class G extends f{print_experiment_name(t){this.get_html_element_by_id("STATE").innerHTML=t}clear_error(){let t=["STAGE_ERROR"];for(let e of t){let t=document.getElementById(e);for(;t.firstChild;)t.removeChild(t.firstChild)}}clear_stage(){let t=["STAGE","STAGE_MSG","STAGE_ERROR"];for(let e of t){let t=document.getElementById(e);for(;t.firstChild;)t.removeChild(t.firstChild)}}clear_state(){let t=["STATE","TASK"];for(let e of t){let t=document.getElementById(e);for(;t.firstChild;)t.removeChild(t.firstChild)}}print_error_string_on_stage(t){this.get_html_element_by_id("STAGE_ERROR").innerHTML=t}get_html_element_by_id(t){return document.getElementById(t)}print_string_to_state(t){this.get_html_element_by_id("STATE").innerHTML=t}print_string_on_stage(t){this.print_html_on_stage("<p>"+t+"</p>")}ask_for_input(){let t=document.createElement("p"),e=document.createElement("label");e.setAttribute("type","text"),t.textContent="Answer: ",t.appendChild(e);let n=document.createElement("input");n.setAttribute("type","text"),n.setAttribute("class","input"),t.appendChild(n),n.id="INPUT",this.get_html_element_by_id("STAGE").appendChild(t),n.focus()}set_focus_on_input(){this.get_html_element_by_id("INPUT").focus()}print_string_to_page_number(t){this.get_html_element_by_id("TASK").innerHTML=t}get_given_answer(){return this.get_html_element_by_id("INPUT").value}print_on_input_response(t){this.get_html_element_by_id("INPUT").value=t}create_html_element_from_string(t){return(new DOMParser).parseFromString(t,"text/html").body}print_html_on_stage(t){this.get_html_element_by_id("STAGE").appendChild(this.create_html_element_from_string(t))}print_html_on_error(t){this.get_html_element_by_id("STAGE_ERROR").appendChild(this.create_html_element_from_string(t))}}y("42"),function(){let t=new G,e={experiment_name:"SQL-WithVersusSubquery",seed:"42",introduction_pages:[function(){return n.print_string_on_stage("This is your hello world experiment.")}],pre_run_training_instructions:(n=t).string_page_command("You entered the training phase. You can skip the training by pressing [Esc]."),pre_run_experiment_instructions:n.string_page_command("You entered the experiment phase."),post_questionnaire:[m("Age","What's your age??",["younger than 18","between 18 and (excluding) 25","between 25 and (excluding) 30","between 30 and (excluding) 35","between 35 and (excluding) 40","40 or older"]),m("Status","What is your current working status?",["Undergraduate student (BSc not yet finished)","Graduate student (at least BSc finished)","PhD student","Professional software developer","Teacher","Other"]),m("Studies","In case you study, what's your subject?",["I do not study","Computer science","computer science related (such as information systems, aka WiInf)","something else in natural sciences","something else"]),m("YearsOfExperience","How many years of experience do you have in software industry?",["none","less than or equal 1 year","more than 1 year, but less than or equal 3 years","more than 3 years, but less than or equal 5 year","more than 5 years"]),m("impression","What statement describes best your impression \n of the experiment?",["I do not think that there was a difference between the notations","The inference notation made it slightly easier for me","Java made it slightly easier for me","The inference notation made it much easier for me","Java made it much easier for me"])],training_configuration:{can_be_cancelled:!0,can_be_repeated:!0},finish_pages:[n.string_page_command("<p>Almost done. Next, the experiment data will be downloaded (after pressing [Enter]).<br><br>Please, send the downloaded file to the experimenter: <a href='mailto:stefan.hanenberg@uni-due.de'>stefan.hanenberg@uni-due.de</a></p><p>By sending that mail, you agree that your (anonymized) data will be used for scientific analyses where your data (together with others in an anonymized way) will be published.<br><br>I.e., you agree with the information sheet, see <a href='https://github.com/shanenbe/Experiments/blob/main/2024_TypeSystems_ConstructorCall_Flat/Agreement.pdf' target='_blank'>here</a>. Note, that it it no longer necessary to send a signed version of the agreement to the experimenter.<br><br>After sending your email, you can close this window.</p><p>Many thanks for your participation.<br>-Stefan Hanenberg</p>")],layout:[{variable:"Format",treatments:["OneLine","MultiLine"]}],repetitions:10,measurement:(i=["0","1","3"],r=t=>new v(i,t),t=>new w(r(t))),task_configuration:function(t){var e;e=function(t){for(var e=[],n=[],r=0;r<8;r++){var i=1==k(2)?"true":"false";e.push(i)}for(r=0;r<6;r++){var s=void 0;s="OneLine"==t?1==k(2)?" && ":" || ":1==k(2)?" && ":"\n || ",n.push(e[r]+s)}return n.push(e[7]),n.join("")}(t.treatment_value("Format")),t.expected_answer="1",t.do_print_task=function(){n.clear_stage(),n.print_html_on_stage("<div class='sourcecode'>"+n.convert_string_to_html_string(e)+"</div>")},t.accepts_answer=function(t){return!0},t.do_print_after_task_information=function(){n.print_error_string_on_stage(n.convert_string_to_html_string("The correct answer was: "+t.expected_answer+"\n\nIn case, you feel not concentrated enough, make a short break.\n\nPress [Enter] to go on. "))}}};var n,r,i;y(e.seed);let s=e.measurement(t),a=function(t){let e=U.from_layout(t.layout),n=new q(e,t.repetitions),r=new I(t.experiment_name,!1,n,e,t.repetitions,t.measurement,t.task_configuration),i=new z(t.training_configuration);return r.create_code_all_experiment_automatas({seed:t.seed,introduction_texts:t.introduction_pages,post_questionnaire:t.post_questionnaire,pre_run_training_output:t.pre_run_training_output,training_configuration:i,pre_run_experiment_output:t.pre_run_experiment_output,finish_texts:t.finish_pages,measurement:t.measurement,finish_function:t.finish_function})}({experiment_name:e.experiment_name,seed:e.seed,introduction_pages:e.introduction_pages,post_questionnaire:e.post_questionnaire,pre_run_training_output:e.pre_run_training_instructions,training_configuration:e.training_configuration,pre_run_experiment_output:e.pre_run_experiment_instructions,finish_pages:e.finish_pages,layout:e.layout,repetitions:e.repetitions,task_configuration:e.task_configuration,measurement:s,finish_function:t=>{document.removeEventListener("keydown",o),function(t,e){const n=new Blob(e,{type:"application/ssc"}),r=window.document.createElement("a");r.href=window.URL.createObjectURL(n),r.download="experimentdata.csv",document.body.appendChild(r),r.click(),document.body.removeChild(r)}(0,t.generate_csv_data())}}),o=t=>{let e=(r="","Alt"==(n=t).key&&n.ctrlKey?"Alt+Ctrl":"Control"==n.key&&n.altKey?"Ctrl+Alt":(r+=n.altKey?"+Alt":"",r+=n.ctrlKey?"+Control":"","Alt"==n.key?"Alt":""+n.key+r));var n,r;a.input(e)};document.addEventListener("keydown",o,!1),a.set_active()}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,